function [cf_] = createFit_gaussian_3rdOrder(angle_pre,angle_post,plot_on)
%CREATEFIT Create plot of data sets and fits
%   CREATEFIT(ANGLE_PRE,ANGLE_POST)
%   Creates a plot, similar to the plot in the main Curve Fitting Tool,
%   using the data that you provide as input.  You can
%   use this function with the same data you used with CFTOOL
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of data sets:  1
%   Number of fits:  1

% Data from data set "angle_post vs. angle_pre":
%     X = angle_pre:
%     Y = angle_post:
%     Unweighted

% Auto-generated by MATLAB on 02-May-2014 13:28:07

if plot_on == 1
    % Set up figure to receive data sets and fits
    f_ = clf;
    figure(f_);
    set(f_,'Units','Pixels','Position',[2341 401 674 476]);
    % Line handles and text for the legend.
    legh_ = [];
    legt_ = {};
    % Limits of the x-axis.
    xlim_ = [Inf -Inf];
    % Axes for the plot.
    ax_ = axes;
    set(ax_,'Units','normalized','OuterPosition',[0 0 1 1]);
    set(ax_,'Box','on');
    axes(ax_);
    hold on;
end

% --- Plot data that was originally in data set "angle_post vs. angle_pre"
angle_pre = angle_pre(:);
angle_post = angle_post(:);

if plot_on == 1
    h_ = line(angle_pre,angle_post,'Parent',ax_,'Color',[0.333333 0 0.666667],...
        'LineStyle','none', 'LineWidth',1,...
        'Marker','.', 'MarkerSize',12);
    xlim_(1) = min(xlim_(1),min(angle_pre));
    xlim_(2) = max(xlim_(2),max(angle_pre));
    legh_(end+1) = h_;
    legt_{end+1} = 'angle_post vs. angle_pre';

    % Nudge axis limits beyond data limits
    if all(isfinite(xlim_))
        xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
        set(ax_,'XLim',xlim_)
    else
        set(ax_, 'XLim',[-0.051098666666666660297, 0.060965333333333343591]);
    end
end

% --- Create fit "fit gaussian 3rd order"
fo_ = fitoptions('method','NonlinearLeastSquares','Lower',[-Inf -Inf    0 -Inf -Inf    0 -Inf -Inf    0]);
ok_ = isfinite(angle_pre) & isfinite(angle_post);
if ~all( ok_ )
    warning( 'GenerateMFile:IgnoringNansAndInfs',...
        'Ignoring NaNs and Infs in data.' );
end
st_ = [0.079019910465000176014 0.01346666666666666845 0.0035497524057649040841 0.074946696891407274532 0.022533333333333335768 0.0044445531165775414156 0.071078151212793885816 0.0065333333333333354354 0.0059447090653135508526 ];
set(fo_,'Startpoint',st_);
ft_ = fittype('gauss3');

% Fit this model using new data
cf_ = fit(angle_pre(ok_),angle_post(ok_),ft_,fo_);
% Alternatively uncomment the following lines to use coefficients from the
% original fit. You can use this choice to plot the original fit against new
% data.
%    cv_ = { 0, -0.40615353045597446524, 0.019590600513779088399, -2.408367509075586721, 0.028824833984603420722, 0.027746449189318605349, 2.4541976691155338308, 0.028654565627604107469, 0.027928784252150215539};
%    cf_ = cfit(ft_,cv_{:});

if plot_on == 1
    % Plot this fit
    h_ = plot(cf_,'fit',0.95);
    set(h_(1),'Color',[0 0 1],...
        'LineStyle','-', 'LineWidth',2,...
        'Marker','none', 'MarkerSize',6);
    % Turn off legend created by plot method.
    legend off;
    % Store line handle and fit name for legend.
    legh_(end+1) = h_(1);
    legt_{end+1} = 'fit gaussian 3rd order';

    % --- Finished fitting and plotting data. Clean up.
    hold off;
    % Display legend
    leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'};
    h_ = legend(ax_,legh_,legt_,leginfo_{:});
    set(h_,'Interpreter','none');
    % Remove labels from x- and y-axes.
    xlabel(ax_,'');
    ylabel(ax_,'');
end
