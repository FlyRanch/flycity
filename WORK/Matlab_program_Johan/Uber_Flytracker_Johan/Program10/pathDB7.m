function pathDB7(settings,pathDB)

    savefile = 'pathDB7.mat';
    
    
    % Program that uses a quasi-steady model to get an estimate of the
    % forces generated by the wings in real-time. The following variables
    % will be generated: average forces and moments over the up- and
    % down-stroke positioned at the left and righ wing hinge, the average
    % forces and moments over the up- and down-stroke positioned at the
    % center of gravity of the body, the radial position, the normal and
    % tangential force on the left and right wing for each movie frame and
    % finally an estimate of the mass of the fruitfly according to the
    % measured acceleration and estimated forces generated by the wing.
    % This will consist of an estimate where the fly is assumed to be a
    % point mass and an estimate where there is a kinematic model of the
    % fly and measured accelerations, measured velocities, measured 
    % orientations and measured angular velocities will be taken into 
    % account.
    
    % Initialize output variables:
   
    F_joint_L_down = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    M_joint_L_down = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    
    F_joint_L_up = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    M_joint_L_up = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    
    F_joint_R_down = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    M_joint_R_down = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    
    F_joint_R_up = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    M_joint_R_up = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    
    F_cg = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    M_cg = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    
    F_L = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    F_R = nan(size(pathDB.x,1),3,size(pathDB.x,2));
    
    F_L_arm = nan(size(pathDB.x,1),size(pathDB.x,2));
    F_R_arm = nan(size(pathDB.x,1),size(pathDB.x,2));
    
    R_L_down = nan(150,50,size(pathDB.x,2));
    Fn_L_down = nan(150,50,size(pathDB.x,2));
    Ft_L_down = nan(150,50,size(pathDB.x,2));
    Mn_L_down = nan(150,50,size(pathDB.x,2));
    Mt_L_down = nan(150,50,size(pathDB.x,2));
    
    R_L_up = nan(150,50,size(pathDB.x,2));
    Fn_L_up = nan(150,50,size(pathDB.x,2));
    Ft_L_up = nan(150,50,size(pathDB.x,2));
    Mn_L_up = nan(150,50,size(pathDB.x,2));
    Mt_L_up = nan(150,50,size(pathDB.x,2));
    
    R_R_down = nan(150,50,size(pathDB.x,2));
    Fn_R_down = nan(150,50,size(pathDB.x,2));
    Ft_R_down = nan(150,50,size(pathDB.x,2));
    Mn_R_down = nan(150,50,size(pathDB.x,2));
    Mt_R_down = nan(150,50,size(pathDB.x,2));
    
    R_R_up = nan(150,50,size(pathDB.x,2));
    Fn_R_up = nan(150,50,size(pathDB.x,2));
    Ft_R_up = nan(150,50,size(pathDB.x,2));
    Mn_R_up = nan(150,50,size(pathDB.x,2));
    Mt_R_up = nan(150,50,size(pathDB.x,2));
      
    m_est_point = nan(size(pathDB.x,1),size(pathDB.x,2));
    
    m_est_dynamical_model = nan(size(pathDB.x,1),size(pathDB.x,2));
    
    r_body_L_down = nan(150,3,size(pathDB.x,2));
    r_body_L_up = nan(150,3,size(pathDB.x,2));
    
    r_body_R_down = nan(150,3,size(pathDB.x,2));
    r_body_R_up = nan(150,3,size(pathDB.x,2));
    
    q_avg_down_body = nan(150,4,size(pathDB.x,2));
    q_avg_up_body = nan(150,4,size(pathDB.x,2));
    
    q_avg_down_L = nan(150,4,size(pathDB.x,2));
    q_avg_up_L = nan(150,4,size(pathDB.x,2));
    
    q_avg_down_R = nan(150,4,size(pathDB.x,2));
    q_avg_up_R = nan(150,4,size(pathDB.x,2));
    
    down_time_L = nan(150,50,size(pathDB.x,2));
    up_time_L = nan(150,50,size(pathDB.x,2));
        
    down_time_R= nan(150,50,size(pathDB.x,2));
    up_time_R= nan(150,50,size(pathDB.x,2));
    
    wingbeat_time= nan(150,50,size(pathDB.x,2));
    
    
%--------------------------------------------------------------------------    
    

    
    for i=1:size(pathDB.x,2)
    
        % start and stop point for the measurements
        start = find(isnan(pathDB.x(:,i))==0, 1 );
        stop = find(isnan(pathDB.x(:,i))==0, 1, 'last' );
        
        %Remove nan-values from necessary variables in pathDB:
        
        qL1 = pathDB.qL1_filt2(start:stop,i);
        qL2 = pathDB.qL2_filt2(start:stop,i);
        qL3 = pathDB.qL3_filt2(start:stop,i);
        qL4 = pathDB.qL4_filt2(start:stop,i);

        qR1 = pathDB.qR1_filt2(start:stop,i);
        qR2 = pathDB.qR2_filt2(start:stop,i);
        qR3 = pathDB.qR3_filt2(start:stop,i);
        qR4 = pathDB.qR4_filt2(start:stop,i);
        
        u_wing_L = pathDB.u_wing_L(start:stop,:,i);
        v_wing_L = pathDB.v_wing_L(start:stop,:,i);
        w_wing_L = pathDB.w_wing_L(start:stop,:,i);
        
        u_wing_R = pathDB.u_wing_R(start:stop,:,i);
        v_wing_R = pathDB.v_wing_R(start:stop,:,i);
        w_wing_R = pathDB.w_wing_R(start:stop,:,i);
        
        alfa_wing_L = pathDB.alfa_L(start:stop,:,i);
        alfa_wing_R = pathDB.alfa_R(start:stop,:,i);
        
        wing_l = pathDB.wing_l(i);
        
        clear k
        
        k = 1;
        
        while isnan(pathDB.L_wingbeat_loc(k,1,i)) == 0
          
            k = k+1;
            
        end
        
        Lwingbeat_loc = pathDB.L_wingbeat_loc(1:k-1,:,i);
        Rwingbeat_loc = pathDB.R_wingbeat_loc(1:k-1,:,i);
        
        clear k
        
        Lwingtip = pathDB.Lwingtip(start:stop,:,i);
        Rwingtip = pathDB.Rwingtip(start:stop,:,i);
        
        % Call the Quasi_steady_force model for the forces and moments at
        % the hinges, the wings and the average position of the
        % wings during the up and the down stroke:
        
        % The quasi-steady method will need the following variables as
        % input: positions of blade elements on the wing, average chord for
        % each blade element on the wing, distance between blade elements,
        % position of the left and right wing joints, 
        
        % addpath body model
    
        addpath(char(settings.path_names(2)));
        addpath(char(settings.path_names(7)));
        addpath(char(settings.path_names(8)));

        % Load the wing model into the function and calculate the location of
        % the sections and the average chord of each section:

        N = length(u_wing_L(1,:));

        pos = [1 1-(0.5/(N-2)):-(1/(N-2)):(0.5/(N-2)) 0];

        x_sect = zeros(N-2,1);

        y_sect_L = -wing_l.*pos(2:N-1);

        y_sect_R = wing_l.*pos(2:N-1);

        delta_R = wing_l/(N-2);

        joint_pos_L = pathDB.joint_pos_L(:,i);

        joint_pos_R = pathDB.joint_pos_R(:,i);

        % Load wing and body model --------------------------------------------

        cd(char(settings.sequence_names(i)))

        cd('flytracks')

        load('ManualFit_flytracks');

        cd ..

        cd ..

        % Assign model parameters
        PAR.params = ManualFit.params;
        PAR.DLT = ManualFit.DLT;
        PAR.cam = ManualFit.cam;

%         wing_scale = ManualFit.params.wingscale;
% 
%         body_scale = ManualFit.params.bodyscale;

        %clear ManualFit

        % Define the Tracking Parameters
        PAR.pixpermm = 1;
        PAR.numfly = 1;
        %Number of parameters of the model (i.e. 8 control points)
        PAR.mdlpar = 15*ones(1,PAR.numfly);
        PAR.statedim = PAR.mdlpar;
        PAR.modelfun_H = @modcurvesplineP;
        PAR.etamax = 0;

        %spline order
        PAR.c = 4;
        PAR.L1 = 15; %# of steps for body along length
        PAR.L2 = 6; %# of steps for head along length
        PAR.L3 = 25; %# of steps for wing around the boundary
        PAR.T1 = 13; %# of theta steps for head and body
        PAR.T2 = 2; %# of steps towards center of wing   

        SOLN = [0 0 0 0 0 0 1 0 0 0 1 0 0 0 1];

        clear flymodQ
        [x,y,z] = flymodQ(SOLN,PAR.params,PAR);
        for j = 1:length(x);
            PAR.modsample(j) = size(x{j},1);
        end
        
            % Extract chord length at the section centers and assume it is equal to
        % the average chord length for the section. This assumption is not very
        % accurate, however it will be sufficient if the number of sections is
        % big enough:

        x_wingR = x{3};
        y_wingR = y{3};

        chords = zeros(N-2,1);
        M = length(x_wingR(:,1));

        for j = 1:N-2
        int_val1 = interp1(y_wingR(1:((M+1)/2),1)-joint_pos_R(2),x_wingR(1:((M+1)/2),1)-joint_pos_R(1),y_sect_R(j));
        int_val2 = interp1(y_wingR(((M+1)/2):M,1)-joint_pos_R(2),x_wingR(((M+1)/2):M,1)-joint_pos_R(1),y_sect_R(j));

        chords(j) = int_val1-int_val2;
        end

        % Now calculate for every wingbeat the quasi-steady forces generated
        % during the up- and down-stroke for the left and right wingbeat:


        if Lwingbeat_loc(1,1) > Lwingbeat_loc(1,2)
            start_L = 0;
            end_L = length(Lwingbeat_loc(:,1))-1;
        else
            start_L = 1;
            end_L = length(Lwingbeat_loc(:,1))-2;
        end

        if Rwingbeat_loc(1,1) > Rwingbeat_loc(1,2)
            start_R = 0;
            end_R = length(Rwingbeat_loc(:,1))-1;
        else
            start_R = 1;
            end_R = length(Rwingbeat_loc(:,1))-2;
        end
        
        
        
        
%--------------------------------------------------------------------------        
        
        % Left wingbeat:
        
        for j = 1:end_L

        
            % Downstroke:
            
            a = Lwingbeat_loc(j,2):1:(Lwingbeat_loc(j+start_L,1)-1);

            up = 0;
            down = 1;

            [Fx_t,Fy_t,Fz_t,Fn_t,Ft_t,Mn_t,Mt_t,R_F_t,r_body_t,Mx_t,My_t,Mz_t,q_avg_t] = Quasi_steady_force(qL1(a),qL2(a),qL3(a),qL4(a),u_wing_L(a,:),v_wing_L(a,:),w_wing_L(a,:),alfa_wing_L(a,:),chords,delta_R,y_sect_L,up,down);

            
            F_L(start-1+a,:,i) = [Ft_t(1:length(a))' zeros(length(a),1) Fn_t(1:length(a))']; % Defined at wing reference frame
            F_L_arm(start-1+a,i) = R_F_t(1:length(a))';
           
            F_joint_L_down(start-1+a,:,i) = [Fx_t; Fy_t; Fz_t]';
            M_joint_L_down(start-1+a,:,i) = [Mx_t; My_t; Mz_t]';
            
            R_L_down(j,:,i) = R_F_t;
            Fn_L_down(j,:,i) = Fn_t;
            Ft_L_down(j,:,i) = Ft_t;
            Mn_L_down(j,:,i) = Mn_t;
            Mt_L_down(j,:,i) = Mt_t;
            
            r_body_L_down(j,:,i) = r_body_t;
            
            q_avg_down_L(j,:,i) = q_avg_t;
            
            clear a Fx_t Fy_t Fz_t Fn_t Ft_t Mn_t Mt_t R_F_t r_body_t Mx_t My_t Mz_t q_avg_t

            % Upstroke:

            b = Lwingbeat_loc(j+start_L,1):1:(Lwingbeat_loc(j+1,2)-1);

            up = 1;
            down = 0;

            [Fx_t,Fy_t,Fz_t,Fn_t,Ft_t,Mn_t,Mt_t,R_F_t,r_body_t,Mx_t,My_t,Mz_t,q_avg_t] = Quasi_steady_force(qL1(b),qL2(b),qL3(b),qL4(b),u_wing_L(b,:),v_wing_L(b,:),w_wing_L(b,:),alfa_wing_L(b,:),chords,delta_R,y_sect_L,up,down);
            
            F_L(start-1+b,:,i) = [Ft_t(1:length(b))' zeros(length(b),1) Fn_t(1:length(b))'];
            F_L_arm(start-1+b,i) = R_F_t(1:length(b))';
            
            F_joint_L_up(start-1+b,:,i) = [Fx_t; Fy_t; Fz_t]';
            M_joint_L_up(start-1+b,:,i) = [Mx_t; My_t; Mz_t]';
            
            R_L_up(j,:,i) = R_F_t;
            Fn_L_up(j,:,i) = Fn_t;
            Ft_L_up(j,:,i) = Ft_t;
            Mn_L_up(j,:,i) = Mn_t;
            Mt_L_up(j,:,i) = Mt_t;
            
            r_body_L_up(j,:,i) = r_body_t;
            
            q_avg_up_L(j,:,i) = q_avg_t;
            
            clear b Fx_t Fy_t Fz_t Fn_t Ft_t Mn_t Mt_t R_F_t r_body_t Mx_t My_t Mz_t q_avg_t
        end
        
        
        
%--------------------------------------------------------------------------


        % Right wingbeat:
        
        for j = 1:end_R

        
            % Downstroke:
            
            a = Rwingbeat_loc(j,2):1:(Rwingbeat_loc(j+start_R,1)-1);

            up = 0;
            down = 1;

            [Fx_t,Fy_t,Fz_t,Fn_t,Ft_t,Mn_t,Mt_t,R_F_t,r_body_t,Mx_t,My_t,Mz_t,q_avg_t] = Quasi_steady_force(qR1(a),qR2(a),qR3(a),qR4(a),u_wing_R(a,:),v_wing_R(a,:),w_wing_R(a,:),alfa_wing_R(a,:),chords,delta_R,y_sect_R,up,down);
            
            F_R(start-1+a,:,i) = [Ft_t(1:length(a))' zeros(length(a),1) Fn_t(1:length(a))'];
            F_R_arm(start-1+a,i) = R_F_t(1:length(a))';
            
            F_joint_R_down(start-1+a,:,i) = [Fx_t; Fy_t; Fz_t]';
            M_joint_R_down(start-1+a,:,i) = [Mx_t; My_t; Mz_t]';
            
            R_R_down(j,:,i) = R_F_t;
            Fn_R_down(j,:,i) = Fn_t;
            Ft_R_down(j,:,i) = Ft_t;
            Mn_R_down(j,:,i) = Mn_t;
            Mt_R_down(j,:,i) = Mt_t;
            
            r_body_R_down(j,:,i) = r_body_t;
            
            q_avg_down_R(j,:,i) = q_avg_t;
            
            clear a Fx_t Fy_t Fz_t Fn_t Ft_t Mn_t Mt_t R_F_t r_body_t Mx_t My_t Mz_t q_avg_t

            % Upstroke:

            b = Rwingbeat_loc(j+start_R,1):1:(Rwingbeat_loc(j+1,2)-1);

            up = 1;
            down = 0;

            [Fx_t,Fy_t,Fz_t,Fn_t,Ft_t,Mn_t,Mt_t,R_F_t,r_body_t,Mx_t,My_t,Mz_t,q_avg_t] = Quasi_steady_force(qR1(b),qR2(b),qR3(b),qR4(b),u_wing_R(b,:),v_wing_R(b,:),w_wing_R(b,:),alfa_wing_R(b,:),chords,delta_R,y_sect_R,up,down);

            F_R(start-1+b,:,i) = [Ft_t(1:length(b))' zeros(length(b),1) Fn_t(1:length(b))'];         
            F_R_arm(start-1+b,i) = R_F_t(1:length(b))';
            
            F_joint_R_up(start-1+b,:,i) = [Fx_t; Fy_t; Fz_t]';
            M_joint_R_up(start-1+b,:,i) = [Mx_t; My_t; Mz_t]';
            
            R_R_up(j,:,i) = R_F_t;
            Fn_R_up(j,:,i) = Fn_t;
            Ft_R_up(j,:,i) = Ft_t;
            Mn_R_up(j,:,i) = Mn_t;
            Mt_R_up(j,:,i) = Mt_t;
            
            r_body_R_up(j,:,i) = r_body_t;
            
            q_avg_up_R(j,:,i) = q_avg_t;
            
            clear b Fx_t Fy_t Fz_t Fn_t Ft_t Mn_t Mt_t R_F_t r_body_t Mx_t My_t Mz_t q_avg_t
        end
        
        
%--------------------------------------------------------------------------


        % Use the forces and moments on the hinge to calculate one force
        % vector and one moment vector at the center of gravitiy
        
                    
        F_joint_L = nan(stop-start+1,3);
        F_joint_R = nan(stop-start+1,3);
            
        M_joint_L = nan(stop-start+1,3);
        M_joint_R = nan(stop-start+1,3);
        
        
        for j = 1:end_L
            
            % Downstroke:
            
            a = Lwingbeat_loc(j,2):1:(Lwingbeat_loc(j+start_L,1)-1); 
            
            F_joint_L(a,:) = F_joint_L_down(start-1+a,:,i);
            
            M_joint_L(a,:) = M_joint_L_down(start-1+a,:,i);
            
            % Upstroke:

            b = Lwingbeat_loc(j+start_L,1):1:(Lwingbeat_loc(j+1,2)-1);
            
            F_joint_L(b,:) = F_joint_L_up(start-1+b,:,i);
            
            M_joint_L(b,:) = M_joint_L_up(start-1+b,:,i);
            
            
            clear a b
        end
        
        for j = 1:end_R
            
            % Downstroke:
            
            a = Rwingbeat_loc(j,2):1:(Rwingbeat_loc(j+start_R,1)-1); 
            
            F_joint_R(a,:) = F_joint_R_down(start-1+a,:,i);
            
            M_joint_R(a,:) = M_joint_R_down(start-1+a,:,i);
            
            % Upstroke:

            b = Rwingbeat_loc(j+start_R,1):1:(Rwingbeat_loc(j+1,2)-1);
            
            F_joint_R(b,:) = F_joint_R_up(start-1+b,:,i);
            
            M_joint_R(b,:) = M_joint_R_up(start-1+b,:,i);
            
            clear a b
            
        end
        

        for j = 1:(stop-start+1)
            
            F_cg(start-1+j,:,i) = [F_joint_L(j,:)+F_joint_R(j,:)]';
                        
            M_cg(start-1+j,:,i) = [M_joint_L(j,:)+M_joint_R(j,:)]'+cross(1e-3.*joint_pos_L,F_joint_L(j,:)')+cross(1e-3.*joint_pos_R,F_joint_R(j,:)');

                       
        end
        
%--------------------------------------------------------------------------

        %Estimate the mass based on the total force generated by both wings
        %and the linear acceleration of the body:
        
        % Transfer F_cg to global reference frame and compute m_est_point
        
        m_wl = 1e-6*0.1078*wing_l^3.008;
        
        for j = start:stop
        
            DCM = quat2matNEW([pathDB.qb1_filt(j,i) pathDB.qb2_filt(j,i) pathDB.qb3_filt(j,i) pathDB.qb4_filt(j,i)]);
                        
            F_temp = DCM*F_cg(j,:,i)';
            
            a_temp = 1e-3.*[pathDB.ax_filt(j,i); pathDB.ay_filt(j,i); pathDB.az_filt(j,i)-9.81*1000];
            
            theta = real(acos(dot(a_temp,F_temp)/(norm(F_temp)*norm(a_temp))));
            
            m_est_point(j-start+1,i) = norm(cos(pi-theta))*(norm(F_temp)/norm(a_temp))/m_wl;
            
            clear F_temp DCM a_temp theta
            
        end
        
        
%--------------------------------------------------------------------------

        
        % Calculate the average orientation and postion of the body during
        % the downstroke and the upstroke:
        
        for j = 1:end_L
            
            % Downstroke:
            
            a = Lwingbeat_loc(j,2):1:(Lwingbeat_loc(j+start_L,1)-1); 

            [q_avg_down_body(j,:,i)] = q_avg(pathDB.qb1_filt(start-1+a,i), pathDB.qb2_filt(start-1+a,i), pathDB.qb3_filt(start-1+a,i), pathDB.qb4_filt(start-1+a,i));
            
            % Upstroke:

            b = Lwingbeat_loc(j+start_L,1):1:(Lwingbeat_loc(j+1,2)-1);

            [q_avg_up_body(j,:,i)] = q_avg(pathDB.qb1_filt(start-1+b,i), pathDB.qb2_filt(start-1+b,i), pathDB.qb3_filt(start-1+b,i), pathDB.qb4_filt(start-1+b,i));
            
            clear a b
        end
        
%--------------------------------------------------------------------------

        % Calculate the upstroke and downstroke identities per wingbeat for
        % the left and the righ wing:
        
        for j = 1:end_L
            
            % Downstroke:
            
            a = Lwingbeat_loc(j,2):1:(Lwingbeat_loc(j+start_L,1)-1); 
            
            down_time_L(j,1:length(a),i) = a;
            
            % Upstroke:

            b = Lwingbeat_loc(j+start_L,1):1:(Lwingbeat_loc(j+1,2)-1);
            
            up_time_L(j,1:length(b),i) = b;
            
            % Wingbeat:
            
            c = Lwingbeat_loc(j,2):1:(Lwingbeat_loc(j+1,2)-1); 
            
            wingbeat_time(j,1:length(c),i) = c;
            
            clear a b c
        end
        
        for j = 1:end_R
            
            % Downstroke:
            
            a = Rwingbeat_loc(j,2):1:(Rwingbeat_loc(j+start_R,1)-1);
            
            down_time_R(j,1:length(a),i) = a;
            
            % Upstroke:

            b = Rwingbeat_loc(j+start_R,1):1:(Rwingbeat_loc(j+1,2)-1);

            up_time_R(j,1:length(b),i) = b;
            
            clear a b
            
        end   

        
    end
    
    save(savefile,'F_joint_L_down','M_joint_L_down','F_joint_L_up','M_joint_L_up','F_joint_R_down','M_joint_R_down','F_joint_R_up','M_joint_R_up','F_cg','M_cg','R_L_down','Fn_L_down','Ft_L_down','Mn_L_down','Mt_L_down', ...
              'R_L_up','Fn_L_up','Ft_L_up','Mn_L_up','Mt_L_up','R_R_down','Fn_R_down','Ft_R_down','Mn_R_down','Mt_R_down', 'R_R_up','Fn_R_up','Ft_R_up','Mn_R_up','Mt_R_up','m_est_point','m_est_dynamical_model', ...
              'r_body_L_down','r_body_L_up','r_body_R_down','r_body_R_up','q_avg_down_body','q_avg_up_body','q_avg_down_L','q_avg_up_L','q_avg_down_R','q_avg_up_R','down_time_L','up_time_L','wingbeat_time','down_time_R', ...
              'up_time_R','F_L','F_R','F_L_arm','F_R_arm')

end






