
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ade2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003fa  00802000  0000ade2  0000ae96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000070f  008023fa  008023fa  0000b290  2**0
                  ALLOC
  3 .eeprom       0000046a  00810000  00810000  0000b290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00000d08  00000000  00000000  0000b6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000070  00000000  00000000  0000c404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000c474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000e1e  00000000  00000000  0000c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008e39  00000000  00000000  0000d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001570  00000000  00000000  0001620b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000589d  00000000  00000000  0001777b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000008d0  00000000  00000000  0001d018  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001f79  00000000  00000000  0001d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000543a  00000000  00000000  0001f861  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000320  00000000  00000000  00024c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__ctors_end>
       4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
       8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
       c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      10:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      14:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      18:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      1c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      20:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      24:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      28:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      2c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      30:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      34:	0c 94 a9 2d 	jmp	0x5b52	; 0x5b52 <__vector_13>
      38:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      3c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      40:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      44:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      48:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      4c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      50:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      54:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      58:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      5c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      60:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      64:	0c 94 64 3b 	jmp	0x76c8	; 0x76c8 <__vector_25>
      68:	0c 94 b4 3b 	jmp	0x7768	; 0x7768 <__vector_26>
      6c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      70:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      74:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      78:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      7c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      80:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      84:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      88:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      8c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      90:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      94:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      98:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      9c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      a0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      a4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      a8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      ac:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      b0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      b4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      b8:	0c 94 3f 2d 	jmp	0x5a7e	; 0x5a7e <__vector_46>
      bc:	0c 94 29 3c 	jmp	0x7852	; 0x7852 <__vector_47>
      c0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      c4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      c8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      cc:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      d0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      d4:	0c 94 1a 4e 	jmp	0x9c34	; 0x9c34 <__vector_53>
      d8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      dc:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      e0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      e4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      e8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      ec:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      f0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      f4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      f8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
      fc:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     100:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     104:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     108:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     10c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     110:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     114:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     118:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     11c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     120:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     124:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     128:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     12c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     130:	0c 94 74 2d 	jmp	0x5ae8	; 0x5ae8 <__vector_76>
     134:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     138:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     13c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     140:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     144:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     148:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     14c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     150:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     154:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     158:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     15c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     160:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     164:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     168:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     16c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     170:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     174:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     178:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     17c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     180:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     184:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     188:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     18c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     190:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_100>
     194:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     198:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     19c:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1a0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1a4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1a8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1ac:	0c 94 0a 2d 	jmp	0x5a14	; 0x5a14 <__vector_107>
     1b0:	0c 94 6a 4e 	jmp	0x9cd4	; 0x9cd4 <__vector_108>
     1b4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1b8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1bc:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1c0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1c4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1c8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1cc:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1d0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1d4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1d8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1dc:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1e0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1e4:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1e8:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1ec:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1f0:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__bad_interrupt>
     1f4:	58 26       	eor	r5, r24
     1f6:	5d 26       	eor	r5, r29
     1f8:	62 26       	eor	r6, r18
     1fa:	66 26       	eor	r6, r22
     1fc:	6a 26       	eor	r6, r26
     1fe:	6e 26       	eor	r6, r30
     200:	77 26       	eor	r7, r23
     202:	7b 26       	eor	r7, r27
     204:	7f 26       	eor	r7, r31
     206:	9c 26       	eor	r9, r28
     208:	9c 26       	eor	r9, r28
     20a:	9c 26       	eor	r9, r28
     20c:	9c 26       	eor	r9, r28
     20e:	9c 26       	eor	r9, r28
     210:	9c 26       	eor	r9, r28
     212:	83 26       	eor	r8, r19
     214:	98 26       	eor	r9, r24
     216:	6a 4c       	sbci	r22, 0xCA	; 202
     218:	7e 4c       	sbci	r23, 0xCE	; 206
     21a:	ee 4c       	sbci	r30, 0xCE	; 206
     21c:	f4 4c       	sbci	r31, 0xC4	; 196
     21e:	67 4c       	sbci	r22, 0xC7	; 199
     220:	67 4c       	sbci	r22, 0xC7	; 199
     222:	67 4c       	sbci	r22, 0xC7	; 199
     224:	67 4c       	sbci	r22, 0xC7	; 199
     226:	67 4c       	sbci	r22, 0xC7	; 199
     228:	67 4c       	sbci	r22, 0xC7	; 199
     22a:	8f 4d       	sbci	r24, 0xDF	; 223
     22c:	94 4d       	sbci	r25, 0xD4	; 212
     22e:	96 4d       	sbci	r25, 0xD6	; 214
     230:	a4 4d       	sbci	r26, 0xD4	; 212
     232:	c3 4d       	sbci	r28, 0xD3	; 211

00000234 <__c.6190>:
     234:	49 4e 54 33 20 63 61 74 63 68 65 73 20 61 20 72     INT3 catches a r
     244:	69 73 69 6e 67 20 65 64 67 65 20 74 72 69 67 67     ising edge trigg
     254:	65 72 21 0a 00                                      er!..

00000259 <__c.6160>:
     259:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     269:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

00000276 <__c.6158>:
     276:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     286:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000297 <__c.6153>:
     297:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     2a7:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

000002b5 <__c.6103>:
     2b5:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     2c5:	20 69 6e 20 66 65 74 63 68 5f 75 70 64 61 74 65      in fetch_update
     2d5:	5f 66 75 6e 63 59 0a 00                             _funcY..

000002dd <__c.6101>:
     2dd:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000002e8 <__c.6096>:
     2e8:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     2f8:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     308:	74 65 5f 66 75 6e 63 59 0a 00                       te_funcY..

00000312 <__c.6094>:
     312:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

0000031d <__c.6092>:
     31d:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     32d:	74 69 6f 6e 5f 59 20 69 73 20 66 75 6c 6c 0a 00     tion_Y is full..

0000033d <__c.6030>:
     33d:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     34d:	74 69 6f 6e 5f 59 20 69 73 20 65 6d 70 74 79 0a     tion_Y is empty.
	...

0000035e <__c.5962>:
     35e:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     36e:	20 69 6e 20 66 65 74 63 68 5f 75 70 64 61 74 65      in fetch_update
     37e:	5f 66 75 6e 63 58 0a 00                             _funcX..

00000386 <__c.5960>:
     386:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000391 <__c.5955>:
     391:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     3a1:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     3b1:	74 65 5f 66 75 6e 63 58 0a 00                       te_funcX..

000003bb <__c.5953>:
     3bb:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000003c6 <__c.5951>:
     3c6:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     3d6:	74 69 6f 6e 5f 78 20 69 73 20 66 75 6c 6c 0a 00     tion_x is full..

000003e6 <__c.5888>:
     3e6:	52 69 6e 67 20 62 75 66 66 65 72 20 66 75 6e 63     Ring buffer func
     3f6:	74 69 6f 6e 5f 78 20 69 73 20 65 6d 70 74 79 0a     tion_x is empty.
	...

00000407 <__c.5832>:
     407:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     417:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     427:	2e 0a 00                                            ...

0000042a <__c.5829>:
     42a:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     43a:	79 20 3d 20 25 75 0a 00                             y = %u..

00000442 <__c.5827>:
     442:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     452:	79 20 3d 20 25 75 0a 00                             y = %u..

0000045a <__c.5825>:
     45a:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     46a:	0a 00                                               ..

0000046c <__c.5823>:
     46c:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

0000047d <__c.5821>:
     47d:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     48d:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

0000049e <__c.5819>:
     49e:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     4ae:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 59 2e 0a     set_vel_func Y..
	...

000004bf <__c.5817>:
     4bf:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     4cf:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     4df:	20 59 0a 00                                          Y..

000004e3 <__c.5813>:
     4e3:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     4f3:	78 20 3d 20 25 75 0a 00                             x = %u..

000004fb <__c.5811>:
     4fb:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     50b:	78 20 3d 20 25 75 0a 00                             x = %u..

00000513 <__c.5809>:
     513:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     523:	0a 00                                               ..

00000525 <__c.5807>:
     525:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

00000536 <__c.5805>:
     536:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     546:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000557 <__c.5803>:
     557:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 69 6e 20     Error f_read in 
     567:	73 65 74 5f 76 65 6c 5f 66 75 6e 63 20 58 2e 0a     set_vel_func X..
	...

00000578 <__c.5801>:
     578:	53 65 74 74 69 6e 67 20 76 65 6c 6f 63 69 74 79     Setting velocity
     588:	20 66 75 6e 63 74 69 6f 6e 20 20 25 75 20 66 6f      function  %u fo
     598:	72 20 58 0a 00                                      r X..

0000059d <__c.5719>:
     59d:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     5ad:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     5bd:	2e 0a 00                                            ...

000005c0 <__c.5716>:
     5c0:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     5d0:	79 20 3d 20 25 75 0a 00                             y = %u..

000005d8 <__c.5714>:
     5d8:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     5e8:	79 20 3d 20 25 75 0a 00                             y = %u..

000005f0 <__c.5712>:
     5f0:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     600:	20 0a 00                                             ..

00000603 <__c.5710>:
     603:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

00000614 <__c.5708>:
     614:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     624:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

00000635 <__c.5706>:
     635:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     645:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

00000653 <__c.5704>:
     653:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     663:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     673:	20 59 0a 00                                          Y..

00000677 <__c.5700>:
     677:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     687:	78 20 3d 20 25 75 0a 00                             x = %u..

0000068f <__c.5698>:
     68f:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     69f:	78 20 3d 20 25 75 0a 00                             x = %u..

000006a7 <__c.5696>:
     6a7:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     6b7:	0a 00                                               ..

000006b9 <__c.5694>:
     6b9:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

000006ca <__c.5689>:
     6ca:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     6da:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     6ea:	74 65 5f 66 75 6e 63 58 0a 00                       te_funcX..

000006f4 <__c.5687>:
     6f4:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

000006ff <__c.5682>:
     6ff:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     70f:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     71f:	74 65 5f 66 75 6e 63 58 0a 00                       te_funcX..

00000729 <__c.5680>:
     729:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000734 <__c.5675>:
     734:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     744:	69 6e 20 69 6e 20 66 65 74 63 68 5f 75 70 64 61     in in fetch_upda
     754:	74 65 5f 66 75 6e 63 58 0a 00                       te_funcX..

0000075e <__c.5673>:
     75e:	72 65 73 20 3d 20 20 25 75 0a 00                    res =  %u..

00000769 <__c.5671>:
     769:	66 75 6e 63 74 69 6f 6e 20 73 69 7a 65 20 69 73     function size is
     779:	20 74 6f 6f 20 62 69 67 20 74 6f 20 6c 6f 61 64      too big to load
     789:	20 74 6f 20 45 45 50 52 4f 4d 2e 0a 00               to EEPROM...

00000796 <__c.5669>:
     796:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     7a6:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

000007b7 <__c.5667>:
     7b7:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     7c7:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

000007d4 <__c.5665>:
     7d4:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     7e4:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     7f4:	20 58 0a 00                                          X..

000007f8 <__c.5602>:
     7f8:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     808:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     818:	2e 0a 00                                            ...

0000081b <__c.5599>:
     81b:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     82b:	79 20 3d 20 25 75 0a 00                             y = %u..

00000833 <__c.5597>:
     833:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     843:	79 20 3d 20 25 75 0a 00                             y = %u..

0000084b <__c.5595>:
     84b:	6c 61 73 74 5f 6c 6f 61 64 5f 79 20 3d 20 25 75     last_load_y = %u
     85b:	20 0a 00                                             ..

0000085e <__c.5593>:
     85e:	66 75 6e 63 53 69 7a 65 5f 79 20 3d 20 25 75 0a     funcSize_y = %u.
	...

0000086f <__c.5591>:
     86f:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     87f:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a     set_pos_func Y..
	...

00000890 <__c.5589>:
     890:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     8a0:	5f 70 6f 73 5f 66 75 6e 63 20 59 2e 0a 00           _pos_func Y...

000008ae <__c.5587>:
     8ae:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     8be:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     8ce:	20 59 0a 00                                          Y..

000008d2 <__c.5583>:
     8d2:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     8e2:	78 20 3d 20 25 75 0a 00                             x = %u..

000008ea <__c.5581>:
     8ea:	6e 75 6d 5f 62 75 66 66 65 72 5f 6c 6f 61 64 5f     num_buffer_load_
     8fa:	78 20 3d 20 25 75 0a 00                             x = %u..

00000902 <__c.5579>:
     902:	6c 61 73 74 5f 6c 6f 61 64 5f 78 20 3d 20 25 75     last_load_x = %u
     912:	0a 00                                               ..

00000914 <__c.5577>:
     914:	66 75 6e 63 53 69 7a 65 5f 78 20 3d 20 25 75 0a     funcSize_x = %u.
	...

00000925 <__c.5575>:
     925:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     935:	73 65 74 5f 70 6f 73 5f 66 75 6e 63 20 58 2e 0a     set_pos_func X..
	...

00000946 <__c.5573>:
     946:	45 72 72 6f 72 20 66 5f 72 65 61 64 20 73 65 74     Error f_read set
     956:	5f 70 6f 73 5f 66 75 6e 63 20 58 0a 00              _pos_func X..

00000963 <__c.5571>:
     963:	53 65 74 74 69 6e 67 20 70 6f 73 69 74 69 6f 6e     Setting position
     973:	20 66 75 6e 63 74 69 6f 6e 20 25 75 20 66 6f 72      function %u for
     983:	20 58 0a 00                                          X..

00000987 <__c.5553>:
     987:	57 72 6f 6e 67 20 66 75 6e 63 74 69 6f 6e 20 63     Wrong function c
     997:	68 61 6e 6e 65 6c 20 6e 75 6d 62 65 72 2e 0a 00     hannel number...

000009a7 <__c.5547>:
     9a7:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     9b7:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

000009c8 <__c.5540>:
     9c8:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     9d8:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

000009e9 <__c.5489>:
     9e9:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     9f9:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     a09:	20 3d 20 25 75 0a 00                                 = %u..

00000a10 <__c.5465>:
     a10:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     a20:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     a30:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     a40:	61 72 64 2e 0a 00                                   ard...

00000a46 <__c.5463>:
     a46:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     a56:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     a66:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     a76:	50 52 4f 4d 0a 00                                   PROM..

00000a7c <__c.5412>:
     a7c:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     a8c:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

00000a98 <__c.5410>:
     a98:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     aa8:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000ab7 <__c.5408>:
     ab7:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     ac7:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     ad7:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     ae7:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     af7:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     b07:	75 0a 00                                            u..

00000b0a <__c.5406>:
     b0a:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     b1a:	25 75 3a 0a 00                                      %u:..

00000b1f <__c.5318>:
     b1f:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     b2f:	64 20 70 61 74 74 65 72 6e 20 25 75 20 74 6f 20     d pattern %u to 
     b3f:	74 68 65 20 70 61 6e 65 6c 73 0a 00                 the panels..

00000b4b <__c.5316>:
     b4b:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     b5b:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

00000b67 <__c.5314>:
     b67:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     b77:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000b86 <__c.5312>:
     b86:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 74     Failed to load t
     b96:	68 69 73 20 50 61 74 74 65 72 6e 20 74 6f 20 50     his Pattern to P
     ba6:	61 6e 65 6c 73 0a 00                                anels..

00000bad <__c.5310>:
     bad:	54 68 69 73 20 70 61 74 74 65 72 6e 20 73 69 7a     This pattern siz
     bbd:	65 20 69 73 20 25 6c 75 0a 00                       e is %lu..

00000bc7 <__c.5308>:
     bc7:	50 61 74 74 65 72 6e 20 73 69 7a 65 20 69 73 20     Pattern size is 
     bd7:	75 70 74 6f 20 38 30 30 20 62 79 74 65 20 70 65     upto 800 byte pe
     be7:	72 20 70 61 6e 65 6c 2e 0a 00                       r panel...

00000bf1 <__c.5303>:
     bf1:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     c01:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     c11:	75 0a 00                                            u..

00000c14 <__c.5301>:
     c14:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     c24:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     c34:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000c3e <__c.5299>:
     c3e:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     c4e:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000c5c <__c.5297>:
     c5c:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     c6c:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     c7c:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

00000c85 <__c.5283>:
     c85:	20 20 62 79 74 65 73 5f 70 65 72 5f 70 61 6e 65       bytes_per_pane
     c95:	6c 5f 66 72 61 6d 65 20 3d 20 25 75 0a 20 20 62     l_frame = %u.  b
     ca5:	79 74 65 73 5f 70 65 72 5f 70 61 6e 65 6c 5f 70     ytes_per_panel_p
     cb5:	61 74 74 65 72 6e 20 3d 20 25 75 0a 00              attern = %u..

00000cc2 <__c.5281>:
     cc2:	20 20 78 5f 6e 75 6d 20 3d 20 25 75 0a 20 20 79       x_num = %u.  y
     cd2:	5f 6e 75 6d 20 3d 20 25 75 0a 20 20 6e 75 6d 5f     _num = %u.  num_
     ce2:	70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20 67 73     panels = %u.  gs
     cf2:	5f 76 61 6c 75 65 20 3d 20 25 75 0a 20 72 6f 77     _value = %u. row
     d02:	5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20 3d 20 25     _compression = %
     d12:	75 0a 00                                            u..

00000d15 <__c.5279>:
     d15:	70 72 65 6c 6f 61 64 20 70 61 74 74 65 72 6e 20     preload pattern 
     d25:	25 75 3a 0a 00                                      %u:..

00000d2a <__c.4964>:
     d2a:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     d3a:	20 25 75 2c 20 6f 66 66 73 65 74 20 3d 20 25 6c      %u, offset = %l
     d4a:	75 0a 00                                            u..

00000d4d <__c.4962>:
     d4d:	45 72 72 6f 72 20 69 6e 20 66 5f 6c 73 65 65 6b     Error in f_lseek
     d5d:	20 69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61      in fetch_displa
     d6d:	79 5f 66 72 61 6d 65 21 0a 00                       y_frame!..

00000d77 <__c.4960>:
     d77:	52 45 53 20 3d 20 25 75 2c 20 66 5f 6e 75 6d 3d     RES = %u, f_num=
     d87:	20 25 75 2c 20 63 6e 74 3d 20 25 75 0a 00            %u, cnt= %u..

00000d95 <__c.4958>:
     d95:	45 72 72 6f 72 20 69 6e 20 66 5f 72 65 61 64 20     Error in f_read 
     da5:	69 6e 20 66 65 74 63 68 5f 64 69 73 70 6c 61 79     in fetch_display
     db5:	5f 66 72 61 6d 65 21 0a 00                          _frame!..

00000dbe <__c.4883>:
     dbe:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     dce:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     dde:	6e 2e 0a 00                                         n...

00000de2 <__c.4813>:
     de2:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     df2:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     e02:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     e12:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

00000e21 <__c.4768>:
     e21:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 69 6e     set_position: in
     e31:	64 65 78 5f 78 3d 20 25 75 2c 20 20 69 6e 64 65     dex_x= %u,  inde
     e41:	78 5f 79 3d 20 25 75 2c 20 61 6e 64 20 66 72 61     x_y= %u, and fra
     e51:	6d 65 5f 6e 75 6d 3d 20 25 75 0a 00                 me_num= %u..

00000e5d <__c.4704>:
     e5d:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     e6d:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     e7d:	2e 0a 00                                            ...

00000e80 <__c.4701>:
     e80:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     e90:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     ea0:	2e 0a 00                                            ...

00000ea3 <__c.4651>:
     ea3:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     eb3:	0a 00                                               ..

00000eb5 <__c.4564>:
     eb5:	72 65 73 6f 6c 75 74 69 6f 6e 5f 79 20 3d 20 20     resolution_y =  
     ec5:	25 64 3a 0a 00                                      %d:..

00000eca <__c.4562>:
     eca:	72 65 73 6f 6c 75 74 69 6f 6e 5f 78 20 3d 20 20     resolution_x =  
     eda:	25 64 3a 0a 00                                      %d:..

00000edf <__c.4556>:
     edf:	44 69 73 61 62 6c 65 64 20 49 6e 74 33 20 65 78     Disabled Int3 ex
     eef:	74 65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d     ternal trigger m
     eff:	6f 64 65 21 0a 00                                   ode!..

00000f05 <__c.4553>:
     f05:	45 6e 61 62 6c 65 64 20 49 6e 74 33 20 65 78 74     Enabled Int3 ext
     f15:	65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d 6f     ernal trigger mo
     f25:	64 65 20 69 73 20 6f 6e 21 0a 00                    de is on!..

00000f30 <__c.4550>:
     f30:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     f40:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     f50:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     f60:	0a 00                                               ..

00000f62 <__c.4547>:
     f62:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     f72:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     f82:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     f92:	0a 00                                               ..

00000f94 <__c.4544>:
     f94:	75 70 64 61 74 65 3a 20 25 64 20 25 64 20 25 64     update: %d %d %d
     fa4:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 3a      %d %d %d %d %d:
     fb4:	0a 00                                               ..

00000fb6 <__c.4535>:
     fb6:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     fc6:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

00000fd5 <__c.4410>:
     fd5:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     fe5:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     ff5:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00001003 <__c.4396>:
    1003:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
    1013:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
    1023:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00001031 <__c.4393>:
    1031:	3f 3f 3f 0a 00                                      ???..

00001036 <__c.4390>:
    1036:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00001043 <__c.4387>:
    1043:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
    1053:	21 0a 00                                            !..

00001056 <__c.4384>:
    1056:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

0000105f <__c.4380>:
    105f:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00001069 <__c.4377>:
    1069:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
    1079:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00001082 <__c.4375>:
    1082:	3f 3f 3f 0a 00                                      ???..

00001087 <__c.4372>:
    1087:	53 44 48 43 0a 00                                   SDHC..

0000108d <__c.4369>:
    108d:	42 4c 4b 0a 00                                      BLK..

00001092 <__c.4366>:
    1092:	53 44 43 0a 00                                      SDC..

00001097 <__c.4363>:
    1097:	53 44 32 0a 00                                      SD2..

0000109c <__c.4360>:
    109c:	53 44 0a 00                                         SD..

000010a0 <__c.4356>:
    10a0:	4d 4d 43 0a 00                                      MMC..

000010a5 <__c.4353>:
    10a5:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

000010b1 <__c.4351>:
    10b1:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
    10c1:	61 6c 69 7a 65 64 0a 00                             alized..

000010c9 <__c.4343>:
    10c9:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
    10d9:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

000010e3 <__c.4338>:
    10e3:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
    10f3:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

00001100 <__c.4333>:
    1100:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

0000110f <__c.4331>:
    110f:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
    111f:	20 57 6f 72 6b 73 0a 00                              Works..

00001127 <__c.4518>:
    1127:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
    1137:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00001142 <__c.4516>:
    1142:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
    1152:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

0000115d <__c.4510>:
    115d:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    116d:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    117d:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    118d:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

0000119e <__c.4508>:
    119e:	0a 00                                               ..

000011a0 <__c.4506>:
    11a0:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    11b0:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

000011bd <__c.4501>:
    11bd:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    11cd:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

000011da <__c.4499>:
    11da:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    11ea:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    11fa:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00001205 <__c.4497>:
    1205:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    1215:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    1225:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
    1235:	78 0a 00                                            x..

00001238 <__c.4491>:
    1238:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00001245 <__c.4489>:
    1245:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    1255:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00001263 <__c.4486>:
    1263:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1273:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1283:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1293:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
    12a3:	0a 00                                               ..

000012a5 <__c.4481>:
    12a5:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    12b5:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    12c5:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

000012d0 <__c.4479>:
    12d0:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    12e0:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    12f0:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
    1300:	78 2e 0a 00                                         x...

00001304 <__c.4473>:
    1304:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00001311 <__c.4471>:
    1311:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    1321:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

0000132f <__c.4466>:
    132f:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
    133f:	0a 00                                               ..

00001341 <__c.4464>:
    1341:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    1351:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

0000135e <__c.4588>:
    135e:	25 53 0a 00                                         %S..

00001362 <str.4574>:
    1362:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
    1372:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
    1382:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
    1392:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
    13a2:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
    13b2:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
    13c2:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
    13d2:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
    13e2:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
    13f2:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
    1402:	45 4f 55 54 00 00                                   EOUT..

00001408 <__c.4385>:
    1408:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
    1418:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00001423 <__c.4383>:
    1423:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
    1433:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

0000143e <__c.4377>:
    143e:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    144e:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    145e:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    146e:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

0000147e <__c.4375>:
    147e:	0a 00                                               ..

00001480 <__c.4373>:
    1480:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    1490:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

0000149d <__c.4368>:
    149d:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    14ad:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

000014ba <__c.4366>:
    14ba:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    14ca:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    14da:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

000014e5 <__c.4364>:
    14e5:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    14f5:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    1505:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    1515:	0a 00                                               ..

00001517 <__c.4358>:
    1517:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00001524 <__c.4356>:
    1524:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    1534:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00001541 <__c.4353>:
    1541:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1551:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1561:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1571:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00001581 <__c.4348>:
    1581:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    1591:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    15a1:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

000015ac <__c.4346>:
    15ac:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    15bc:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    15cc:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    15dc:	2e 0a 00                                            ...

000015df <__c.4340>:
    15df:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

000015ec <__c.4338>:
    15ec:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    15fc:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

0000160a <__c.4333>:
    160a:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

0000161b <__c.4331>:
    161b:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    162b:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

00001637 <__c.4281>:
    1637:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1647:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001654 <__c.4276>:
    1654:	23 00                                               #.

00001656 <__c.4246>:
    1656:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1666:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001673 <__c.4241>:
    1673:	23 00                                               #.

00001675 <__c.4220>:
    1675:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
    1685:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00001694 <__c.4215>:
    1694:	23 00                                               #.

00001696 <__c.4184>:
    1696:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    16a6:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000016b3 <__c.4179>:
    16b3:	23 00                                               #.

000016b5 <__c.4148>:
    16b5:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    16c5:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000016d2 <__c.4143>:
    16d2:	23 00                                               #.

000016d4 <__c.4121>:
    16d4:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
    16e4:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

000016f2 <__c.4116>:
    16f2:	23 00                                               #.

000016f4 <__ctors_end>:
    16f4:	11 24       	eor	r1, r1
    16f6:	1f be       	out	0x3f, r1	; 63
    16f8:	cf ef       	ldi	r28, 0xFF	; 255
    16fa:	df e3       	ldi	r29, 0x3F	; 63
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	00 e0       	ldi	r16, 0x00	; 0
    1702:	0c bf       	out	0x3c, r16	; 60
    1704:	18 be       	out	0x38, r1	; 56
    1706:	19 be       	out	0x39, r1	; 57
    1708:	1a be       	out	0x3a, r1	; 58
    170a:	1b be       	out	0x3b, r1	; 59

0000170c <__do_copy_data>:
    170c:	13 e2       	ldi	r17, 0x23	; 35
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e2       	ldi	r27, 0x20	; 32
    1712:	e2 ee       	ldi	r30, 0xE2	; 226
    1714:	fd ea       	ldi	r31, 0xAD	; 173
    1716:	00 e0       	ldi	r16, 0x00	; 0
    1718:	0b bf       	out	0x3b, r16	; 59
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <__do_copy_data+0x14>
    171c:	07 90       	elpm	r0, Z+
    171e:	0d 92       	st	X+, r0
    1720:	aa 3f       	cpi	r26, 0xFA	; 250
    1722:	b1 07       	cpc	r27, r17
    1724:	d9 f7       	brne	.-10     	; 0x171c <__do_copy_data+0x10>
    1726:	1b be       	out	0x3b, r1	; 59

00001728 <__do_clear_bss>:
    1728:	1b e2       	ldi	r17, 0x2B	; 43
    172a:	aa ef       	ldi	r26, 0xFA	; 250
    172c:	b3 e2       	ldi	r27, 0x23	; 35
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <.do_clear_bss_start>

00001730 <.do_clear_bss_loop>:
    1730:	1d 92       	st	X+, r1

00001732 <.do_clear_bss_start>:
    1732:	a9 30       	cpi	r26, 0x09	; 9
    1734:	b1 07       	cpc	r27, r17
    1736:	e1 f7       	brne	.-8      	; 0x1730 <.do_clear_bss_loop>
    1738:	0e 94 84 2a 	call	0x5508	; 0x5508 <main>
    173c:	0c 94 ef 56 	jmp	0xadde	; 0xadde <_exit>

00001740 <__bad_interrupt>:
    1740:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001744 <handle_message_length_62>:
	}
}

			
void handle_message_length_62(uint8_t *msg_buffer)
{   
    1744:	ac 01       	movw	r20, r24
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    174a:	f9 01       	movw	r30, r18
    174c:	ef 55       	subi	r30, 0x5F	; 95
    174e:	fa 4d       	sbci	r31, 0xDA	; 218
    1750:	da 01       	movw	r26, r20
    1752:	a2 0f       	add	r26, r18
    1754:	b3 1f       	adc	r27, r19
    1756:	8c 91       	ld	r24, X
    1758:	80 83       	st	Z, r24
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
			
void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    175e:	2e 33       	cpi	r18, 0x3E	; 62
    1760:	31 05       	cpc	r19, r1
    1762:	99 f7       	brne	.-26     	; 0x174a <handle_message_length_62+0x6>
	{
		laserPattern[i] = msg_buffer[i];
	}

}
    1764:	08 95       	ret

00001766 <increment_index_x>:
}


void increment_index_x(void) {
    
    index_x++;
    1766:	80 91 cd 26 	lds	r24, 0x26CD
    176a:	90 91 ce 26 	lds	r25, 0x26CE
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	80 93 cd 26 	sts	0x26CD, r24
    1774:	90 93 ce 26 	sts	0x26CE, r25
    if (index_x >= x_num)
    1778:	80 91 cd 26 	lds	r24, 0x26CD
    177c:	90 91 ce 26 	lds	r25, 0x26CE
    1780:	40 91 26 27 	lds	r20, 0x2726
    1784:	50 91 27 27 	lds	r21, 0x2727
    1788:	84 17       	cp	r24, r20
    178a:	95 07       	cpc	r25, r21
    178c:	20 f0       	brcs	.+8      	; 0x1796 <increment_index_x+0x30>
    {index_x = 0;}
    178e:	10 92 cd 26 	sts	0x26CD, r1
    1792:	10 92 ce 26 	sts	0x26CE, r1
    
    
    frame_num = index_y*x_num + index_x;
    1796:	80 91 71 28 	lds	r24, 0x2871
    179a:	90 91 72 28 	lds	r25, 0x2872
    179e:	20 91 cd 26 	lds	r18, 0x26CD
    17a2:	30 91 ce 26 	lds	r19, 0x26CE
    17a6:	bc 01       	movw	r22, r24
    17a8:	64 9f       	mul	r22, r20
    17aa:	c0 01       	movw	r24, r0
    17ac:	65 9f       	mul	r22, r21
    17ae:	90 0d       	add	r25, r0
    17b0:	74 9f       	mul	r23, r20
    17b2:	90 0d       	add	r25, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	82 0f       	add	r24, r18
    17b8:	93 1f       	adc	r25, r19
    17ba:	80 93 01 24 	sts	0x2401, r24
    17be:	90 93 02 24 	sts	0x2402, r25
	
    if (x_gt_y) display_flag++;
    17c2:	80 91 fb 23 	lds	r24, 0x23FB
    17c6:	88 23       	and	r24, r24
    17c8:	29 f0       	breq	.+10     	; 0x17d4 <increment_index_x+0x6e>
    17ca:	80 91 fa 23 	lds	r24, 0x23FA
    17ce:	8f 5f       	subi	r24, 0xFF	; 255
    17d0:	80 93 fa 23 	sts	0x23FA, r24
    17d4:	08 95       	ret

000017d6 <increment_index_y>:
}


void increment_index_y(void) {
    index_y++;
    17d6:	80 91 71 28 	lds	r24, 0x2871
    17da:	90 91 72 28 	lds	r25, 0x2872
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	80 93 71 28 	sts	0x2871, r24
    17e4:	90 93 72 28 	sts	0x2872, r25
    if (index_y >= y_num)
    17e8:	20 91 71 28 	lds	r18, 0x2871
    17ec:	30 91 72 28 	lds	r19, 0x2872
    17f0:	80 91 c5 24 	lds	r24, 0x24C5
    17f4:	90 91 c6 24 	lds	r25, 0x24C6
    17f8:	28 17       	cp	r18, r24
    17fa:	39 07       	cpc	r19, r25
    17fc:	20 f0       	brcs	.+8      	; 0x1806 <increment_index_y+0x30>
    {index_y = 0;}
    17fe:	10 92 71 28 	sts	0x2871, r1
    1802:	10 92 72 28 	sts	0x2872, r1
    
    frame_num = index_y*x_num + index_x;
    1806:	20 91 71 28 	lds	r18, 0x2871
    180a:	30 91 72 28 	lds	r19, 0x2872
    180e:	40 91 cd 26 	lds	r20, 0x26CD
    1812:	50 91 ce 26 	lds	r21, 0x26CE
    1816:	80 91 26 27 	lds	r24, 0x2726
    181a:	90 91 27 27 	lds	r25, 0x2727
    181e:	bc 01       	movw	r22, r24
    1820:	26 9f       	mul	r18, r22
    1822:	c0 01       	movw	r24, r0
    1824:	27 9f       	mul	r18, r23
    1826:	90 0d       	add	r25, r0
    1828:	36 9f       	mul	r19, r22
    182a:	90 0d       	add	r25, r0
    182c:	11 24       	eor	r1, r1
    182e:	84 0f       	add	r24, r20
    1830:	95 1f       	adc	r25, r21
    1832:	80 93 01 24 	sts	0x2401, r24
    1836:	90 93 02 24 	sts	0x2402, r25
	
    if (x_gt_y == 0) display_flag++;
    183a:	80 91 fb 23 	lds	r24, 0x23FB
    183e:	88 23       	and	r24, r24
    1840:	29 f4       	brne	.+10     	; 0x184c <increment_index_y+0x76>
    1842:	80 91 fa 23 	lds	r24, 0x23FA
    1846:	8f 5f       	subi	r24, 0xFF	; 255
    1848:	80 93 fa 23 	sts	0x23FA, r24
    184c:	08 95       	ret

0000184e <decrement_index_x>:
}


void decrement_index_x(void) {
    
    if (index_x <= 0)    //just to be safe, use less than
    184e:	80 91 cd 26 	lds	r24, 0x26CD
    1852:	90 91 ce 26 	lds	r25, 0x26CE
    1856:	89 2b       	or	r24, r25
    1858:	29 f4       	brne	.+10     	; 0x1864 <decrement_index_x+0x16>
    {index_x = x_num - 1;}    //but these are unsigned
    185a:	80 91 26 27 	lds	r24, 0x2726
    185e:	90 91 27 27 	lds	r25, 0x2727
    1862:	04 c0       	rjmp	.+8      	; 0x186c <decrement_index_x+0x1e>
    else
    {index_x--;}
    1864:	80 91 cd 26 	lds	r24, 0x26CD
    1868:	90 91 ce 26 	lds	r25, 0x26CE
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	80 93 cd 26 	sts	0x26CD, r24
    1872:	90 93 ce 26 	sts	0x26CE, r25
    
    frame_num = index_y*x_num + index_x;
    1876:	20 91 71 28 	lds	r18, 0x2871
    187a:	30 91 72 28 	lds	r19, 0x2872
    187e:	40 91 cd 26 	lds	r20, 0x26CD
    1882:	50 91 ce 26 	lds	r21, 0x26CE
    1886:	80 91 26 27 	lds	r24, 0x2726
    188a:	90 91 27 27 	lds	r25, 0x2727
    188e:	bc 01       	movw	r22, r24
    1890:	26 9f       	mul	r18, r22
    1892:	c0 01       	movw	r24, r0
    1894:	27 9f       	mul	r18, r23
    1896:	90 0d       	add	r25, r0
    1898:	36 9f       	mul	r19, r22
    189a:	90 0d       	add	r25, r0
    189c:	11 24       	eor	r1, r1
    189e:	84 0f       	add	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	80 93 01 24 	sts	0x2401, r24
    18a6:	90 93 02 24 	sts	0x2402, r25
    if (x_gt_y) display_flag++;
    18aa:	80 91 fb 23 	lds	r24, 0x23FB
    18ae:	88 23       	and	r24, r24
    18b0:	29 f0       	breq	.+10     	; 0x18bc <decrement_index_x+0x6e>
    18b2:	80 91 fa 23 	lds	r24, 0x23FA
    18b6:	8f 5f       	subi	r24, 0xFF	; 255
    18b8:	80 93 fa 23 	sts	0x23FA, r24
    18bc:	08 95       	ret

000018be <decrement_index_y>:
}


void decrement_index_y(void) {
    if (index_y <= 0)    //just to be safe, use less than
    18be:	80 91 71 28 	lds	r24, 0x2871
    18c2:	90 91 72 28 	lds	r25, 0x2872
    18c6:	89 2b       	or	r24, r25
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <decrement_index_y+0x16>
    {index_y = y_num - 1;}    //but these are unsigned
    18ca:	80 91 c5 24 	lds	r24, 0x24C5
    18ce:	90 91 c6 24 	lds	r25, 0x24C6
    18d2:	04 c0       	rjmp	.+8      	; 0x18dc <decrement_index_y+0x1e>
    else
    {index_y--;}
    18d4:	80 91 71 28 	lds	r24, 0x2871
    18d8:	90 91 72 28 	lds	r25, 0x2872
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	80 93 71 28 	sts	0x2871, r24
    18e2:	90 93 72 28 	sts	0x2872, r25
    
    frame_num = index_y*x_num + index_x;
    18e6:	20 91 71 28 	lds	r18, 0x2871
    18ea:	30 91 72 28 	lds	r19, 0x2872
    18ee:	40 91 cd 26 	lds	r20, 0x26CD
    18f2:	50 91 ce 26 	lds	r21, 0x26CE
    18f6:	80 91 26 27 	lds	r24, 0x2726
    18fa:	90 91 27 27 	lds	r25, 0x2727
    18fe:	bc 01       	movw	r22, r24
    1900:	26 9f       	mul	r18, r22
    1902:	c0 01       	movw	r24, r0
    1904:	27 9f       	mul	r18, r23
    1906:	90 0d       	add	r25, r0
    1908:	36 9f       	mul	r19, r22
    190a:	90 0d       	add	r25, r0
    190c:	11 24       	eor	r1, r1
    190e:	84 0f       	add	r24, r20
    1910:	95 1f       	adc	r25, r21
    1912:	80 93 01 24 	sts	0x2401, r24
    1916:	90 93 02 24 	sts	0x2402, r25
    if (x_gt_y == 0) display_flag++;
    191a:	80 91 fb 23 	lds	r24, 0x23FB
    191e:	88 23       	and	r24, r24
    1920:	29 f4       	brne	.+10     	; 0x192c <decrement_index_y+0x6e>
    1922:	80 91 fa 23 	lds	r24, 0x23FA
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 fa 23 	sts	0x23FA, r24
    192c:	08 95       	ret

0000192e <__vector_100>:
}

//external trigger mode for int2 to start playing pattern

ISR(PORTK_INT0_vect)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	08 b6       	in	r0, 0x38	; 56
    1938:	0f 92       	push	r0
    193a:	09 b6       	in	r0, 0x39	; 57
    193c:	0f 92       	push	r0
    193e:	0b b6       	in	r0, 0x3b	; 59
    1940:	0f 92       	push	r0
    1942:	11 24       	eor	r1, r1
    1944:	18 be       	out	0x38, r1	; 56
    1946:	19 be       	out	0x39, r1	; 57
    1948:	1b be       	out	0x3b, r1	; 59
    194a:	0f 93       	push	r16
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31

//set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
func_read_index_x = 0;
    1964:	10 92 03 24 	sts	0x2403, r1
func_read_index_y = 0;
    1968:	10 92 04 24 	sts	0x2404, r1
Stop = 0;
    196c:	10 92 9c 20 	sts	0x209C, r1
display_flag = 0;  //clear the display flag
    1970:	10 92 fa 23 	sts	0x23FA, r1
Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    1974:	8f eb       	ldi	r24, 0xBF	; 191
    1976:	9f e1       	ldi	r25, 0x1F	; 31
    1978:	4e e3       	ldi	r20, 0x3E	; 62
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	70 e0       	ldi	r23, 0x00	; 0
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	01 e0       	ldi	r16, 0x01	; 1
    1984:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    1988:	83 eb       	ldi	r24, 0xB3	; 179
    198a:	9b e0       	ldi	r25, 0x0B	; 11
    198c:	4e e3       	ldi	r20, 0x3E	; 62
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	22 e0       	ldi	r18, 0x02	; 2
    1996:	00 e0       	ldi	r16, 0x00	; 0
    1998:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    199c:	8b ee       	ldi	r24, 0xEB	; 235
    199e:	9b e0       	ldi	r25, 0x0B	; 11
    19a0:	4e e3       	ldi	r20, 0x3E	; 62
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	23 e0       	ldi	r18, 0x03	; 3
    19aa:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
													//by the Update_display interupt.
Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    19ae:	40 91 a3 20 	lds	r20, 0x20A3
    19b2:	50 91 a4 20 	lds	r21, 0x20A4
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	83 e0       	ldi	r24, 0x03	; 3
    19bc:	90 e1       	ldi	r25, 0x10	; 16
    19be:	24 e0       	ldi	r18, 0x04	; 4
    19c0:	01 e0       	ldi	r16, 0x01	; 1
    19c2:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 
    19c6:	40 91 a5 20 	lds	r20, 0x20A5
    19ca:	50 91 a6 20 	lds	r21, 0x20A6
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	83 e3       	ldi	r24, 0x33	; 51
    19d4:	9f e0       	ldi	r25, 0x0F	; 15
    19d6:	25 e0       	ldi	r18, 0x05	; 5
    19d8:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			

xputs(PSTR("INT3 catches a rising edge trigger!\n"));
    19dc:	84 e3       	ldi	r24, 0x34	; 52
    19de:	92 e0       	ldi	r25, 0x02	; 2
    19e0:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
}
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 91       	pop	r16
    19fe:	0f 90       	pop	r0
    1a00:	0b be       	out	0x3b, r0	; 59
    1a02:	0f 90       	pop	r0
    1a04:	09 be       	out	0x39, r0	; 57
    1a06:	0f 90       	pop	r0
    1a08:	08 be       	out	0x38, r0	; 56
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <set_default_func>:
}

void set_default_func(uint8_t func_channel) {
    uint16_t funcCnt;
    
    switch (func_channel) {
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	31 f0       	breq	.+12     	; 0x1a24 <set_default_func+0x10>
    1a18:	90 91 0b 24 	lds	r25, 0x240B
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <set_default_func+0xe>
    1a20:	63 c0       	rjmp	.+198    	; 0x1ae8 <set_default_func+0xd4>
    1a22:	32 c0       	rjmp	.+100    	; 0x1a88 <set_default_func+0x74>
        case 1:
            if (quiet_mode_on == 0)
    1a24:	80 91 0b 24 	lds	r24, 0x240B
    1a28:	88 23       	and	r24, r24
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <set_default_func+0x20>
                xputs(PSTR("Setting default function for X.\n"));
    1a2c:	88 ec       	ldi	r24, 0xC8	; 200
    1a2e:	99 e0       	ldi	r25, 0x09	; 9
    1a30:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
    1a34:	10 92 0c 24 	sts	0x240C, r1
    1a38:	10 92 0d 24 	sts	0x240D, r1
            funcSize_x = FUNCTION_LENGTH;
    1a3c:	84 e6       	ldi	r24, 0x64	; 100
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	a0 e0       	ldi	r26, 0x00	; 0
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	80 93 a9 20 	sts	0x20A9, r24
    1a48:	90 93 aa 20 	sts	0x20AA, r25
    1a4c:	a0 93 ab 20 	sts	0x20AB, r26
    1a50:	b0 93 ac 20 	sts	0x20AC, r27
    1a54:	e8 e2       	ldi	r30, 0x28	; 40
    1a56:	f7 e2       	ldi	r31, 0x27	; 39
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
				{ function_X[funcCnt] = 10; }
    1a58:	8a e0       	ldi	r24, 0x0A	; 10
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	81 93       	st	Z+, r24
    1a5e:	91 93       	st	Z+, r25
                xputs(PSTR("Setting default function for X.\n"));
            
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            func_ID_X = 0;
            funcSize_x = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1a60:	27 e2       	ldi	r18, 0x27	; 39
    1a62:	e0 3f       	cpi	r30, 0xF0	; 240
    1a64:	f2 07       	cpc	r31, r18
    1a66:	d1 f7       	brne	.-12     	; 0x1a5c <set_default_func+0x48>
				{ function_X[funcCnt] = 10; }
            func_read_index_x = 0;
    1a68:	10 92 03 24 	sts	0x2403, r1
			default_func_x = 1;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	80 93 a1 20 	sts	0x20A1, r24
			num_buffer_load_x = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 93 b1 20 	sts	0x20B1, r24
    1a7a:	90 93 b2 20 	sts	0x20B2, r25
			last_load_x = 0;
    1a7e:	10 92 10 24 	sts	0x2410, r1
    1a82:	10 92 11 24 	sts	0x2411, r1
    1a86:	36 c0       	rjmp	.+108    	; 0x1af4 <set_default_func+0xe0>
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);//don't need to enable ISR
            break;
        case 2:
            if (quiet_mode_on == 0)
    1a88:	99 23       	and	r25, r25
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <set_default_func+0x80>
                xputs(PSTR("Setting default function for Y.\n"));
    1a8c:	87 ea       	ldi	r24, 0xA7	; 167
    1a8e:	99 e0       	ldi	r25, 0x09	; 9
    1a90:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
    1a94:	10 92 0e 24 	sts	0x240E, r1
    1a98:	10 92 0f 24 	sts	0x240F, r1
            funcSize_y = FUNCTION_LENGTH;
    1a9c:	84 e6       	ldi	r24, 0x64	; 100
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	80 93 ad 20 	sts	0x20AD, r24
    1aa8:	90 93 ae 20 	sts	0x20AE, r25
    1aac:	a0 93 af 20 	sts	0x20AF, r26
    1ab0:	b0 93 b0 20 	sts	0x20B0, r27
    1ab4:	e8 ec       	ldi	r30, 0xC8	; 200
    1ab6:	f4 e2       	ldi	r31, 0x24	; 36
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
            { function_Y[funcCnt] = 10; }
    1ab8:	8a e0       	ldi	r24, 0x0A	; 10
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	81 93       	st	Z+, r24
    1abe:	91 93       	st	Z+, r25
            if (quiet_mode_on == 0)
                xputs(PSTR("Setting default function for Y.\n"));
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0);//disable ISR
            func_ID_Y = 0;
            funcSize_y = FUNCTION_LENGTH;
            for (funcCnt = 0; funcCnt < FUNCTION_LENGTH; funcCnt++)
    1ac0:	25 e2       	ldi	r18, 0x25	; 37
    1ac2:	e0 39       	cpi	r30, 0x90	; 144
    1ac4:	f2 07       	cpc	r31, r18
    1ac6:	d1 f7       	brne	.-12     	; 0x1abc <set_default_func+0xa8>
            { function_Y[funcCnt] = 10; }
			func_read_index_y = 0;
    1ac8:	10 92 04 24 	sts	0x2404, r1
			default_func_y = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	80 93 a2 20 	sts	0x20A2, r24
			num_buffer_load_y = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	80 93 b3 20 	sts	0x20B3, r24
    1ada:	90 93 b4 20 	sts	0x20B4, r25
			last_load_y = 0;
    1ade:	10 92 12 24 	sts	0x2412, r1
    1ae2:	10 92 13 24 	sts	0x2413, r1
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <set_default_func+0xe0>
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//don't need to enable ISR
            break;
        default:
            if (quiet_mode_on == 0)
    1ae8:	99 23       	and	r25, r25
    1aea:	21 f4       	brne	.+8      	; 0x1af4 <set_default_func+0xe0>
                xputs(PSTR("Wrong function channel number.\n"));
    1aec:	87 e8       	ldi	r24, 0x87	; 135
    1aee:	99 e0       	ldi	r25, 0x09	; 9
    1af0:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    }
	func_is_in_EEPROM = false;
    1af4:	10 92 ff 23 	sts	0x23FF, r1
    
}
    1af8:	08 95       	ret

00001afa <handle_message_length_63>:
//load laser trigger pattern second 63 byte data. Laer patter has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_63(uint8_t *msg_buffer)
{   
    1afa:	ac 01       	movw	r20, r24
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	
	 for (i = 0; i<63; i++)
	{
	laserPattern[62 + i] = msg_buffer[i];
    1b00:	f9 01       	movw	r30, r18
    1b02:	ef 55       	subi	r30, 0x5F	; 95
    1b04:	fa 4d       	sbci	r31, 0xDA	; 218
    1b06:	da 01       	movw	r26, r20
    1b08:	a2 0f       	add	r26, r18
    1b0a:	b3 1f       	adc	r27, r19
    1b0c:	8c 91       	ld	r24, X
    1b0e:	86 af       	std	Z+62, r24	; 0x3e
    1b10:	2f 5f       	subi	r18, 0xFF	; 255
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255

void handle_message_length_63(uint8_t *msg_buffer)
{   
	uint8_t i;
	
	 for (i = 0; i<63; i++)
    1b14:	2f 33       	cpi	r18, 0x3F	; 63
    1b16:	31 05       	cpc	r19, r1
    1b18:	99 f7       	brne	.-26     	; 0x1b00 <handle_message_length_63+0x6>
	{
	laserPattern[62 + i] = msg_buffer[i];
	}
	
	if (quiet_mode_on == 0)
    1b1a:	80 91 0b 24 	lds	r24, 0x240B
    1b1e:	88 23       	and	r24, r24
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <handle_message_length_63+0x30>
        xputs(PSTR("Success set the new laser pattern.\n"));
    1b22:	8e eb       	ldi	r24, 0xBE	; 190
    1b24:	9d e0       	ldi	r25, 0x0D	; 13
    1b26:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    1b2a:	08 95       	ret

00001b2c <dump_mat>:
		}
	}
} 

//synchronize the SD.mat from SD card to PC
void dump_mat(void) {
    1b2c:	a4 e3       	ldi	r26, 0x34	; 52
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ec e9       	ldi	r30, 0x9C	; 156
    1b32:	fd e0       	ldi	r31, 0x0D	; 13
    1b34:	0c 94 8f 51 	jmp	0xa31e	; 0xa31e <__prologue_saves__+0x2>
    uint8_t res;
    uint16_t cnt;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    1b38:	8c e0       	ldi	r24, 0x0C	; 12
    1b3a:	97 e2       	ldi	r25, 0x27	; 39
    1b3c:	65 eb       	ldi	r22, 0xB5	; 181
    1b3e:	70 e2       	ldi	r23, 0x20	; 32
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
    if (res == FR_OK) {
    1b46:	88 23       	and	r24, r24
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <dump_mat+0x20>
    1b4a:	b5 c0       	rjmp	.+362    	; 0x1cb6 <dump_mat+0x18a>
        // looks good
        iteration = file4.fsize/50;
    1b4c:	80 90 16 27 	lds	r8, 0x2716
    1b50:	70 91 17 27 	lds	r23, 0x2717
    1b54:	68 2d       	mov	r22, r8
    1b56:	80 91 18 27 	lds	r24, 0x2718
    1b5a:	90 91 19 27 	lds	r25, 0x2719
    1b5e:	22 e3       	ldi	r18, 0x32	; 50
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    1b6a:	79 01       	movw	r14, r18
    1b6c:	8a 01       	movw	r16, r20
    1b6e:	99 24       	eor	r9, r9
    1b70:	93 94       	inc	r9
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    1b72:	22 e3       	ldi	r18, 0x32	; 50
    1b74:	32 2e       	mov	r3, r18
            
            res = f_lseek(&file4, offset);
            if ((res == FR_OK) && (file4.fptr == offset)) {
                res = f_read(&file4, matBuff, 50, &cnt);
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	69 2e       	mov	r6, r25
    1b7a:	71 2c       	mov	r7, r1
    1b7c:	6c 0e       	add	r6, r28
    1b7e:	7d 1e       	adc	r7, r29
    1b80:	2e 01       	movw	r4, r28
    1b82:	08 94       	sec
    1b84:	41 1c       	adc	r4, r1
    1b86:	51 1c       	adc	r5, r1
    1b88:	3a c0       	rjmp	.+116    	; 0x1bfe <dump_mat+0xd2>
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
            offset = (b1 -1)*50;
    1b8a:	93 9c       	mul	r9, r3
    1b8c:	c0 01       	movw	r24, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	c2 97       	sbiw	r24, 0x32	; 50
    1b92:	5c 01       	movw	r10, r24
    1b94:	cc 24       	eor	r12, r12
    1b96:	b7 fc       	sbrc	r11, 7
    1b98:	c0 94       	com	r12
    1b9a:	dc 2c       	mov	r13, r12
            
            res = f_lseek(&file4, offset);
    1b9c:	8c e0       	ldi	r24, 0x0C	; 12
    1b9e:	97 e2       	ldi	r25, 0x27	; 39
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	a5 01       	movw	r20, r10
    1ba4:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
            if ((res == FR_OK) && (file4.fptr == offset)) {
    1ba8:	88 23       	and	r24, r24
    1baa:	01 f5       	brne	.+64     	; 0x1bec <dump_mat+0xc0>
    1bac:	80 91 12 27 	lds	r24, 0x2712
    1bb0:	90 91 13 27 	lds	r25, 0x2713
    1bb4:	a0 91 14 27 	lds	r26, 0x2714
    1bb8:	b0 91 15 27 	lds	r27, 0x2715
    1bbc:	8a 15       	cp	r24, r10
    1bbe:	9b 05       	cpc	r25, r11
    1bc0:	ac 05       	cpc	r26, r12
    1bc2:	bd 05       	cpc	r27, r13
    1bc4:	99 f4       	brne	.+38     	; 0x1bec <dump_mat+0xc0>
                res = f_read(&file4, matBuff, 50, &cnt);
    1bc6:	8c e0       	ldi	r24, 0x0C	; 12
    1bc8:	97 e2       	ldi	r25, 0x27	; 39
    1bca:	b3 01       	movw	r22, r6
    1bcc:	42 e3       	ldi	r20, 0x32	; 50
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	92 01       	movw	r18, r4
    1bd2:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                if ((res == FR_OK) && (cnt == 50)) {
    1bd6:	88 23       	and	r24, r24
    1bd8:	89 f4       	brne	.+34     	; 0x1bfc <dump_mat+0xd0>
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	c2 97       	sbiw	r24, 0x32	; 50
    1be0:	69 f4       	brne	.+26     	; 0x1bfc <dump_mat+0xd0>
                    send_Tx_buffer(matBuff, 50);
    1be2:	c3 01       	movw	r24, r6
    1be4:	62 e3       	ldi	r22, 0x32	; 50
    1be6:	0e 94 48 3b 	call	0x7690	; 0x7690 <send_Tx_buffer>
    1bea:	08 c0       	rjmp	.+16     	; 0x1bfc <dump_mat+0xd0>
                }
            }else {
                if (quiet_mode_on == 0)
    1bec:	80 91 0b 24 	lds	r24, 0x240B
    1bf0:	88 23       	and	r24, r24
    1bf2:	21 f4       	brne	.+8      	; 0x1bfc <dump_mat+0xd0>
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    1bf4:	87 e9       	ldi	r24, 0x97	; 151
    1bf6:	92 e0       	ldi	r25, 0x02	; 2
    1bf8:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), file4.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++){
    1bfc:	93 94       	inc	r9
    1bfe:	89 2d       	mov	r24, r9
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e0       	ldi	r26, 0x00	; 0
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e8 16       	cp	r14, r24
    1c08:	f9 06       	cpc	r15, r25
    1c0a:	0a 07       	cpc	r16, r26
    1c0c:	1b 07       	cpc	r17, r27
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <dump_mat+0xe6>
    1c10:	bc cf       	rjmp	.-136    	; 0x1b8a <dump_mat+0x5e>
                if (quiet_mode_on == 0)
                    xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
            }
        }
        //send the remained data
        offset = (b1-1)*50;
    1c12:	82 e3       	ldi	r24, 0x32	; 50
    1c14:	98 9e       	mul	r9, r24
    1c16:	c0 01       	movw	r24, r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	c2 97       	sbiw	r24, 0x32	; 50
    1c1c:	5c 01       	movw	r10, r24
    1c1e:	cc 24       	eor	r12, r12
    1c20:	b7 fc       	sbrc	r11, 7
    1c22:	c0 94       	com	r12
    1c24:	dc 2c       	mov	r13, r12
        res=f_lseek(&file4, offset);
    1c26:	8c e0       	ldi	r24, 0x0C	; 12
    1c28:	97 e2       	ldi	r25, 0x27	; 39
    1c2a:	b6 01       	movw	r22, r12
    1c2c:	a5 01       	movw	r20, r10
    1c2e:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
        if ((res == FR_OK) && (file4.fptr == offset)) {
    1c32:	88 23       	and	r24, r24
    1c34:	99 f5       	brne	.+102    	; 0x1c9c <dump_mat+0x170>
    1c36:	80 91 12 27 	lds	r24, 0x2712
    1c3a:	90 91 13 27 	lds	r25, 0x2713
    1c3e:	a0 91 14 27 	lds	r26, 0x2714
    1c42:	b0 91 15 27 	lds	r27, 0x2715
    1c46:	8a 15       	cp	r24, r10
    1c48:	9b 05       	cpc	r25, r11
    1c4a:	ac 05       	cpc	r26, r12
    1c4c:	bd 05       	cpc	r27, r13
    1c4e:	31 f5       	brne	.+76     	; 0x1c9c <dump_mat+0x170>
    // try to read in the SD.mat filfil
    res = f_open(&file4, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (res == FR_OK) {
        // looks good
        iteration = file4.fsize/50;
        fileRemain = (uint8_t)(file4.fsize - iteration*50);
    1c50:	c8 01       	movw	r24, r16
    1c52:	b7 01       	movw	r22, r14
    1c54:	22 e3       	ldi	r18, 0x32	; 50
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    1c60:	d8 2c       	mov	r13, r8
    1c62:	d6 1a       	sub	r13, r22
        }
        //send the remained data
        offset = (b1-1)*50;
        res=f_lseek(&file4, offset);
        if ((res == FR_OK) && (file4.fptr == offset)) {
            res = f_read(&file4, matBuff, fileRemain, &cnt);
    1c64:	0d 2d       	mov	r16, r13
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	83 e0       	ldi	r24, 0x03	; 3
    1c6a:	e8 2e       	mov	r14, r24
    1c6c:	f1 2c       	mov	r15, r1
    1c6e:	ec 0e       	add	r14, r28
    1c70:	fd 1e       	adc	r15, r29
    1c72:	8c e0       	ldi	r24, 0x0C	; 12
    1c74:	97 e2       	ldi	r25, 0x27	; 39
    1c76:	b7 01       	movw	r22, r14
    1c78:	a8 01       	movw	r20, r16
    1c7a:	9e 01       	movw	r18, r28
    1c7c:	2f 5f       	subi	r18, 0xFF	; 255
    1c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c80:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
            if ((res == FR_OK) && (cnt == fileRemain)) {
    1c84:	88 23       	and	r24, r24
    1c86:	91 f4       	brne	.+36     	; 0x1cac <dump_mat+0x180>
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	80 17       	cp	r24, r16
    1c8e:	91 07       	cpc	r25, r17
    1c90:	69 f4       	brne	.+26     	; 0x1cac <dump_mat+0x180>
                send_Tx_buffer(matBuff, fileRemain);
    1c92:	c7 01       	movw	r24, r14
    1c94:	6d 2d       	mov	r22, r13
    1c96:	0e 94 48 3b 	call	0x7690	; 0x7690 <send_Tx_buffer>
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <dump_mat+0x180>
            }
        }else {
            if (quiet_mode_on == 0)
    1c9c:	80 91 0b 24 	lds	r24, 0x240B
    1ca0:	88 23       	and	r24, r24
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <dump_mat+0x180>
                xputs(PSTR("Error f_lseek in remained data.\n"));
    1ca4:	86 e7       	ldi	r24, 0x76	; 118
    1ca6:	92 e0       	ldi	r25, 0x02	; 2
    1ca8:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
        }
        
        f_close(&file4);
    1cac:	8c e0       	ldi	r24, 0x0C	; 12
    1cae:	97 e2       	ldi	r25, 0x27	; 39
    1cb0:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <dump_mat+0x19a>
    } else {
        if (quiet_mode_on == 0)
    1cb6:	80 91 0b 24 	lds	r24, 0x240B
    1cba:	88 23       	and	r24, r24
    1cbc:	21 f4       	brne	.+8      	; 0x1cc6 <dump_mat+0x19a>
            xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (res == FR_OK)
    1cbe:	89 e5       	ldi	r24, 0x59	; 89
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
    1cc2:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    }
    
}
    1cc6:	e4 96       	adiw	r28, 0x34	; 52
    1cc8:	e1 e1       	ldi	r30, 0x11	; 17
    1cca:	0c 94 ab 51 	jmp	0xa356	; 0xa356 <__epilogue_restores__+0x2>

00001cce <fetch_update_funcY>:
			break;
		
    }
}

void fetch_update_funcY(uint8_t fReset, uint8_t num_of_load_y) {
    1cce:	a6 e6       	ldi	r26, 0x66	; 102
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ed e6       	ldi	r30, 0x6D	; 109
    1cd4:	fe e0       	ldi	r31, 0x0E	; 14
    1cd6:	0c 94 99 51 	jmp	0xa332	; 0xa332 <__prologue_saves__+0x16>
    1cda:	98 2f       	mov	r25, r24
    1cdc:	d6 2e       	mov	r13, r22
	uint8_t res;
	//uint8_t funcXBuff[2*FUNCTION_LENGTH];
	uint8_t tempBuff[FUNCTION_LENGTH];
    uint16_t loadYBufferSize;
    //xprintf(PSTR("num_of_load_y =  %u\n"), num_of_load_y);		
	if (func_buffer_size_y >= BUFFER_LENGTH/2){
    1cde:	80 91 08 24 	lds	r24, 0x2408
    1ce2:	84 36       	cpi	r24, 0x64	; 100
    1ce4:	18 f0       	brcs	.+6      	; 0x1cec <fetch_update_funcY+0x1e>
		xputs(PSTR("Ring buffer function_Y is full\n"));
    1ce6:	8d e1       	ldi	r24, 0x1D	; 29
    1ce8:	93 e0       	ldi	r25, 0x03	; 3
    1cea:	b6 c0       	rjmp	.+364    	; 0x1e58 <fetch_update_funcY+0x18a>
		return;
		}
		
	if (fReset == 1){
    1cec:	91 30       	cpi	r25, 0x01	; 1
    1cee:	31 f4       	brne	.+12     	; 0x1cfc <fetch_update_funcY+0x2e>
        func_buffer_size_y = 0;
    1cf0:	10 92 08 24 	sts	0x2408, r1
		func_read_index_y = 0;
    1cf4:	10 92 04 24 	sts	0x2404, r1
		func_write_index_y = 0;        
    1cf8:	10 92 06 24 	sts	0x2406, r1
	}
	
	offset = 512 + num_of_load_y * FUNCTION_LENGTH;
            
	res = f_lseek(&file3, offset);
    1cfc:	84 e6       	ldi	r24, 0x64	; 100
    1cfe:	d8 9e       	mul	r13, r24
    1d00:	c0 01       	movw	r24, r0
    1d02:	11 24       	eor	r1, r1
    1d04:	80 50       	subi	r24, 0x00	; 0
    1d06:	9e 4f       	sbci	r25, 0xFE	; 254
    1d08:	7c 01       	movw	r14, r24
    1d0a:	00 e0       	ldi	r16, 0x00	; 0
    1d0c:	10 e0       	ldi	r17, 0x00	; 0
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
    1d10:	96 e2       	ldi	r25, 0x26	; 38
    1d12:	b8 01       	movw	r22, r16
    1d14:	a7 01       	movw	r20, r14
    1d16:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
    1d1a:	28 2f       	mov	r18, r24
	if ((res == FR_OK) && (file3.fptr == offset)) {
    1d1c:	88 23       	and	r24, r24
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <fetch_update_funcY+0x54>
    1d20:	80 c0       	rjmp	.+256    	; 0x1e22 <fetch_update_funcY+0x154>
    1d22:	80 91 26 26 	lds	r24, 0x2626
    1d26:	90 91 27 26 	lds	r25, 0x2627
    1d2a:	a0 91 28 26 	lds	r26, 0x2628
    1d2e:	b0 91 29 26 	lds	r27, 0x2629
    1d32:	8e 15       	cp	r24, r14
    1d34:	9f 05       	cpc	r25, r15
    1d36:	a0 07       	cpc	r26, r16
    1d38:	b1 07       	cpc	r27, r17
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <fetch_update_funcY+0x70>
    1d3c:	72 c0       	rjmp	.+228    	; 0x1e22 <fetch_update_funcY+0x154>
		
		if ((num_of_load_y ==  num_buffer_load_y - 1) && (last_load_y != 0))
    1d3e:	2d 2d       	mov	r18, r13
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	80 91 b3 20 	lds	r24, 0x20B3
    1d46:	90 91 b4 20 	lds	r25, 0x20B4
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	28 17       	cp	r18, r24
    1d4e:	39 07       	cpc	r19, r25
    1d50:	39 f4       	brne	.+14     	; 0x1d60 <fetch_update_funcY+0x92>
    1d52:	00 91 12 24 	lds	r16, 0x2412
    1d56:	10 91 13 24 	lds	r17, 0x2413
    1d5a:	01 15       	cp	r16, r1
    1d5c:	11 05       	cpc	r17, r1
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <fetch_update_funcY+0x96>
    1d60:	04 e6       	ldi	r16, 0x64	; 100
    1d62:	10 e0       	ldi	r17, 0x00	; 0
			loadYBufferSize = last_load_y;
		else 
			loadYBufferSize = FUNCTION_LENGTH;
		
		//load 100 bytes data to temBuff
		res = f_read(&file3, tempBuff, loadYBufferSize, &cnt);
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	96 e2       	ldi	r25, 0x26	; 38
    1d68:	be 01       	movw	r22, r28
    1d6a:	6d 5f       	subi	r22, 0xFD	; 253
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	a8 01       	movw	r20, r16
    1d70:	9e 01       	movw	r18, r28
    1d72:	2f 5f       	subi	r18, 0xFF	; 255
    1d74:	3f 4f       	sbci	r19, 0xFF	; 255
    1d76:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    1d7a:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadYBufferSize))) {
    1d7c:	88 23       	and	r24, r24
    1d7e:	29 f4       	brne	.+10     	; 0x1d8a <fetch_update_funcY+0xbc>
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	80 17       	cp	r24, r16
    1d86:	91 07       	cpc	r25, r17
    1d88:	e9 f0       	breq	.+58     	; 0x1dc4 <fetch_update_funcY+0xf6>
		
			if (quiet_mode_on == 0){
    1d8a:	80 91 0b 24 	lds	r24, 0x240B
    1d8e:	88 23       	and	r24, r24
    1d90:	c9 f4       	brne	.+50     	; 0x1dc4 <fetch_update_funcY+0xf6>
				xprintf(PSTR("res =  %u\n"), res);
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <fetch_update_funcY+0xc6>
    1d94:	0f 92       	push	r0
    1d96:	ed b7       	in	r30, 0x3d	; 61
    1d98:	fe b7       	in	r31, 0x3e	; 62
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	82 e1       	ldi	r24, 0x12	; 18
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	ad b7       	in	r26, 0x3d	; 61
    1da2:	be b7       	in	r27, 0x3e	; 62
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	8d 93       	st	X+, r24
    1da8:	9c 93       	st	X, r25
    1daa:	12 97       	sbiw	r26, 0x02	; 2
    1dac:	22 83       	std	Z+2, r18	; 0x02
    1dae:	13 82       	std	Z+3, r1	; 0x03
    1db0:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xputs(PSTR("Error in f_read in in fetch_update_funcY\n"));
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	88 ee       	ldi	r24, 0xE8	; 232
    1dbe:	92 e0       	ldi	r25, 0x02	; 2
    1dc0:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
			}
		}
		
		for (j = 0; j< cnt; j+=2){
    1dc4:	69 81       	ldd	r22, Y+1	; 0x01
    1dc6:	7a 81       	ldd	r23, Y+2	; 0x02
    1dc8:	de 01       	movw	r26, r28
    1dca:	13 96       	adiw	r26, 0x03	; 3
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	24 c0       	rjmp	.+72     	; 0x1e1a <fetch_update_funcY+0x14c>
			function_Y[func_write_index_y] = (uint16_t)tempBuff[j] + tempBuff[j+1]*256; 
    1dd2:	e0 91 06 24 	lds	r30, 0x2406
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	e8 53       	subi	r30, 0x38	; 56
    1dde:	fb 4d       	sbci	r31, 0xDB	; 219
    1de0:	11 96       	adiw	r26, 0x01	; 1
    1de2:	3c 91       	ld	r19, X
    1de4:	11 97       	sbiw	r26, 0x01	; 1
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	8c 91       	ld	r24, X
    1dea:	89 01       	movw	r16, r18
    1dec:	08 0f       	add	r16, r24
    1dee:	11 1d       	adc	r17, r1
    1df0:	00 83       	st	Z, r16
    1df2:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_y++; 
    1df4:	80 91 06 24 	lds	r24, 0x2406
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	80 93 06 24 	sts	0x2406, r24
			if (func_write_index_y >= BUFFER_LENGTH/2)
    1dfe:	80 91 06 24 	lds	r24, 0x2406
    1e02:	84 36       	cpi	r24, 0x64	; 100
    1e04:	10 f0       	brcs	.+4      	; 0x1e0a <fetch_update_funcY+0x13c>
				func_write_index_y = 0;
    1e06:	10 92 06 24 	sts	0x2406, r1
			func_buffer_size_y++;  //atomic operation
    1e0a:	80 91 08 24 	lds	r24, 0x2408
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	80 93 08 24 	sts	0x2408, r24
				xprintf(PSTR("res =  %u\n"), res);
				xputs(PSTR("Error in f_read in in fetch_update_funcY\n"));
			}
		}
		
		for (j = 0; j< cnt; j+=2){
    1e14:	4e 5f       	subi	r20, 0xFE	; 254
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	12 96       	adiw	r26, 0x02	; 2
    1e1a:	46 17       	cp	r20, r22
    1e1c:	57 07       	cpc	r21, r23
    1e1e:	c8 f2       	brcs	.-78     	; 0x1dd2 <fetch_update_funcY+0x104>
    1e20:	1d c0       	rjmp	.+58     	; 0x1e5c <fetch_update_funcY+0x18e>
				func_write_index_y = 0;
			func_buffer_size_y++;  //atomic operation
		}
//xprintf(PSTR("func_write_index_y =  %u\n"), func_write_index_y);			
	} else {
		if (quiet_mode_on == 0){
    1e22:	80 91 0b 24 	lds	r24, 0x240B
    1e26:	88 23       	and	r24, r24
    1e28:	c9 f4       	brne	.+50     	; 0x1e5c <fetch_update_funcY+0x18e>
			xprintf(PSTR("res =  %u\n"), res);
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <fetch_update_funcY+0x15e>
    1e2c:	0f 92       	push	r0
    1e2e:	ed b7       	in	r30, 0x3d	; 61
    1e30:	fe b7       	in	r31, 0x3e	; 62
    1e32:	31 96       	adiw	r30, 0x01	; 1
    1e34:	8d ed       	ldi	r24, 0xDD	; 221
    1e36:	92 e0       	ldi	r25, 0x02	; 2
    1e38:	ad b7       	in	r26, 0x3d	; 61
    1e3a:	be b7       	in	r27, 0x3e	; 62
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	8d 93       	st	X+, r24
    1e40:	9c 93       	st	X, r25
    1e42:	12 97       	sbiw	r26, 0x02	; 2
    1e44:	22 83       	std	Z+2, r18	; 0x02
    1e46:	13 82       	std	Z+3, r1	; 0x03
    1e48:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
			xputs(PSTR("Error in f_lseek in fetch_update_funcY\n"));
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	85 eb       	ldi	r24, 0xB5	; 181
    1e56:	92 e0       	ldi	r25, 0x02	; 2
    1e58:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
		}
	}
} 
    1e5c:	ca 59       	subi	r28, 0x9A	; 154
    1e5e:	df 4f       	sbci	r29, 0xFF	; 255
    1e60:	e7 e0       	ldi	r30, 0x07	; 7
    1e62:	0c 94 b5 51 	jmp	0xa36a	; 0xa36a <__epilogue_restores__+0x16>

00001e66 <update_funcCnt_y>:
digitalWrite(0,LOW); 	
	}

}

void update_funcCnt_y(void) {
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e9 e3       	ldi	r30, 0x39	; 57
    1e6c:	ff e0       	ldi	r31, 0x0F	; 15
    1e6e:	0c 94 92 51 	jmp	0xa324	; 0xa324 <__prologue_saves__+0x8>
    int16_t temp_ADC_val;
	int32_t temp_index_y;
	uint16_t Y_ADC2;

	
	if (!func_buffer_size_y){
    1e72:	80 91 08 24 	lds	r24, 0x2408
    1e76:	88 23       	and	r24, r24
    1e78:	29 f4       	brne	.+10     	; 0x1e84 <update_funcCnt_y+0x1e>
		xputs(PSTR("Ring buffer function_Y is empty\n"));
    1e7a:	8d e3       	ldi	r24, 0x3D	; 61
    1e7c:	93 e0       	ldi	r25, 0x03	; 3
    1e7e:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    1e82:	bc c0       	rjmp	.+376    	; 0x1ffc <update_funcCnt_y+0x196>
		return;
		}
	
    func_read_index_y++; 
    1e84:	80 91 04 24 	lds	r24, 0x2404
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 04 24 	sts	0x2404, r24
	if (func_read_index_y >= BUFFER_LENGTH/2)
    1e8e:	80 91 04 24 	lds	r24, 0x2404
    1e92:	84 36       	cpi	r24, 0x64	; 100
    1e94:	10 f0       	brcs	.+4      	; 0x1e9a <update_funcCnt_y+0x34>
		func_read_index_y = 0;
    1e96:	10 92 04 24 	sts	0x2404, r1
	func_buffer_size_y--;
    1e9a:	80 91 08 24 	lds	r24, 0x2408
    1e9e:	81 50       	subi	r24, 0x01	; 1
    1ea0:	80 93 08 24 	sts	0x2408, r24
    
	switch(y_mode){
    1ea4:	80 91 09 27 	lds	r24, 0x2709
    1ea8:	84 30       	cpi	r24, 0x04	; 4
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <update_funcCnt_y+0x48>
    1eac:	48 c0       	rjmp	.+144    	; 0x1f3e <update_funcCnt_y+0xd8>
    1eae:	85 30       	cpi	r24, 0x05	; 5
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <update_funcCnt_y+0x4e>
    1eb2:	90 c0       	rjmp	.+288    	; 0x1fd4 <update_funcCnt_y+0x16e>
    1eb4:	83 30       	cpi	r24, 0x03	; 3
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <update_funcCnt_y+0x54>
    1eb8:	a1 c0       	rjmp	.+322    	; 0x1ffc <update_funcCnt_y+0x196>
	    case 3: // POS mode, use CH3 to set the frame position (pos ctrl, not vel ctrl)
            Y_ADC2 = analogRead(3);   //Y_ADC2 ranges from 0-4095 when input 0-10V
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
			
			if (Y_ADC2>resolution_y) {Y_ADC2 = resolution_y;}
    1ec0:	40 91 9f 20 	lds	r20, 0x209F
    1ec4:	50 91 a0 20 	lds	r21, 0x20A0
			
			//calculate the index_x                                               
			temp_index_y = ((int32_t)Y_ADC2 * y_num * 2 + resolution_y) / ((int32_t) resolution_y * 2) - 1;
    1ec8:	c0 91 c5 24 	lds	r28, 0x24C5
    1ecc:	d0 91 c6 24 	lds	r29, 0x24C6
    1ed0:	3e 01       	movw	r6, r28
    1ed2:	88 24       	eor	r8, r8
    1ed4:	99 24       	eor	r9, r9
    1ed6:	7a 01       	movw	r14, r20
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	64 01       	movw	r12, r8
    1ede:	53 01       	movw	r10, r6
    1ee0:	aa 0c       	add	r10, r10
    1ee2:	bb 1c       	adc	r11, r11
    1ee4:	cc 1c       	adc	r12, r12
    1ee6:	dd 1c       	adc	r13, r13
    1ee8:	48 17       	cp	r20, r24
    1eea:	59 07       	cpc	r21, r25
    1eec:	08 f4       	brcc	.+2      	; 0x1ef0 <update_funcCnt_y+0x8a>
    1eee:	ca 01       	movw	r24, r20
    1ef0:	9c 01       	movw	r18, r24
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	c6 01       	movw	r24, r12
    1ef8:	b5 01       	movw	r22, r10
    1efa:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    1efe:	6e 0d       	add	r22, r14
    1f00:	7f 1d       	adc	r23, r15
    1f02:	80 1f       	adc	r24, r16
    1f04:	91 1f       	adc	r25, r17
    1f06:	ee 0c       	add	r14, r14
    1f08:	ff 1c       	adc	r15, r15
    1f0a:	00 1f       	adc	r16, r16
    1f0c:	11 1f       	adc	r17, r17
    1f0e:	a8 01       	movw	r20, r16
    1f10:	97 01       	movw	r18, r14
    1f12:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__divmodsi4>
    1f16:	21 50       	subi	r18, 0x01	; 1
    1f18:	30 40       	sbci	r19, 0x00	; 0
    1f1a:	40 40       	sbci	r20, 0x00	; 0
    1f1c:	50 40       	sbci	r21, 0x00	; 0
			
            if (temp_index_y >= y_num)  {temp_index_y = y_num - 1;} //check if too big
    1f1e:	26 15       	cp	r18, r6
    1f20:	37 05       	cpc	r19, r7
    1f22:	48 05       	cpc	r20, r8
    1f24:	59 05       	cpc	r21, r9
    1f26:	24 f0       	brlt	.+8      	; 0x1f30 <update_funcCnt_y+0xca>
    1f28:	21 97       	sbiw	r28, 0x01	; 1
    1f2a:	9e 01       	movw	r18, r28
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
            if (temp_index_y <= 0)  {temp_index_y = 0;} //or too small
			index_y = temp_index_y;
    1f30:	57 ff       	sbrs	r21, 7
    1f32:	20 c0       	rjmp	.+64     	; 0x1f74 <update_funcCnt_y+0x10e>
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	1b c0       	rjmp	.+54     	; 0x1f74 <update_funcCnt_y+0x10e>
            frame_num = index_y*x_num + index_x;
            break;
			
        case 4:
            //only use temp_ADC_val as a temp variable, just not to create an additional one
            temp_ADC_val = (Y_pos_index + function_Y[func_read_index_y]);
    1f3e:	e0 91 04 24 	lds	r30, 0x2404
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	e8 53       	subi	r30, 0x38	; 56
    1f4a:	fb 4d       	sbci	r31, 0xDB	; 219
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	f0 81       	ld	r31, Z
    1f50:	e0 2d       	mov	r30, r0
    1f52:	80 91 90 25 	lds	r24, 0x2590
    1f56:	90 91 91 25 	lds	r25, 0x2591
    1f5a:	e8 0f       	add	r30, r24
    1f5c:	f9 1f       	adc	r31, r25
    1f5e:	20 91 c5 24 	lds	r18, 0x24C5
    1f62:	30 91 c6 24 	lds	r19, 0x24C6
            if (temp_ADC_val >= 0) {index_y = temp_ADC_val%y_num; }
    1f66:	f7 fd       	sbrc	r31, 7
    1f68:	0a c0       	rjmp	.+20     	; 0x1f7e <update_funcCnt_y+0x118>
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    1f72:	9c 01       	movw	r18, r24
    1f74:	20 93 71 28 	sts	0x2871, r18
    1f78:	30 93 72 28 	sts	0x2872, r19
    1f7c:	10 c0       	rjmp	.+32     	; 0x1f9e <update_funcCnt_y+0x138>
            if (temp_ADC_val < 0) {index_y = y_num - ((abs(temp_ADC_val))%y_num) - 1;  } //index_y should always smaller than y_num
    1f7e:	88 27       	eor	r24, r24
    1f80:	99 27       	eor	r25, r25
    1f82:	8e 1b       	sub	r24, r30
    1f84:	9f 0b       	sbc	r25, r31
    1f86:	b9 01       	movw	r22, r18
    1f88:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    1f8c:	21 50       	subi	r18, 0x01	; 1
    1f8e:	30 40       	sbci	r19, 0x00	; 0
    1f90:	a9 01       	movw	r20, r18
    1f92:	48 1b       	sub	r20, r24
    1f94:	59 0b       	sbc	r21, r25
    1f96:	40 93 71 28 	sts	0x2871, r20
    1f9a:	50 93 72 28 	sts	0x2872, r21
            frame_num = index_y*x_num + index_x;
    1f9e:	20 91 71 28 	lds	r18, 0x2871
    1fa2:	30 91 72 28 	lds	r19, 0x2872
    1fa6:	40 91 cd 26 	lds	r20, 0x26CD
    1faa:	50 91 ce 26 	lds	r21, 0x26CE
    1fae:	80 91 26 27 	lds	r24, 0x2726
    1fb2:	90 91 27 27 	lds	r25, 0x2727
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	26 9f       	mul	r18, r22
    1fba:	c0 01       	movw	r24, r0
    1fbc:	27 9f       	mul	r18, r23
    1fbe:	90 0d       	add	r25, r0
    1fc0:	36 9f       	mul	r19, r22
    1fc2:	90 0d       	add	r25, r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	84 0f       	add	r24, r20
    1fc8:	95 1f       	adc	r25, r21
    1fca:	80 93 01 24 	sts	0x2401, r24
    1fce:	90 93 02 24 	sts	0x2402, r25
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <update_funcCnt_y+0x196>
            break;
	
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			Y_dac_val = function_Y[func_read_index_y]*33;  
    1fd4:	e0 91 04 24 	lds	r30, 0x2404
			analogWrite(1, Y_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	e8 53       	subi	r30, 0x38	; 56
    1fe0:	fb 4d       	sbci	r31, 0xDB	; 219
    1fe2:	80 81       	ld	r24, Z
    1fe4:	91 81       	ldd	r25, Z+1	; 0x01
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	45 e0       	ldi	r20, 0x05	; 5
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	4a 95       	dec	r20
    1ff0:	e1 f7       	brne	.-8      	; 0x1fea <update_funcCnt_y+0x184>
    1ff2:	68 0f       	add	r22, r24
    1ff4:	79 1f       	adc	r23, r25
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
			break;
		
    }
}
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	ee e0       	ldi	r30, 0x0E	; 14
    2002:	0c 94 ae 51 	jmp	0xa35c	; 0xa35c <__epilogue_restores__+0x8>

00002006 <update_funcCnt_x>:
            break;
    }
}
	

void update_funcCnt_x(void) {
    2006:	a0 e0       	ldi	r26, 0x00	; 0
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e9 e0       	ldi	r30, 0x09	; 9
    200c:	f0 e1       	ldi	r31, 0x10	; 16
    200e:	0c 94 92 51 	jmp	0xa324	; 0xa324 <__prologue_saves__+0x8>
    int16_t temp_ADC_val;
	int32_t temp_index_x;
	uint16_t X_ADC2;

	
	if (!func_buffer_size_x){
    2012:	80 91 07 24 	lds	r24, 0x2407
    2016:	88 23       	and	r24, r24
    2018:	29 f4       	brne	.+10     	; 0x2024 <update_funcCnt_x+0x1e>
		xputs(PSTR("Ring buffer function_x is empty\n"));
    201a:	86 ee       	ldi	r24, 0xE6	; 230
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    2022:	d2 c0       	rjmp	.+420    	; 0x21c8 <update_funcCnt_x+0x1c2>
		return;
	}
	

    func_read_index_x++; 
    2024:	80 91 03 24 	lds	r24, 0x2403
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	80 93 03 24 	sts	0x2403, r24
	if (func_read_index_x >= BUFFER_LENGTH/2)
    202e:	80 91 03 24 	lds	r24, 0x2403
    2032:	84 36       	cpi	r24, 0x64	; 100
    2034:	10 f0       	brcs	.+4      	; 0x203a <update_funcCnt_x+0x34>
		func_read_index_x = 0;
    2036:	10 92 03 24 	sts	0x2403, r1
		
    func_buffer_size_x--;
    203a:	80 91 07 24 	lds	r24, 0x2407
    203e:	81 50       	subi	r24, 0x01	; 1
    2040:	80 93 07 24 	sts	0x2407, r24
	
	switch(x_mode){
    2044:	80 91 cb 26 	lds	r24, 0x26CB
    2048:	84 30       	cpi	r24, 0x04	; 4
    204a:	09 f4       	brne	.+2      	; 0x204e <update_funcCnt_x+0x48>
    204c:	5f c0       	rjmp	.+190    	; 0x210c <update_funcCnt_x+0x106>
    204e:	85 30       	cpi	r24, 0x05	; 5
    2050:	09 f4       	brne	.+2      	; 0x2054 <update_funcCnt_x+0x4e>
    2052:	a6 c0       	rjmp	.+332    	; 0x21a0 <update_funcCnt_x+0x19a>
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	09 f0       	breq	.+2      	; 0x205a <update_funcCnt_x+0x54>
    2058:	b7 c0       	rjmp	.+366    	; 0x21c8 <update_funcCnt_x+0x1c2>
	
		case 3:
	        X_ADC2 = analogRead(2);  //X_ADC2 ranges from 0-4095 (12bit ADC) when input 0-10V
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>

			if (X_ADC2>resolution_x) {X_ADC2 = resolution_x;}
    2060:	40 91 9d 20 	lds	r20, 0x209D
    2064:	50 91 9e 20 	lds	r21, 0x209E
			
			//calculate the index_x                                               
			temp_index_x = ((int32_t)X_ADC2 * x_num * 2 + resolution_x) / ((int32_t) resolution_x * 2) - 1;
    2068:	c0 91 26 27 	lds	r28, 0x2726
    206c:	d0 91 27 27 	lds	r29, 0x2727
    2070:	3e 01       	movw	r6, r28
    2072:	88 24       	eor	r8, r8
    2074:	99 24       	eor	r9, r9
    2076:	7a 01       	movw	r14, r20
    2078:	00 e0       	ldi	r16, 0x00	; 0
    207a:	10 e0       	ldi	r17, 0x00	; 0
    207c:	64 01       	movw	r12, r8
    207e:	53 01       	movw	r10, r6
    2080:	aa 0c       	add	r10, r10
    2082:	bb 1c       	adc	r11, r11
    2084:	cc 1c       	adc	r12, r12
    2086:	dd 1c       	adc	r13, r13
    2088:	48 17       	cp	r20, r24
    208a:	59 07       	cpc	r21, r25
    208c:	08 f4       	brcc	.+2      	; 0x2090 <update_funcCnt_x+0x8a>
    208e:	ca 01       	movw	r24, r20
    2090:	9c 01       	movw	r18, r24
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	c6 01       	movw	r24, r12
    2098:	b5 01       	movw	r22, r10
    209a:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    209e:	6e 0d       	add	r22, r14
    20a0:	7f 1d       	adc	r23, r15
    20a2:	80 1f       	adc	r24, r16
    20a4:	91 1f       	adc	r25, r17
    20a6:	ee 0c       	add	r14, r14
    20a8:	ff 1c       	adc	r15, r15
    20aa:	00 1f       	adc	r16, r16
    20ac:	11 1f       	adc	r17, r17
    20ae:	a8 01       	movw	r20, r16
    20b0:	97 01       	movw	r18, r14
    20b2:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__divmodsi4>
    20b6:	21 50       	subi	r18, 0x01	; 1
    20b8:	30 40       	sbci	r19, 0x00	; 0
    20ba:	40 40       	sbci	r20, 0x00	; 0
    20bc:	50 40       	sbci	r21, 0x00	; 0
				
            if (temp_index_x >= x_num)  {temp_index_x = x_num - 1;} //check if too big
    20be:	26 15       	cp	r18, r6
    20c0:	37 05       	cpc	r19, r7
    20c2:	48 05       	cpc	r20, r8
    20c4:	59 05       	cpc	r21, r9
    20c6:	2c f0       	brlt	.+10     	; 0x20d2 <update_funcCnt_x+0xcc>
    20c8:	21 97       	sbiw	r28, 0x01	; 1
    20ca:	9e 01       	movw	r18, r28
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	21 96       	adiw	r28, 0x01	; 1
            if (temp_index_x <= 0)  {temp_index_x = 0;} //or too small
			index_x = temp_index_x;
    20d2:	57 ff       	sbrs	r21, 7
    20d4:	04 c0       	rjmp	.+8      	; 0x20de <update_funcCnt_x+0xd8>
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	20 93 cd 26 	sts	0x26CD, r18
    20e2:	30 93 ce 26 	sts	0x26CE, r19
			
            frame_num = index_y*x_num + index_x;
    20e6:	80 91 71 28 	lds	r24, 0x2871
    20ea:	90 91 72 28 	lds	r25, 0x2872
    20ee:	20 91 cd 26 	lds	r18, 0x26CD
    20f2:	30 91 ce 26 	lds	r19, 0x26CE
    20f6:	ac 01       	movw	r20, r24
    20f8:	4c 9f       	mul	r20, r28
    20fa:	c0 01       	movw	r24, r0
    20fc:	4d 9f       	mul	r20, r29
    20fe:	90 0d       	add	r25, r0
    2100:	5c 9f       	mul	r21, r28
    2102:	90 0d       	add	r25, r0
    2104:	11 24       	eor	r1, r1
    2106:	82 0f       	add	r24, r18
    2108:	93 1f       	adc	r25, r19
    210a:	45 c0       	rjmp	.+138    	; 0x2196 <update_funcCnt_x+0x190>
			break;
			
		case 4:
			temp_ADC_val = X_pos_index + function_X[func_read_index_x];
    210c:	e0 91 03 24 	lds	r30, 0x2403
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	e8 5d       	subi	r30, 0xD8	; 216
    2118:	f8 4d       	sbci	r31, 0xD8	; 216
    211a:	01 90       	ld	r0, Z+
    211c:	f0 81       	ld	r31, Z
    211e:	e0 2d       	mov	r30, r0
    2120:	80 91 1e 26 	lds	r24, 0x261E
    2124:	90 91 1f 26 	lds	r25, 0x261F
    2128:	e8 0f       	add	r30, r24
    212a:	f9 1f       	adc	r31, r25
    212c:	20 91 26 27 	lds	r18, 0x2726
    2130:	30 91 27 27 	lds	r19, 0x2727
			if (temp_ADC_val >= 0) {index_x = temp_ADC_val%x_num; }
    2134:	f7 fd       	sbrc	r31, 7
    2136:	09 c0       	rjmp	.+18     	; 0x214a <update_funcCnt_x+0x144>
    2138:	cf 01       	movw	r24, r30
    213a:	b9 01       	movw	r22, r18
    213c:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    2140:	80 93 cd 26 	sts	0x26CD, r24
    2144:	90 93 ce 26 	sts	0x26CE, r25
    2148:	10 c0       	rjmp	.+32     	; 0x216a <update_funcCnt_x+0x164>
			if (temp_ADC_val < 0) {index_x = x_num - ((abs(temp_ADC_val))%x_num) -1;} //index_x should already smaller than x_num
    214a:	88 27       	eor	r24, r24
    214c:	99 27       	eor	r25, r25
    214e:	8e 1b       	sub	r24, r30
    2150:	9f 0b       	sbc	r25, r31
    2152:	b9 01       	movw	r22, r18
    2154:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    2158:	21 50       	subi	r18, 0x01	; 1
    215a:	30 40       	sbci	r19, 0x00	; 0
    215c:	b9 01       	movw	r22, r18
    215e:	68 1b       	sub	r22, r24
    2160:	79 0b       	sbc	r23, r25
    2162:	60 93 cd 26 	sts	0x26CD, r22
    2166:	70 93 ce 26 	sts	0x26CE, r23
			frame_num = index_y*x_num + index_x;
    216a:	20 91 71 28 	lds	r18, 0x2871
    216e:	30 91 72 28 	lds	r19, 0x2872
    2172:	40 91 cd 26 	lds	r20, 0x26CD
    2176:	50 91 ce 26 	lds	r21, 0x26CE
    217a:	80 91 26 27 	lds	r24, 0x2726
    217e:	90 91 27 27 	lds	r25, 0x2727
    2182:	bc 01       	movw	r22, r24
    2184:	26 9f       	mul	r18, r22
    2186:	c0 01       	movw	r24, r0
    2188:	27 9f       	mul	r18, r23
    218a:	90 0d       	add	r25, r0
    218c:	36 9f       	mul	r19, r22
    218e:	90 0d       	add	r25, r0
    2190:	11 24       	eor	r1, r1
    2192:	84 0f       	add	r24, r20
    2194:	95 1f       	adc	r25, r21
    2196:	80 93 01 24 	sts	0x2401, r24
    219a:	90 93 02 24 	sts	0x2402, r25
    219e:	14 c0       	rjmp	.+40     	; 0x21c8 <update_funcCnt_x+0x1c2>
			break;
			
		case 5:   // in function DBG mode - show the function gen
			//3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V 
			X_dac_val = function_X[func_read_index_x]*33;
    21a0:	e0 91 03 24 	lds	r30, 0x2403
			analogWrite(0, X_dac_val); // make it a value in the range -32767 - 32767 (-10V - 10V)
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	e8 5d       	subi	r30, 0xD8	; 216
    21ac:	f8 4d       	sbci	r31, 0xD8	; 216
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	bc 01       	movw	r22, r24
    21b4:	a5 e0       	ldi	r26, 0x05	; 5
    21b6:	66 0f       	add	r22, r22
    21b8:	77 1f       	adc	r23, r23
    21ba:	aa 95       	dec	r26
    21bc:	e1 f7       	brne	.-8      	; 0x21b6 <update_funcCnt_x+0x1b0>
    21be:	68 0f       	add	r22, r24
    21c0:	79 1f       	adc	r23, r25
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
			break;
		
    }
}
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	ee e0       	ldi	r30, 0x0E	; 14
    21ce:	0c 94 ae 51 	jmp	0xa35c	; 0xa35c <__epilogue_restores__+0x8>

000021d2 <fetch_update_funcX>:

void fetch_update_funcX(uint8_t fReset, uint8_t num_of_load_x) {
    21d2:	a2 e0       	ldi	r26, 0x02	; 2
    21d4:	b2 e0       	ldi	r27, 0x02	; 2
    21d6:	ef ee       	ldi	r30, 0xEF	; 239
    21d8:	f0 e1       	ldi	r31, 0x10	; 16
    21da:	0c 94 94 51 	jmp	0xa328	; 0xa328 <__prologue_saves__+0xc>
    21de:	98 2f       	mov	r25, r24
    21e0:	16 2f       	mov	r17, r22
	uint8_t tempBuff[512], temp1, temp2;
	uint16_t loadXBufferSize;
	
			
	//xprintf(PSTR("num_of_load_x =  %u\n"), num_of_load_x);			
	if (func_buffer_size_x >= BUFFER_LENGTH/2){
    21e2:	80 91 07 24 	lds	r24, 0x2407
    21e6:	84 36       	cpi	r24, 0x64	; 100
    21e8:	18 f0       	brcs	.+6      	; 0x21f0 <fetch_update_funcX+0x1e>
		xputs(PSTR("Ring buffer function_x is full\n"));
    21ea:	86 ec       	ldi	r24, 0xC6	; 198
    21ec:	93 e0       	ldi	r25, 0x03	; 3
    21ee:	c5 c0       	rjmp	.+394    	; 0x237a <fetch_update_funcX+0x1a8>
		return;
		}
		
	if (fReset == 1){ 
    21f0:	91 30       	cpi	r25, 0x01	; 1
    21f2:	31 f4       	brne	.+12     	; 0x2200 <fetch_update_funcX+0x2e>
		func_read_index_x = 0;
    21f4:	10 92 03 24 	sts	0x2403, r1
		func_write_index_x = 0;
    21f8:	10 92 05 24 	sts	0x2405, r1
		func_buffer_size_x = 0;       
    21fc:	10 92 07 24 	sts	0x2407, r1
	}

		//num_of_load_x ranges from 0 to num_buffer_load_x - 1
		if ((num_of_load_x ==  num_buffer_load_x - 1) && (last_load_x != 0))
    2200:	21 2f       	mov	r18, r17
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	80 91 b1 20 	lds	r24, 0x20B1
    2208:	90 91 b2 20 	lds	r25, 0x20B2
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	28 17       	cp	r18, r24
    2210:	39 07       	cpc	r19, r25
    2212:	39 f4       	brne	.+14     	; 0x2222 <fetch_update_funcX+0x50>
    2214:	80 90 10 24 	lds	r8, 0x2410
    2218:	90 90 11 24 	lds	r9, 0x2411
    221c:	81 14       	cp	r8, r1
    221e:	91 04       	cpc	r9, r1
    2220:	19 f4       	brne	.+6      	; 0x2228 <fetch_update_funcX+0x56>
    2222:	04 e6       	ldi	r16, 0x64	; 100
    2224:	80 2e       	mov	r8, r16
    2226:	91 2c       	mov	r9, r1
			loadXBufferSize = last_load_x;
		else 
			loadXBufferSize = FUNCTION_LENGTH;
	
	if (func_is_in_EEPROM == false)
    2228:	80 91 ff 23 	lds	r24, 0x23FF
    222c:	88 23       	and	r24, r24
    222e:	09 f0       	breq	.+2      	; 0x2232 <fetch_update_funcX+0x60>
    2230:	a7 c0       	rjmp	.+334    	; 0x2380 <fetch_update_funcX+0x1ae>
	{
	
	offset = 512 + num_of_load_x * FUNCTION_LENGTH;
	//offset = 512 + num_of_load_x * 512;
            
	res = f_lseek(&file2, offset);
    2232:	84 e6       	ldi	r24, 0x64	; 100
    2234:	18 9f       	mul	r17, r24
    2236:	c0 01       	movw	r24, r0
    2238:	11 24       	eor	r1, r1
    223a:	80 50       	subi	r24, 0x00	; 0
    223c:	9e 4f       	sbci	r25, 0xFE	; 254
    223e:	7c 01       	movw	r14, r24
    2240:	00 e0       	ldi	r16, 0x00	; 0
    2242:	10 e0       	ldi	r17, 0x00	; 0
    2244:	8a e9       	ldi	r24, 0x9A	; 154
    2246:	94 e2       	ldi	r25, 0x24	; 36
    2248:	b8 01       	movw	r22, r16
    224a:	a7 01       	movw	r20, r14
    224c:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
    2250:	28 2f       	mov	r18, r24

	
	if ((res == FR_OK) && (file2.fptr == offset)) {
    2252:	88 23       	and	r24, r24
    2254:	09 f0       	breq	.+2      	; 0x2258 <fetch_update_funcX+0x86>
    2256:	75 c0       	rjmp	.+234    	; 0x2342 <fetch_update_funcX+0x170>
    2258:	80 91 a0 24 	lds	r24, 0x24A0
    225c:	90 91 a1 24 	lds	r25, 0x24A1
    2260:	a0 91 a2 24 	lds	r26, 0x24A2
    2264:	b0 91 a3 24 	lds	r27, 0x24A3
    2268:	8e 15       	cp	r24, r14
    226a:	9f 05       	cpc	r25, r15
    226c:	a0 07       	cpc	r26, r16
    226e:	b1 07       	cpc	r27, r17
    2270:	09 f0       	breq	.+2      	; 0x2274 <fetch_update_funcX+0xa2>
    2272:	67 c0       	rjmp	.+206    	; 0x2342 <fetch_update_funcX+0x170>


			
digitalWrite(0,HIGH); 			
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	61 e0       	ldi	r22, 0x01	; 1
    2278:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
		//load 100 bytes data to temBuff

		res = f_read(&file2, tempBuff, loadXBufferSize, &cnt);
    227c:	8a e9       	ldi	r24, 0x9A	; 154
    227e:	94 e2       	ldi	r25, 0x24	; 36
    2280:	be 01       	movw	r22, r28
    2282:	6d 5f       	subi	r22, 0xFD	; 253
    2284:	7f 4f       	sbci	r23, 0xFF	; 255
    2286:	a4 01       	movw	r20, r8
    2288:	9e 01       	movw	r18, r28
    228a:	2f 5f       	subi	r18, 0xFF	; 255
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    2292:	28 2f       	mov	r18, r24
		if (!((res == FR_OK) && (cnt == loadXBufferSize))) {
    2294:	88 23       	and	r24, r24
    2296:	29 f4       	brne	.+10     	; 0x22a2 <fetch_update_funcX+0xd0>
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	88 15       	cp	r24, r8
    229e:	99 05       	cpc	r25, r9
    22a0:	e9 f0       	breq	.+58     	; 0x22dc <fetch_update_funcX+0x10a>
		//res = f_read(&file2, tempBuff, 512, &cnt);
			//if (!((res == FR_OK) && (cnt == 512))) {
		
			if (quiet_mode_on == 0){
    22a2:	80 91 0b 24 	lds	r24, 0x240B
    22a6:	88 23       	and	r24, r24
    22a8:	c9 f4       	brne	.+50     	; 0x22dc <fetch_update_funcX+0x10a>
				xprintf(PSTR("res =  %u\n"), res);
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <fetch_update_funcX+0xda>
    22ac:	0f 92       	push	r0
    22ae:	ed b7       	in	r30, 0x3d	; 61
    22b0:	fe b7       	in	r31, 0x3e	; 62
    22b2:	31 96       	adiw	r30, 0x01	; 1
    22b4:	8b eb       	ldi	r24, 0xBB	; 187
    22b6:	93 e0       	ldi	r25, 0x03	; 3
    22b8:	ad b7       	in	r26, 0x3d	; 61
    22ba:	be b7       	in	r27, 0x3e	; 62
    22bc:	11 96       	adiw	r26, 0x01	; 1
    22be:	8d 93       	st	X+, r24
    22c0:	9c 93       	st	X, r25
    22c2:	12 97       	sbiw	r26, 0x02	; 2
    22c4:	22 83       	std	Z+2, r18	; 0x02
    22c6:	13 82       	std	Z+3, r1	; 0x03
    22c8:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	81 e9       	ldi	r24, 0x91	; 145
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
			}
		}
		
digitalWrite(0,LOW); 	
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
		for (j = 0; j< cnt; j+=2){
    22e4:	69 81       	ldd	r22, Y+1	; 0x01
    22e6:	7a 81       	ldd	r23, Y+2	; 0x02
    22e8:	de 01       	movw	r26, r28
    22ea:	13 96       	adiw	r26, 0x03	; 3
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	24 c0       	rjmp	.+72     	; 0x233a <fetch_update_funcX+0x168>
		//for (j = 0; j< loadXBufferSize; j+=2){
			function_X[func_write_index_x] = (uint16_t)tempBuff[j] + (uint16_t)tempBuff[j+1]*256 ; 		
    22f2:	e0 91 05 24 	lds	r30, 0x2405
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	e8 5d       	subi	r30, 0xD8	; 216
    22fe:	f8 4d       	sbci	r31, 0xD8	; 216
    2300:	11 96       	adiw	r26, 0x01	; 1
    2302:	3c 91       	ld	r19, X
    2304:	11 97       	sbiw	r26, 0x01	; 1
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	8c 91       	ld	r24, X
    230a:	89 01       	movw	r16, r18
    230c:	08 0f       	add	r16, r24
    230e:	11 1d       	adc	r17, r1
    2310:	00 83       	st	Z, r16
    2312:	11 83       	std	Z+1, r17	; 0x01
			func_write_index_x++;  
    2314:	80 91 05 24 	lds	r24, 0x2405
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	80 93 05 24 	sts	0x2405, r24
			if (func_write_index_x >= BUFFER_LENGTH/2) //0-100
    231e:	80 91 05 24 	lds	r24, 0x2405
    2322:	84 36       	cpi	r24, 0x64	; 100
    2324:	10 f0       	brcs	.+4      	; 0x232a <fetch_update_funcX+0x158>
				func_write_index_x = 0;
    2326:	10 92 05 24 	sts	0x2405, r1
				
			func_buffer_size_x ++;  //atomic operation
    232a:	80 91 07 24 	lds	r24, 0x2407
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	80 93 07 24 	sts	0x2407, r24
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
			}
		}
		
digitalWrite(0,LOW); 	
		for (j = 0; j< cnt; j+=2){
    2334:	4e 5f       	subi	r20, 0xFE	; 254
    2336:	5f 4f       	sbci	r21, 0xFF	; 255
    2338:	12 96       	adiw	r26, 0x02	; 2
    233a:	46 17       	cp	r20, r22
    233c:	57 07       	cpc	r21, r23
    233e:	c8 f2       	brcs	.-78     	; 0x22f2 <fetch_update_funcX+0x120>
    2340:	61 c0       	rjmp	.+194    	; 0x2404 <fetch_update_funcX+0x232>
			func_buffer_size_x ++;  //atomic operation
		}
		
            //xprintf(PSTR("func_write_index_x =  %u\n"), func_write_index_x);
	} else {
		if (quiet_mode_on == 0){
    2342:	80 91 0b 24 	lds	r24, 0x240B
    2346:	88 23       	and	r24, r24
    2348:	09 f0       	breq	.+2      	; 0x234c <fetch_update_funcX+0x17a>
    234a:	5c c0       	rjmp	.+184    	; 0x2404 <fetch_update_funcX+0x232>
			xprintf(PSTR("res =  %u\n"), res);
    234c:	00 d0       	rcall	.+0      	; 0x234e <fetch_update_funcX+0x17c>
    234e:	0f 92       	push	r0
    2350:	ed b7       	in	r30, 0x3d	; 61
    2352:	fe b7       	in	r31, 0x3e	; 62
    2354:	31 96       	adiw	r30, 0x01	; 1
    2356:	86 e8       	ldi	r24, 0x86	; 134
    2358:	93 e0       	ldi	r25, 0x03	; 3
    235a:	ad b7       	in	r26, 0x3d	; 61
    235c:	be b7       	in	r27, 0x3e	; 62
    235e:	11 96       	adiw	r26, 0x01	; 1
    2360:	8d 93       	st	X+, r24
    2362:	9c 93       	st	X, r25
    2364:	12 97       	sbiw	r26, 0x02	; 2
    2366:	22 83       	std	Z+2, r18	; 0x02
    2368:	13 82       	std	Z+3, r1	; 0x03
    236a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
			xputs(PSTR("Error in f_lseek in fetch_update_funcX\n"));
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	8e e5       	ldi	r24, 0x5E	; 94
    2378:	93 e0       	ldi	r25, 0x03	; 3
    237a:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    237e:	42 c0       	rjmp	.+132    	; 0x2404 <fetch_update_funcX+0x232>
	}
	}
	else //func_is_in_EEPROM = true
	{
			
digitalWrite(0,HIGH); 
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
    2388:	84 e6       	ldi	r24, 0x64	; 100
    238a:	18 9f       	mul	r17, r24
    238c:	60 01       	movw	r12, r0
    238e:	11 24       	eor	r1, r1
    2390:	02 e8       	ldi	r16, 0x82	; 130
    2392:	10 e0       	ldi	r17, 0x00	; 0
    2394:	c0 0e       	add	r12, r16
    2396:	d1 1e       	adc	r13, r17
    2398:	aa 24       	eor	r10, r10
    239a:	bb 24       	eor	r11, r11
    239c:	2c c0       	rjmp	.+88     	; 0x23f6 <fetch_update_funcX+0x224>

		for (j = 0; j< loadXBufferSize; j+=2){
			temp1 = eeprom_read_byte(fun_x_EEPROM + num_of_load_x * FUNCTION_LENGTH +j);
    239e:	c6 01       	movw	r24, r12
    23a0:	0e 94 19 56 	call	0xac32	; 0xac32 <__eerd_byte_x128a1>
    23a4:	18 2f       	mov	r17, r24
			temp2 = eeprom_read_byte(fun_x_EEPROM + num_of_load_x * FUNCTION_LENGTH +j+1);
    23a6:	c6 01       	movw	r24, r12
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	0e 94 19 56 	call	0xac32	; 0xac32 <__eerd_byte_x128a1>
//xprintf(PSTR("temp1=  %d, temp2= %d\n"),temp1, temp2);		
			function_X[func_write_index_x] = (uint16_t)temp1 + (uint16_t)temp2*256 ; 	
    23ae:	e0 91 05 24 	lds	r30, 0x2405
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	e8 5d       	subi	r30, 0xD8	; 216
    23ba:	f8 4d       	sbci	r31, 0xD8	; 216
    23bc:	f8 2e       	mov	r15, r24
    23be:	ee 24       	eor	r14, r14
    23c0:	c7 01       	movw	r24, r14
    23c2:	81 0f       	add	r24, r17
    23c4:	91 1d       	adc	r25, r1
    23c6:	80 83       	st	Z, r24
    23c8:	91 83       	std	Z+1, r25	; 0x01
//xprintf(PSTR("function_X[%d]=  %u\n"),func_write_index_x, function_X[func_write_index_x]);		
			func_write_index_x++;  
    23ca:	80 91 05 24 	lds	r24, 0x2405
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	80 93 05 24 	sts	0x2405, r24
			if (func_write_index_x >= BUFFER_LENGTH/2) //0-100
    23d4:	80 91 05 24 	lds	r24, 0x2405
    23d8:	84 36       	cpi	r24, 0x64	; 100
    23da:	10 f0       	brcs	.+4      	; 0x23e0 <fetch_update_funcX+0x20e>
				func_write_index_x = 0;
    23dc:	10 92 05 24 	sts	0x2405, r1
			
			func_buffer_size_x ++;  //atomic operation
    23e0:	80 91 07 24 	lds	r24, 0x2407
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	80 93 07 24 	sts	0x2407, r24
	else //func_is_in_EEPROM = true
	{
			
digitalWrite(0,HIGH); 

		for (j = 0; j< loadXBufferSize; j+=2){
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a8 0e       	add	r10, r24
    23f0:	b9 1e       	adc	r11, r25
    23f2:	c8 0e       	add	r12, r24
    23f4:	d9 1e       	adc	r13, r25
    23f6:	a8 14       	cp	r10, r8
    23f8:	b9 04       	cpc	r11, r9
    23fa:	88 f2       	brcs	.-94     	; 0x239e <fetch_update_funcX+0x1cc>
			if (func_write_index_x >= BUFFER_LENGTH/2) //0-100
				func_write_index_x = 0;
			
			func_buffer_size_x ++;  //atomic operation
		}
digitalWrite(0,LOW); 	
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	60 e0       	ldi	r22, 0x00	; 0
    2400:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
	}

}
    2404:	ce 5f       	subi	r28, 0xFE	; 254
    2406:	dd 4f       	sbci	r29, 0xFD	; 253
    2408:	ec e0       	ldi	r30, 0x0C	; 12
    240a:	0c 94 b0 51 	jmp	0xa360	; 0xa360 <__epilogue_restores__+0xc>

0000240e <set_vel_func>:
                xputs(PSTR("Error input for function channel.\n"));
            break;
    }
}

void set_vel_func(uint8_t func_channel, uint8_t func_id) {
    240e:	ae e0       	ldi	r26, 0x0E	; 14
    2410:	b2 e0       	ldi	r27, 0x02	; 2
    2412:	ed e0       	ldi	r30, 0x0D	; 13
    2414:	f2 e1       	ldi	r31, 0x12	; 18
    2416:	0c 94 9c 51 	jmp	0xa338	; 0xa338 <__prologue_saves__+0x1c>
    241a:	08 2f       	mov	r16, r24
    241c:	16 2f       	mov	r17, r22
    //uint8_t func_name_y[100];
    uint8_t res, func_name_len;
    uint8_t velFuncBuff[512];
    
    
    if (func_id < 10)
    241e:	6a 30       	cpi	r22, 0x0A	; 10
    2420:	80 f4       	brcc	.+32     	; 0x2442 <set_vel_func+0x34>
        sprintf(str, "vel000%d.fun\0", func_id);
    2422:	00 d0       	rcall	.+0      	; 0x2424 <set_vel_func+0x16>
    2424:	00 d0       	rcall	.+0      	; 0x2426 <set_vel_func+0x18>
    2426:	ed b7       	in	r30, 0x3d	; 61
    2428:	fe b7       	in	r31, 0x3e	; 62
    242a:	31 96       	adiw	r30, 0x01	; 1
    242c:	ce 01       	movw	r24, r28
    242e:	03 96       	adiw	r24, 0x03	; 3
    2430:	ad b7       	in	r26, 0x3d	; 61
    2432:	be b7       	in	r27, 0x3e	; 62
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	8d 93       	st	X+, r24
    2438:	9c 93       	st	X, r25
    243a:	12 97       	sbiw	r26, 0x02	; 2
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e2       	ldi	r25, 0x20	; 32
    2440:	1f c0       	rjmp	.+62     	; 0x2480 <set_vel_func+0x72>
    2442:	ce 01       	movw	r24, r28
    2444:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    2446:	64 36       	cpi	r22, 0x64	; 100
    2448:	70 f4       	brcc	.+28     	; 0x2466 <set_vel_func+0x58>
        sprintf(str, "vel00%d.fun\0", func_id);
    244a:	00 d0       	rcall	.+0      	; 0x244c <set_vel_func+0x3e>
    244c:	00 d0       	rcall	.+0      	; 0x244e <set_vel_func+0x40>
    244e:	ed b7       	in	r30, 0x3d	; 61
    2450:	fe b7       	in	r31, 0x3e	; 62
    2452:	31 96       	adiw	r30, 0x01	; 1
    2454:	ad b7       	in	r26, 0x3d	; 61
    2456:	be b7       	in	r27, 0x3e	; 62
    2458:	11 96       	adiw	r26, 0x01	; 1
    245a:	8d 93       	st	X+, r24
    245c:	9c 93       	st	X, r25
    245e:	12 97       	sbiw	r26, 0x02	; 2
    2460:	8e e0       	ldi	r24, 0x0E	; 14
    2462:	90 e2       	ldi	r25, 0x20	; 32
    2464:	0d c0       	rjmp	.+26     	; 0x2480 <set_vel_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "vel0%d.fun\0", func_id);
    2466:	00 d0       	rcall	.+0      	; 0x2468 <set_vel_func+0x5a>
    2468:	00 d0       	rcall	.+0      	; 0x246a <set_vel_func+0x5c>
    246a:	ed b7       	in	r30, 0x3d	; 61
    246c:	fe b7       	in	r31, 0x3e	; 62
    246e:	31 96       	adiw	r30, 0x01	; 1
    2470:	ad b7       	in	r26, 0x3d	; 61
    2472:	be b7       	in	r27, 0x3e	; 62
    2474:	11 96       	adiw	r26, 0x01	; 1
    2476:	8d 93       	st	X+, r24
    2478:	9c 93       	st	X, r25
    247a:	12 97       	sbiw	r26, 0x02	; 2
    247c:	8b e1       	ldi	r24, 0x1B	; 27
    247e:	90 e2       	ldi	r25, 0x20	; 32
    2480:	82 83       	std	Z+2, r24	; 0x02
    2482:	93 83       	std	Z+3, r25	; 0x03
    2484:	14 83       	std	Z+4, r17	; 0x04
    2486:	15 82       	std	Z+5, r1	; 0x05
    2488:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <sprintf>
    248c:	ed b7       	in	r30, 0x3d	; 61
    248e:	fe b7       	in	r31, 0x3e	; 62
    2490:	36 96       	adiw	r30, 0x06	; 6
    2492:	ed bf       	out	0x3d, r30	; 61
    2494:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    2496:	01 30       	cpi	r16, 0x01	; 1
    2498:	21 f0       	breq	.+8      	; 0x24a2 <set_vel_func+0x94>
    249a:	02 30       	cpi	r16, 0x02	; 2
    249c:	09 f0       	breq	.+2      	; 0x24a0 <set_vel_func+0x92>
    249e:	ea c1       	rjmp	.+980    	; 0x2874 <set_vel_func+0x466>
    24a0:	f4 c0       	rjmp	.+488    	; 0x268a <set_vel_func+0x27c>
        case 1:    //channel x
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file2);
    24a2:	8a e9       	ldi	r24, 0x9A	; 154
    24a4:	94 e2       	ldi	r25, 0x24	; 36
    24a6:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    24aa:	8a e9       	ldi	r24, 0x9A	; 154
    24ac:	94 e2       	ldi	r25, 0x24	; 36
    24ae:	be 01       	movw	r22, r28
    24b0:	6d 5f       	subi	r22, 0xFD	; 253
    24b2:	7f 4f       	sbci	r23, 0xFF	; 255
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
            
            if (res == FR_OK) {
    24ba:	88 23       	and	r24, r24
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <set_vel_func+0xb2>
    24be:	48 c0       	rjmp	.+144    	; 0x2550 <set_vel_func+0x142>
                
                res = f_read(&file2, velFuncBuff, 512, &cnt);
    24c0:	8a e9       	ldi	r24, 0x9A	; 154
    24c2:	94 e2       	ldi	r25, 0x24	; 36
    24c4:	be 01       	movw	r22, r28
    24c6:	61 5f       	subi	r22, 0xF1	; 241
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	52 e0       	ldi	r21, 0x02	; 2
    24ce:	9e 01       	movw	r18, r28
    24d0:	2f 5f       	subi	r18, 0xFF	; 255
    24d2:	3f 4f       	sbci	r19, 0xFF	; 255
    24d4:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    24d8:	88 23       	and	r24, r24
    24da:	99 f5       	brne	.+102    	; 0x2542 <set_vel_func+0x134>
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	80 50       	subi	r24, 0x00	; 0
    24e2:	92 40       	sbci	r25, 0x02	; 2
    24e4:	71 f5       	brne	.+92     	; 0x2542 <set_vel_func+0x134>
                    
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = velFuncBuff[0];
    24e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e8:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_x)[1] = velFuncBuff[1];
    24ec:	88 89       	ldd	r24, Y+16	; 0x10
    24ee:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_x)[2] = velFuncBuff[2];
    24f2:	89 89       	ldd	r24, Y+17	; 0x11
    24f4:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[3] = velFuncBuff[3];
    24f8:	8a 89       	ldd	r24, Y+18	; 0x12
    24fa:	80 93 ac 20 	sts	0x20AC, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_X = func_id;
    24fe:	10 93 0c 24 	sts	0x240C, r17
    2502:	10 92 0d 24 	sts	0x240D, r1
                    
                    Stop = 1;
    2506:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    250a:	10 92 fa 23 	sts	0x23FA, r1
                    if (quiet_mode_on == 0)
    250e:	80 91 0b 24 	lds	r24, 0x240B
    2512:	88 23       	and	r24, r24
    2514:	29 f5       	brne	.+74     	; 0x2560 <set_vel_func+0x152>
                        xprintf(PSTR("Setting velocity function  %u for X\n"), func_id);
    2516:	00 d0       	rcall	.+0      	; 0x2518 <set_vel_func+0x10a>
    2518:	0f 92       	push	r0
    251a:	ed b7       	in	r30, 0x3d	; 61
    251c:	fe b7       	in	r31, 0x3e	; 62
    251e:	31 96       	adiw	r30, 0x01	; 1
    2520:	88 e7       	ldi	r24, 0x78	; 120
    2522:	95 e0       	ldi	r25, 0x05	; 5
    2524:	ad b7       	in	r26, 0x3d	; 61
    2526:	be b7       	in	r27, 0x3e	; 62
    2528:	11 96       	adiw	r26, 0x01	; 1
    252a:	8d 93       	st	X+, r24
    252c:	9c 93       	st	X, r25
    252e:	12 97       	sbiw	r26, 0x02	; 2
    2530:	12 83       	std	Z+2, r17	; 0x02
    2532:	13 82       	std	Z+3, r1	; 0x03
    2534:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <set_vel_func+0x152>
                    
                } else {
                    if (quiet_mode_on == 0)
    2542:	80 91 0b 24 	lds	r24, 0x240B
    2546:	88 23       	and	r24, r24
    2548:	59 f4       	brne	.+22     	; 0x2560 <set_vel_func+0x152>
                        xputs(PSTR("Error f_read in set_vel_func X.\n"));
    254a:	87 e5       	ldi	r24, 0x57	; 87
    254c:	95 e0       	ldi	r25, 0x05	; 5
    254e:	06 c0       	rjmp	.+12     	; 0x255c <set_vel_func+0x14e>
                }
            } else {
                if (quiet_mode_on == 0)
    2550:	80 91 0b 24 	lds	r24, 0x240B
    2554:	88 23       	and	r24, r24
    2556:	21 f4       	brne	.+8      	; 0x2560 <set_vel_func+0x152>
                    xputs(PSTR("Error f_open in set_vel_func X.\n"));
    2558:	86 e3       	ldi	r24, 0x36	; 54
    255a:	95 e0       	ldi	r25, 0x05	; 5
    255c:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            }
			
			if (quiet_mode_on == 0)
    2560:	80 91 0b 24 	lds	r24, 0x240B
    2564:	88 23       	and	r24, r24
    2566:	09 f0       	breq	.+2      	; 0x256a <set_vel_func+0x15c>
    2568:	89 c0       	rjmp	.+274    	; 0x267c <set_vel_func+0x26e>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    256a:	00 d0       	rcall	.+0      	; 0x256c <set_vel_func+0x15e>
    256c:	00 d0       	rcall	.+0      	; 0x256e <set_vel_func+0x160>
    256e:	85 e2       	ldi	r24, 0x25	; 37
    2570:	95 e0       	ldi	r25, 0x05	; 5
    2572:	ed b7       	in	r30, 0x3d	; 61
    2574:	fe b7       	in	r31, 0x3e	; 62
    2576:	81 83       	std	Z+1, r24	; 0x01
    2578:	92 83       	std	Z+2, r25	; 0x02
    257a:	80 91 a9 20 	lds	r24, 0x20A9
    257e:	90 91 aa 20 	lds	r25, 0x20AA
    2582:	a0 91 ab 20 	lds	r26, 0x20AB
    2586:	b0 91 ac 20 	lds	r27, 0x20AC
    258a:	83 83       	std	Z+3, r24	; 0x03
    258c:	94 83       	std	Z+4, r25	; 0x04
    258e:	a5 83       	std	Z+5, r26	; 0x05
    2590:	b6 83       	std	Z+6, r27	; 0x06
    2592:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				last_load_x = funcSize_x % FUNCTION_LENGTH;
    2596:	60 91 a9 20 	lds	r22, 0x20A9
    259a:	70 91 aa 20 	lds	r23, 0x20AA
    259e:	80 91 ab 20 	lds	r24, 0x20AB
    25a2:	90 91 ac 20 	lds	r25, 0x20AC
    25a6:	28 ec       	ldi	r18, 0xC8	; 200
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    25b2:	96 95       	lsr	r25
    25b4:	87 95       	ror	r24
    25b6:	77 95       	ror	r23
    25b8:	67 95       	ror	r22
    25ba:	60 93 10 24 	sts	0x2410, r22
    25be:	70 93 11 24 	sts	0x2411, r23
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	ed b7       	in	r30, 0x3d	; 61
    25c8:	fe b7       	in	r31, 0x3e	; 62
    25ca:	31 96       	adiw	r30, 0x01	; 1
    25cc:	23 e1       	ldi	r18, 0x13	; 19
    25ce:	35 e0       	ldi	r19, 0x05	; 5
    25d0:	ad b7       	in	r26, 0x3d	; 61
    25d2:	be b7       	in	r27, 0x3e	; 62
    25d4:	11 96       	adiw	r26, 0x01	; 1
    25d6:	2d 93       	st	X+, r18
    25d8:	3c 93       	st	X, r19
    25da:	12 97       	sbiw	r26, 0x02	; 2
    25dc:	62 83       	std	Z+2, r22	; 0x02
    25de:	73 83       	std	Z+3, r23	; 0x03
    25e0:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				if(!last_load_x){
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	80 91 10 24 	lds	r24, 0x2410
    25f0:	90 91 11 24 	lds	r25, 0x2411
    25f4:	20 91 a9 20 	lds	r18, 0x20A9
    25f8:	30 91 aa 20 	lds	r19, 0x20AA
    25fc:	40 91 ab 20 	lds	r20, 0x20AB
    2600:	50 91 ac 20 	lds	r21, 0x20AC
    2604:	89 2b       	or	r24, r25
    2606:	e1 f4       	brne	.+56     	; 0x2640 <set_vel_func+0x232>
					num_buffer_load_x = funcSize_x/FUNCTION_LENGTH;
    2608:	ca 01       	movw	r24, r20
    260a:	b9 01       	movw	r22, r18
    260c:	20 e9       	ldi	r18, 0x90	; 144
    260e:	31 e0       	ldi	r19, 0x01	; 1
    2610:	40 e0       	ldi	r20, 0x00	; 0
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2618:	20 93 b1 20 	sts	0x20B1, r18
    261c:	30 93 b2 20 	sts	0x20B2, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    2620:	00 d0       	rcall	.+0      	; 0x2622 <set_vel_func+0x214>
    2622:	0f 92       	push	r0
    2624:	ed b7       	in	r30, 0x3d	; 61
    2626:	fe b7       	in	r31, 0x3e	; 62
    2628:	31 96       	adiw	r30, 0x01	; 1
    262a:	8b ef       	ldi	r24, 0xFB	; 251
    262c:	94 e0       	ldi	r25, 0x04	; 4
    262e:	ad b7       	in	r26, 0x3d	; 61
    2630:	be b7       	in	r27, 0x3e	; 62
    2632:	11 96       	adiw	r26, 0x01	; 1
    2634:	8d 93       	st	X+, r24
    2636:	9c 93       	st	X, r25
    2638:	12 97       	sbiw	r26, 0x02	; 2
    263a:	22 83       	std	Z+2, r18	; 0x02
    263c:	33 83       	std	Z+3, r19	; 0x03
    263e:	18 c0       	rjmp	.+48     	; 0x2670 <set_vel_func+0x262>
				}
				else{
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    2640:	ca 01       	movw	r24, r20
    2642:	b9 01       	movw	r22, r18
    2644:	20 e9       	ldi	r18, 0x90	; 144
    2646:	31 e0       	ldi	r19, 0x01	; 1
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2650:	2f 5f       	subi	r18, 0xFF	; 255
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	20 93 b1 20 	sts	0x20B1, r18
    2658:	30 93 b2 20 	sts	0x20B2, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);
    265c:	00 d0       	rcall	.+0      	; 0x265e <set_vel_func+0x250>
    265e:	0f 92       	push	r0
    2660:	83 ee       	ldi	r24, 0xE3	; 227
    2662:	94 e0       	ldi	r25, 0x04	; 4
    2664:	ed b7       	in	r30, 0x3d	; 61
    2666:	fe b7       	in	r31, 0x3e	; 62
    2668:	81 83       	std	Z+1, r24	; 0x01
    266a:	92 83       	std	Z+2, r25	; 0x02
    266c:	23 83       	std	Z+3, r18	; 0x03
    266e:	34 83       	std	Z+4, r19	; 0x04
    2670:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
				}
			}
			
			default_func_x = 0;
    267c:	10 92 a1 20 	sts	0x20A1, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fetch_update_funcX>
    2688:	fd c0       	rjmp	.+506    	; 0x2884 <set_vel_func+0x476>
            
        case 2:
            
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            
            res = f_close(&file3);
    268a:	80 e2       	ldi	r24, 0x20	; 32
    268c:	96 e2       	ldi	r25, 0x26	; 38
    268e:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
            
            //read the header block and send back the function name
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    2692:	80 e2       	ldi	r24, 0x20	; 32
    2694:	96 e2       	ldi	r25, 0x26	; 38
    2696:	be 01       	movw	r22, r28
    2698:	6d 5f       	subi	r22, 0xFD	; 253
    269a:	7f 4f       	sbci	r23, 0xFF	; 255
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
            
            if (res == FR_OK) {
    26a2:	88 23       	and	r24, r24
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <set_vel_func+0x29a>
    26a6:	49 c0       	rjmp	.+146    	; 0x273a <set_vel_func+0x32c>
                
                res = f_read(&file3, velFuncBuff, 512, &cnt);
    26a8:	80 e2       	ldi	r24, 0x20	; 32
    26aa:	96 e2       	ldi	r25, 0x26	; 38
    26ac:	be 01       	movw	r22, r28
    26ae:	61 5f       	subi	r22, 0xF1	; 241
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	40 e0       	ldi	r20, 0x00	; 0
    26b4:	52 e0       	ldi	r21, 0x02	; 2
    26b6:	9e 01       	movw	r18, r28
    26b8:	2f 5f       	subi	r18, 0xFF	; 255
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                
                if ((res == FR_OK) && (cnt == 512)) {
    26c0:	88 23       	and	r24, r24
    26c2:	a1 f5       	brne	.+104    	; 0x272c <set_vel_func+0x31e>
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	80 50       	subi	r24, 0x00	; 0
    26ca:	92 40       	sbci	r25, 0x02	; 2
    26cc:	79 f5       	brne	.+94     	; 0x272c <set_vel_func+0x31e>
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = velFuncBuff[0];
    26ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d0:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_y)[1] = velFuncBuff[1];
    26d4:	88 89       	ldd	r24, Y+16	; 0x10
    26d6:	80 93 ae 20 	sts	0x20AE, r24
                    ((uint8_t*)&funcSize_y)[2] = velFuncBuff[2];
    26da:	89 89       	ldd	r24, Y+17	; 0x11
    26dc:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[3] = velFuncBuff[3];
    26e0:	8a 89       	ldd	r24, Y+18	; 0x12
    26e2:	80 93 b0 20 	sts	0x20B0, r24
                    func_name_len = velFuncBuff[4];
                    
                    func_ID_Y = func_id;
    26e6:	10 93 0e 24 	sts	0x240E, r17
    26ea:	10 92 0f 24 	sts	0x240F, r1
                    
                    Stop = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    26f4:	10 92 fa 23 	sts	0x23FA, r1
                    if (quiet_mode_on == 0)
    26f8:	80 91 0b 24 	lds	r24, 0x240B
    26fc:	88 23       	and	r24, r24
    26fe:	29 f5       	brne	.+74     	; 0x274a <set_vel_func+0x33c>
                        xprintf(PSTR("Setting velocity function %u for Y\n"), func_id);
    2700:	00 d0       	rcall	.+0      	; 0x2702 <set_vel_func+0x2f4>
    2702:	0f 92       	push	r0
    2704:	ed b7       	in	r30, 0x3d	; 61
    2706:	fe b7       	in	r31, 0x3e	; 62
    2708:	31 96       	adiw	r30, 0x01	; 1
    270a:	8f eb       	ldi	r24, 0xBF	; 191
    270c:	94 e0       	ldi	r25, 0x04	; 4
    270e:	ad b7       	in	r26, 0x3d	; 61
    2710:	be b7       	in	r27, 0x3e	; 62
    2712:	11 96       	adiw	r26, 0x01	; 1
    2714:	8d 93       	st	X+, r24
    2716:	9c 93       	st	X, r25
    2718:	12 97       	sbiw	r26, 0x02	; 2
    271a:	12 83       	std	Z+2, r17	; 0x02
    271c:	13 82       	std	Z+3, r1	; 0x03
    271e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f c0       	rjmp	.+30     	; 0x274a <set_vel_func+0x33c>
                    
                } else {
                    if (quiet_mode_on == 0)
    272c:	80 91 0b 24 	lds	r24, 0x240B
    2730:	88 23       	and	r24, r24
    2732:	59 f4       	brne	.+22     	; 0x274a <set_vel_func+0x33c>
                        xputs(PSTR("Error f_read in set_vel_func Y.\n"));
    2734:	8e e9       	ldi	r24, 0x9E	; 158
    2736:	94 e0       	ldi	r25, 0x04	; 4
    2738:	06 c0       	rjmp	.+12     	; 0x2746 <set_vel_func+0x338>
                }
            } else {
                if (quiet_mode_on == 0)
    273a:	80 91 0b 24 	lds	r24, 0x240B
    273e:	88 23       	and	r24, r24
    2740:	21 f4       	brne	.+8      	; 0x274a <set_vel_func+0x33c>
                    xputs(PSTR("Error f_open in set_vel_func Y.\n"));
    2742:	8d e7       	ldi	r24, 0x7D	; 125
    2744:	94 e0       	ldi	r25, 0x04	; 4
    2746:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            }
			
			if (quiet_mode_on == 0){
    274a:	80 91 0b 24 	lds	r24, 0x240B
    274e:	88 23       	and	r24, r24
    2750:	09 f0       	breq	.+2      	; 0x2754 <set_vel_func+0x346>
    2752:	89 c0       	rjmp	.+274    	; 0x2866 <set_vel_func+0x458>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    2754:	00 d0       	rcall	.+0      	; 0x2756 <set_vel_func+0x348>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <set_vel_func+0x34a>
    2758:	8c e6       	ldi	r24, 0x6C	; 108
    275a:	94 e0       	ldi	r25, 0x04	; 4
    275c:	ed b7       	in	r30, 0x3d	; 61
    275e:	fe b7       	in	r31, 0x3e	; 62
    2760:	81 83       	std	Z+1, r24	; 0x01
    2762:	92 83       	std	Z+2, r25	; 0x02
    2764:	80 91 ad 20 	lds	r24, 0x20AD
    2768:	90 91 ae 20 	lds	r25, 0x20AE
    276c:	a0 91 af 20 	lds	r26, 0x20AF
    2770:	b0 91 b0 20 	lds	r27, 0x20B0
    2774:	83 83       	std	Z+3, r24	; 0x03
    2776:	94 83       	std	Z+4, r25	; 0x04
    2778:	a5 83       	std	Z+5, r26	; 0x05
    277a:	b6 83       	std	Z+6, r27	; 0x06
    277c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				last_load_y = funcSize_y % FUNCTION_LENGTH;
    2780:	60 91 ad 20 	lds	r22, 0x20AD
    2784:	70 91 ae 20 	lds	r23, 0x20AE
    2788:	80 91 af 20 	lds	r24, 0x20AF
    278c:	90 91 b0 20 	lds	r25, 0x20B0
    2790:	28 ec       	ldi	r18, 0xC8	; 200
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    279c:	96 95       	lsr	r25
    279e:	87 95       	ror	r24
    27a0:	77 95       	ror	r23
    27a2:	67 95       	ror	r22
    27a4:	60 93 12 24 	sts	0x2412, r22
    27a8:	70 93 13 24 	sts	0x2413, r23
				xprintf(PSTR("last_load_y = %u\n"), last_load_y);
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	ed b7       	in	r30, 0x3d	; 61
    27b2:	fe b7       	in	r31, 0x3e	; 62
    27b4:	31 96       	adiw	r30, 0x01	; 1
    27b6:	2a e5       	ldi	r18, 0x5A	; 90
    27b8:	34 e0       	ldi	r19, 0x04	; 4
    27ba:	ad b7       	in	r26, 0x3d	; 61
    27bc:	be b7       	in	r27, 0x3e	; 62
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	2d 93       	st	X+, r18
    27c2:	3c 93       	st	X, r19
    27c4:	12 97       	sbiw	r26, 0x02	; 2
    27c6:	62 83       	std	Z+2, r22	; 0x02
    27c8:	73 83       	std	Z+3, r23	; 0x03
    27ca:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				if (last_load_y == 0){
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	80 91 12 24 	lds	r24, 0x2412
    27da:	90 91 13 24 	lds	r25, 0x2413
    27de:	20 91 ad 20 	lds	r18, 0x20AD
    27e2:	30 91 ae 20 	lds	r19, 0x20AE
    27e6:	40 91 af 20 	lds	r20, 0x20AF
    27ea:	50 91 b0 20 	lds	r21, 0x20B0
    27ee:	89 2b       	or	r24, r25
    27f0:	e1 f4       	brne	.+56     	; 0x282a <set_vel_func+0x41c>
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;
    27f2:	ca 01       	movw	r24, r20
    27f4:	b9 01       	movw	r22, r18
    27f6:	20 e9       	ldi	r18, 0x90	; 144
    27f8:	31 e0       	ldi	r19, 0x01	; 1
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2802:	20 93 b3 20 	sts	0x20B3, r18
    2806:	30 93 b4 20 	sts	0x20B4, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    280a:	00 d0       	rcall	.+0      	; 0x280c <set_vel_func+0x3fe>
    280c:	0f 92       	push	r0
    280e:	ed b7       	in	r30, 0x3d	; 61
    2810:	fe b7       	in	r31, 0x3e	; 62
    2812:	31 96       	adiw	r30, 0x01	; 1
    2814:	82 e4       	ldi	r24, 0x42	; 66
    2816:	94 e0       	ldi	r25, 0x04	; 4
    2818:	ad b7       	in	r26, 0x3d	; 61
    281a:	be b7       	in	r27, 0x3e	; 62
    281c:	11 96       	adiw	r26, 0x01	; 1
    281e:	8d 93       	st	X+, r24
    2820:	9c 93       	st	X, r25
    2822:	12 97       	sbiw	r26, 0x02	; 2
    2824:	22 83       	std	Z+2, r18	; 0x02
    2826:	33 83       	std	Z+3, r19	; 0x03
    2828:	18 c0       	rjmp	.+48     	; 0x285a <set_vel_func+0x44c>
				}
				else{
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    282a:	ca 01       	movw	r24, r20
    282c:	b9 01       	movw	r22, r18
    282e:	20 e9       	ldi	r18, 0x90	; 144
    2830:	31 e0       	ldi	r19, 0x01	; 1
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	50 e0       	ldi	r21, 0x00	; 0
    2836:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	20 93 b3 20 	sts	0x20B3, r18
    2842:	30 93 b4 20 	sts	0x20B4, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);
    2846:	00 d0       	rcall	.+0      	; 0x2848 <set_vel_func+0x43a>
    2848:	0f 92       	push	r0
    284a:	8a e2       	ldi	r24, 0x2A	; 42
    284c:	94 e0       	ldi	r25, 0x04	; 4
    284e:	ed b7       	in	r30, 0x3d	; 61
    2850:	fe b7       	in	r31, 0x3e	; 62
    2852:	81 83       	std	Z+1, r24	; 0x01
    2854:	92 83       	std	Z+2, r25	; 0x02
    2856:	23 83       	std	Z+3, r18	; 0x03
    2858:	34 83       	std	Z+4, r19	; 0x04
    285a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
				}
			}
			
			default_func_y = 0;
    2866:	10 92 a2 20 	sts	0x20A2, r1
			
			//update function buffer
            fetch_update_funcY(1,0);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	60 e0       	ldi	r22, 0x00	; 0
    286e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <fetch_update_funcY>
    2872:	08 c0       	rjmp	.+16     	; 0x2884 <set_vel_func+0x476>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); //enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    2874:	80 91 0b 24 	lds	r24, 0x240B
    2878:	88 23       	and	r24, r24
    287a:	21 f4       	brne	.+8      	; 0x2884 <set_vel_func+0x476>
                xputs(PSTR("Error input for function channel.\n"));
    287c:	87 e0       	ldi	r24, 0x07	; 7
    287e:	94 e0       	ldi	r25, 0x04	; 4
    2880:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            break;
    }
}
    2884:	c2 5f       	subi	r28, 0xF2	; 242
    2886:	dd 4f       	sbci	r29, 0xFD	; 253
    2888:	e4 e0       	ldi	r30, 0x04	; 4
    288a:	0c 94 b8 51 	jmp	0xa370	; 0xa370 <__epilogue_restores__+0x1c>

0000288e <set_pos_func>:
	func_is_in_EEPROM = false;
    
}


void set_pos_func(uint8_t func_channel, uint8_t func_id) {
    288e:	ae e0       	ldi	r26, 0x0E	; 14
    2890:	b2 e0       	ldi	r27, 0x02	; 2
    2892:	ed e4       	ldi	r30, 0x4D	; 77
    2894:	f4 e1       	ldi	r31, 0x14	; 20
    2896:	0c 94 9c 51 	jmp	0xa338	; 0xa338 <__prologue_saves__+0x1c>
    289a:	08 2f       	mov	r16, r24
    289c:	16 2f       	mov	r17, r22
    uint8_t posFuncBuff[512];
//	uint8_t	SZ_TBL = 100;
//	DWORD lktbl[SZ_TBL];                   /* Link map table buffer */
    
    
    if (func_id < 10)
    289e:	6a 30       	cpi	r22, 0x0A	; 10
    28a0:	80 f4       	brcc	.+32     	; 0x28c2 <set_pos_func+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <set_pos_func+0x16>
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <set_pos_func+0x18>
    28a6:	ed b7       	in	r30, 0x3d	; 61
    28a8:	fe b7       	in	r31, 0x3e	; 62
    28aa:	31 96       	adiw	r30, 0x01	; 1
    28ac:	ce 01       	movw	r24, r28
    28ae:	03 96       	adiw	r24, 0x03	; 3
    28b0:	ad b7       	in	r26, 0x3d	; 61
    28b2:	be b7       	in	r27, 0x3e	; 62
    28b4:	11 96       	adiw	r26, 0x01	; 1
    28b6:	8d 93       	st	X+, r24
    28b8:	9c 93       	st	X, r25
    28ba:	12 97       	sbiw	r26, 0x02	; 2
    28bc:	87 e2       	ldi	r24, 0x27	; 39
    28be:	90 e2       	ldi	r25, 0x20	; 32
    28c0:	1f c0       	rjmp	.+62     	; 0x2900 <set_pos_func+0x72>
    28c2:	ce 01       	movw	r24, r28
    28c4:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    28c6:	64 36       	cpi	r22, 0x64	; 100
    28c8:	70 f4       	brcc	.+28     	; 0x28e6 <set_pos_func+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <set_pos_func+0x3e>
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <set_pos_func+0x40>
    28ce:	ed b7       	in	r30, 0x3d	; 61
    28d0:	fe b7       	in	r31, 0x3e	; 62
    28d2:	31 96       	adiw	r30, 0x01	; 1
    28d4:	ad b7       	in	r26, 0x3d	; 61
    28d6:	be b7       	in	r27, 0x3e	; 62
    28d8:	11 96       	adiw	r26, 0x01	; 1
    28da:	8d 93       	st	X+, r24
    28dc:	9c 93       	st	X, r25
    28de:	12 97       	sbiw	r26, 0x02	; 2
    28e0:	85 e3       	ldi	r24, 0x35	; 53
    28e2:	90 e2       	ldi	r25, 0x20	; 32
    28e4:	0d c0       	rjmp	.+26     	; 0x2900 <set_pos_func+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <set_pos_func+0x5a>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <set_pos_func+0x5c>
    28ea:	ed b7       	in	r30, 0x3d	; 61
    28ec:	fe b7       	in	r31, 0x3e	; 62
    28ee:	31 96       	adiw	r30, 0x01	; 1
    28f0:	ad b7       	in	r26, 0x3d	; 61
    28f2:	be b7       	in	r27, 0x3e	; 62
    28f4:	11 96       	adiw	r26, 0x01	; 1
    28f6:	8d 93       	st	X+, r24
    28f8:	9c 93       	st	X, r25
    28fa:	12 97       	sbiw	r26, 0x02	; 2
    28fc:	82 e4       	ldi	r24, 0x42	; 66
    28fe:	90 e2       	ldi	r25, 0x20	; 32
    2900:	82 83       	std	Z+2, r24	; 0x02
    2902:	93 83       	std	Z+3, r25	; 0x03
    2904:	14 83       	std	Z+4, r17	; 0x04
    2906:	15 82       	std	Z+5, r1	; 0x05
    2908:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <sprintf>
    290c:	ed b7       	in	r30, 0x3d	; 61
    290e:	fe b7       	in	r31, 0x3e	; 62
    2910:	36 96       	adiw	r30, 0x06	; 6
    2912:	ed bf       	out	0x3d, r30	; 61
    2914:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    2916:	01 30       	cpi	r16, 0x01	; 1
    2918:	21 f0       	breq	.+8      	; 0x2922 <set_pos_func+0x94>
    291a:	02 30       	cpi	r16, 0x02	; 2
    291c:	09 f0       	breq	.+2      	; 0x2920 <set_pos_func+0x92>
    291e:	ea c1       	rjmp	.+980    	; 0x2cf4 <set_pos_func+0x466>
    2920:	f4 c0       	rjmp	.+488    	; 0x2b0a <set_pos_func+0x27c>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    2922:	8a e9       	ldi	r24, 0x9A	; 154
    2924:	94 e2       	ldi	r25, 0x24	; 36
    2926:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    292a:	8a e9       	ldi	r24, 0x9A	; 154
    292c:	94 e2       	ldi	r25, 0x24	; 36
    292e:	be 01       	movw	r22, r28
    2930:	6d 5f       	subi	r22, 0xFD	; 253
    2932:	7f 4f       	sbci	r23, 0xFF	; 255
    2934:	41 e0       	ldi	r20, 0x01	; 1
    2936:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
            if (res == FR_OK) {
    293a:	88 23       	and	r24, r24
    293c:	09 f0       	breq	.+2      	; 0x2940 <set_pos_func+0xb2>
    293e:	48 c0       	rjmp	.+144    	; 0x29d0 <set_pos_func+0x142>
				
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    2940:	8a e9       	ldi	r24, 0x9A	; 154
    2942:	94 e2       	ldi	r25, 0x24	; 36
    2944:	be 01       	movw	r22, r28
    2946:	61 5f       	subi	r22, 0xF1	; 241
    2948:	7f 4f       	sbci	r23, 0xFF	; 255
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	52 e0       	ldi	r21, 0x02	; 2
    294e:	9e 01       	movw	r18, r28
    2950:	2f 5f       	subi	r18, 0xFF	; 255
    2952:	3f 4f       	sbci	r19, 0xFF	; 255
    2954:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    2958:	88 23       	and	r24, r24
    295a:	99 f5       	brne	.+102    	; 0x29c2 <set_pos_func+0x134>
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	80 50       	subi	r24, 0x00	; 0
    2962:	92 40       	sbci	r25, 0x02	; 2
    2964:	71 f5       	brne	.+92     	; 0x29c2 <set_pos_func+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    2966:	8f 85       	ldd	r24, Y+15	; 0x0f
    2968:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    296c:	88 89       	ldd	r24, Y+16	; 0x10
    296e:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    2972:	89 89       	ldd	r24, Y+17	; 0x11
    2974:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    2978:	8a 89       	ldd	r24, Y+18	; 0x12
    297a:	80 93 ac 20 	sts	0x20AC, r24
                    
                    //for (tmpCnt=0; tmpCnt<func_name_len; tmpCnt++)
                    //	{func_name_x[tmpCnt] = posFuncBuff[tmpCnt+5];}
                    //func_name_x[func_name_len] = '\0';
                    
                    func_ID_X = func_id;
    297e:	10 93 0c 24 	sts	0x240C, r17
    2982:	10 92 0d 24 	sts	0x240D, r1
                    
                    Stop = 1;
    2986:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    298a:	10 92 fa 23 	sts	0x23FA, r1
                    if (quiet_mode_on == 0)
    298e:	80 91 0b 24 	lds	r24, 0x240B
    2992:	88 23       	and	r24, r24
    2994:	29 f5       	brne	.+74     	; 0x29e0 <set_pos_func+0x152>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    2996:	00 d0       	rcall	.+0      	; 0x2998 <set_pos_func+0x10a>
    2998:	0f 92       	push	r0
    299a:	ed b7       	in	r30, 0x3d	; 61
    299c:	fe b7       	in	r31, 0x3e	; 62
    299e:	31 96       	adiw	r30, 0x01	; 1
    29a0:	83 e6       	ldi	r24, 0x63	; 99
    29a2:	99 e0       	ldi	r25, 0x09	; 9
    29a4:	ad b7       	in	r26, 0x3d	; 61
    29a6:	be b7       	in	r27, 0x3e	; 62
    29a8:	11 96       	adiw	r26, 0x01	; 1
    29aa:	8d 93       	st	X+, r24
    29ac:	9c 93       	st	X, r25
    29ae:	12 97       	sbiw	r26, 0x02	; 2
    29b0:	12 83       	std	Z+2, r17	; 0x02
    29b2:	13 82       	std	Z+3, r1	; 0x03
    29b4:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <set_pos_func+0x152>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else {
                    if (quiet_mode_on == 0)
    29c2:	80 91 0b 24 	lds	r24, 0x240B
    29c6:	88 23       	and	r24, r24
    29c8:	59 f4       	brne	.+22     	; 0x29e0 <set_pos_func+0x152>
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    29ca:	86 e4       	ldi	r24, 0x46	; 70
    29cc:	99 e0       	ldi	r25, 0x09	; 9
    29ce:	06 c0       	rjmp	.+12     	; 0x29dc <set_pos_func+0x14e>
//for(cnt=0; cnt<SZ_TBL; cnt++){
//xprintf(PSTR("lktbl[%d] = %lu\n"), cnt, file2.cltbl[cnt]);
//}
				
            } else {
                if (quiet_mode_on == 0)
    29d0:	80 91 0b 24 	lds	r24, 0x240B
    29d4:	88 23       	and	r24, r24
    29d6:	21 f4       	brne	.+8      	; 0x29e0 <set_pos_func+0x152>
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    29d8:	85 e2       	ldi	r24, 0x25	; 37
    29da:	99 e0       	ldi	r25, 0x09	; 9
    29dc:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            }
			
			if (quiet_mode_on == 0)
    29e0:	80 91 0b 24 	lds	r24, 0x240B
    29e4:	88 23       	and	r24, r24
    29e6:	09 f0       	breq	.+2      	; 0x29ea <set_pos_func+0x15c>
    29e8:	89 c0       	rjmp	.+274    	; 0x2afc <set_pos_func+0x26e>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <set_pos_func+0x15e>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <set_pos_func+0x160>
    29ee:	84 e1       	ldi	r24, 0x14	; 20
    29f0:	99 e0       	ldi	r25, 0x09	; 9
    29f2:	ed b7       	in	r30, 0x3d	; 61
    29f4:	fe b7       	in	r31, 0x3e	; 62
    29f6:	81 83       	std	Z+1, r24	; 0x01
    29f8:	92 83       	std	Z+2, r25	; 0x02
    29fa:	80 91 a9 20 	lds	r24, 0x20A9
    29fe:	90 91 aa 20 	lds	r25, 0x20AA
    2a02:	a0 91 ab 20 	lds	r26, 0x20AB
    2a06:	b0 91 ac 20 	lds	r27, 0x20AC
    2a0a:	83 83       	std	Z+3, r24	; 0x03
    2a0c:	94 83       	std	Z+4, r25	; 0x04
    2a0e:	a5 83       	std	Z+5, r26	; 0x05
    2a10:	b6 83       	std	Z+6, r27	; 0x06
    2a12:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				last_load_x = funcSize_x % FUNCTION_LENGTH;
    2a16:	60 91 a9 20 	lds	r22, 0x20A9
    2a1a:	70 91 aa 20 	lds	r23, 0x20AA
    2a1e:	80 91 ab 20 	lds	r24, 0x20AB
    2a22:	90 91 ac 20 	lds	r25, 0x20AC
    2a26:	28 ec       	ldi	r18, 0xC8	; 200
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2a32:	96 95       	lsr	r25
    2a34:	87 95       	ror	r24
    2a36:	77 95       	ror	r23
    2a38:	67 95       	ror	r22
    2a3a:	60 93 10 24 	sts	0x2410, r22
    2a3e:	70 93 11 24 	sts	0x2411, r23
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	ed b7       	in	r30, 0x3d	; 61
    2a48:	fe b7       	in	r31, 0x3e	; 62
    2a4a:	31 96       	adiw	r30, 0x01	; 1
    2a4c:	22 e0       	ldi	r18, 0x02	; 2
    2a4e:	39 e0       	ldi	r19, 0x09	; 9
    2a50:	ad b7       	in	r26, 0x3d	; 61
    2a52:	be b7       	in	r27, 0x3e	; 62
    2a54:	11 96       	adiw	r26, 0x01	; 1
    2a56:	2d 93       	st	X+, r18
    2a58:	3c 93       	st	X, r19
    2a5a:	12 97       	sbiw	r26, 0x02	; 2
    2a5c:	62 83       	std	Z+2, r22	; 0x02
    2a5e:	73 83       	std	Z+3, r23	; 0x03
    2a60:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				if (last_load_x == 0){
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	80 91 10 24 	lds	r24, 0x2410
    2a70:	90 91 11 24 	lds	r25, 0x2411
    2a74:	20 91 a9 20 	lds	r18, 0x20A9
    2a78:	30 91 aa 20 	lds	r19, 0x20AA
    2a7c:	40 91 ab 20 	lds	r20, 0x20AB
    2a80:	50 91 ac 20 	lds	r21, 0x20AC
    2a84:	89 2b       	or	r24, r25
    2a86:	e1 f4       	brne	.+56     	; 0x2ac0 <set_pos_func+0x232>
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH;
    2a88:	ca 01       	movw	r24, r20
    2a8a:	b9 01       	movw	r22, r18
    2a8c:	20 e9       	ldi	r18, 0x90	; 144
    2a8e:	31 e0       	ldi	r19, 0x01	; 1
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	50 e0       	ldi	r21, 0x00	; 0
    2a94:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2a98:	20 93 b1 20 	sts	0x20B1, r18
    2a9c:	30 93 b2 20 	sts	0x20B2, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <set_pos_func+0x214>
    2aa2:	0f 92       	push	r0
    2aa4:	ed b7       	in	r30, 0x3d	; 61
    2aa6:	fe b7       	in	r31, 0x3e	; 62
    2aa8:	31 96       	adiw	r30, 0x01	; 1
    2aaa:	8a ee       	ldi	r24, 0xEA	; 234
    2aac:	98 e0       	ldi	r25, 0x08	; 8
    2aae:	ad b7       	in	r26, 0x3d	; 61
    2ab0:	be b7       	in	r27, 0x3e	; 62
    2ab2:	11 96       	adiw	r26, 0x01	; 1
    2ab4:	8d 93       	st	X+, r24
    2ab6:	9c 93       	st	X, r25
    2ab8:	12 97       	sbiw	r26, 0x02	; 2
    2aba:	22 83       	std	Z+2, r18	; 0x02
    2abc:	33 83       	std	Z+3, r19	; 0x03
    2abe:	18 c0       	rjmp	.+48     	; 0x2af0 <set_pos_func+0x262>
				}
				else{
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    2ac0:	ca 01       	movw	r24, r20
    2ac2:	b9 01       	movw	r22, r18
    2ac4:	20 e9       	ldi	r18, 0x90	; 144
    2ac6:	31 e0       	ldi	r19, 0x01	; 1
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	50 e0       	ldi	r21, 0x00	; 0
    2acc:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2ad0:	2f 5f       	subi	r18, 0xFF	; 255
    2ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad4:	20 93 b1 20 	sts	0x20B1, r18
    2ad8:	30 93 b2 20 	sts	0x20B2, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <set_pos_func+0x250>
    2ade:	0f 92       	push	r0
    2ae0:	82 ed       	ldi	r24, 0xD2	; 210
    2ae2:	98 e0       	ldi	r25, 0x08	; 8
    2ae4:	ed b7       	in	r30, 0x3d	; 61
    2ae6:	fe b7       	in	r31, 0x3e	; 62
    2ae8:	81 83       	std	Z+1, r24	; 0x01
    2aea:	92 83       	std	Z+2, r25	; 0x02
    2aec:	23 83       	std	Z+3, r18	; 0x03
    2aee:	34 83       	std	Z+4, r19	; 0x04
    2af0:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
				}
			}
			
			default_func_x = 0;
    2afc:	10 92 a1 20 	sts	0x20A1, r1
			
			//update the function buffer
			fetch_update_funcX(1,0);
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fetch_update_funcX>
    2b08:	fd c0       	rjmp	.+506    	; 0x2d04 <set_pos_func+0x476>
            break;
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    2b0a:	80 e2       	ldi	r24, 0x20	; 32
    2b0c:	96 e2       	ldi	r25, 0x26	; 38
    2b0e:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    2b12:	80 e2       	ldi	r24, 0x20	; 32
    2b14:	96 e2       	ldi	r25, 0x26	; 38
    2b16:	be 01       	movw	r22, r28
    2b18:	6d 5f       	subi	r22, 0xFD	; 253
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
            if (res == FR_OK) {
    2b22:	88 23       	and	r24, r24
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <set_pos_func+0x29a>
    2b26:	49 c0       	rjmp	.+146    	; 0x2bba <set_pos_func+0x32c>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    2b28:	80 e2       	ldi	r24, 0x20	; 32
    2b2a:	96 e2       	ldi	r25, 0x26	; 38
    2b2c:	be 01       	movw	r22, r28
    2b2e:	61 5f       	subi	r22, 0xF1	; 241
    2b30:	7f 4f       	sbci	r23, 0xFF	; 255
    2b32:	40 e0       	ldi	r20, 0x00	; 0
    2b34:	52 e0       	ldi	r21, 0x02	; 2
    2b36:	9e 01       	movw	r18, r28
    2b38:	2f 5f       	subi	r18, 0xFF	; 255
    2b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3c:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    2b40:	88 23       	and	r24, r24
    2b42:	a1 f5       	brne	.+104    	; 0x2bac <set_pos_func+0x31e>
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	9a 81       	ldd	r25, Y+2	; 0x02
    2b48:	80 50       	subi	r24, 0x00	; 0
    2b4a:	92 40       	sbci	r25, 0x02	; 2
    2b4c:	79 f5       	brne	.+94     	; 0x2bac <set_pos_func+0x31e>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    2b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b50:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    2b54:	88 89       	ldd	r24, Y+16	; 0x10
    2b56:	80 93 ae 20 	sts	0x20AE, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    2b5a:	89 89       	ldd	r24, Y+17	; 0x11
    2b5c:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    2b60:	8a 89       	ldd	r24, Y+18	; 0x12
    2b62:	80 93 b0 20 	sts	0x20B0, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_Y = func_id;
    2b66:	10 93 0e 24 	sts	0x240E, r17
    2b6a:	10 92 0f 24 	sts	0x240F, r1
                    
                    Stop = 1;
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    2b74:	10 92 fa 23 	sts	0x23FA, r1
                    if (quiet_mode_on == 0)
    2b78:	80 91 0b 24 	lds	r24, 0x240B
    2b7c:	88 23       	and	r24, r24
    2b7e:	29 f5       	brne	.+74     	; 0x2bca <set_pos_func+0x33c>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <set_pos_func+0x2f4>
    2b82:	0f 92       	push	r0
    2b84:	ed b7       	in	r30, 0x3d	; 61
    2b86:	fe b7       	in	r31, 0x3e	; 62
    2b88:	31 96       	adiw	r30, 0x01	; 1
    2b8a:	8e ea       	ldi	r24, 0xAE	; 174
    2b8c:	98 e0       	ldi	r25, 0x08	; 8
    2b8e:	ad b7       	in	r26, 0x3d	; 61
    2b90:	be b7       	in	r27, 0x3e	; 62
    2b92:	11 96       	adiw	r26, 0x01	; 1
    2b94:	8d 93       	st	X+, r24
    2b96:	9c 93       	st	X, r25
    2b98:	12 97       	sbiw	r26, 0x02	; 2
    2b9a:	12 83       	std	Z+2, r17	; 0x02
    2b9c:	13 82       	std	Z+3, r1	; 0x03
    2b9e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <set_pos_func+0x33c>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                    if (quiet_mode_on == 0)
    2bac:	80 91 0b 24 	lds	r24, 0x240B
    2bb0:	88 23       	and	r24, r24
    2bb2:	59 f4       	brne	.+22     	; 0x2bca <set_pos_func+0x33c>
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    2bb4:	80 e9       	ldi	r24, 0x90	; 144
    2bb6:	98 e0       	ldi	r25, 0x08	; 8
    2bb8:	06 c0       	rjmp	.+12     	; 0x2bc6 <set_pos_func+0x338>
                }
            } else {
                if (quiet_mode_on == 0)
    2bba:	80 91 0b 24 	lds	r24, 0x240B
    2bbe:	88 23       	and	r24, r24
    2bc0:	21 f4       	brne	.+8      	; 0x2bca <set_pos_func+0x33c>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    2bc2:	8f e6       	ldi	r24, 0x6F	; 111
    2bc4:	98 e0       	ldi	r25, 0x08	; 8
    2bc6:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            }
			
			if (quiet_mode_on == 0){
    2bca:	80 91 0b 24 	lds	r24, 0x240B
    2bce:	88 23       	and	r24, r24
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <set_pos_func+0x346>
    2bd2:	89 c0       	rjmp	.+274    	; 0x2ce6 <set_pos_func+0x458>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <set_pos_func+0x348>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <set_pos_func+0x34a>
    2bd8:	8e e5       	ldi	r24, 0x5E	; 94
    2bda:	98 e0       	ldi	r25, 0x08	; 8
    2bdc:	ed b7       	in	r30, 0x3d	; 61
    2bde:	fe b7       	in	r31, 0x3e	; 62
    2be0:	81 83       	std	Z+1, r24	; 0x01
    2be2:	92 83       	std	Z+2, r25	; 0x02
    2be4:	80 91 ad 20 	lds	r24, 0x20AD
    2be8:	90 91 ae 20 	lds	r25, 0x20AE
    2bec:	a0 91 af 20 	lds	r26, 0x20AF
    2bf0:	b0 91 b0 20 	lds	r27, 0x20B0
    2bf4:	83 83       	std	Z+3, r24	; 0x03
    2bf6:	94 83       	std	Z+4, r25	; 0x04
    2bf8:	a5 83       	std	Z+5, r26	; 0x05
    2bfa:	b6 83       	std	Z+6, r27	; 0x06
    2bfc:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				last_load_y = funcSize_y % FUNCTION_LENGTH;
    2c00:	60 91 ad 20 	lds	r22, 0x20AD
    2c04:	70 91 ae 20 	lds	r23, 0x20AE
    2c08:	80 91 af 20 	lds	r24, 0x20AF
    2c0c:	90 91 b0 20 	lds	r25, 0x20B0
    2c10:	28 ec       	ldi	r18, 0xC8	; 200
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2c1c:	96 95       	lsr	r25
    2c1e:	87 95       	ror	r24
    2c20:	77 95       	ror	r23
    2c22:	67 95       	ror	r22
    2c24:	60 93 12 24 	sts	0x2412, r22
    2c28:	70 93 13 24 	sts	0x2413, r23
				xprintf(PSTR("last_load_y = %u \n"), last_load_y);
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	ed b7       	in	r30, 0x3d	; 61
    2c32:	fe b7       	in	r31, 0x3e	; 62
    2c34:	31 96       	adiw	r30, 0x01	; 1
    2c36:	2b e4       	ldi	r18, 0x4B	; 75
    2c38:	38 e0       	ldi	r19, 0x08	; 8
    2c3a:	ad b7       	in	r26, 0x3d	; 61
    2c3c:	be b7       	in	r27, 0x3e	; 62
    2c3e:	11 96       	adiw	r26, 0x01	; 1
    2c40:	2d 93       	st	X+, r18
    2c42:	3c 93       	st	X, r19
    2c44:	12 97       	sbiw	r26, 0x02	; 2
    2c46:	62 83       	std	Z+2, r22	; 0x02
    2c48:	73 83       	std	Z+3, r23	; 0x03
    2c4a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				if (last_load_y == 0){
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	80 91 12 24 	lds	r24, 0x2412
    2c5a:	90 91 13 24 	lds	r25, 0x2413
    2c5e:	20 91 ad 20 	lds	r18, 0x20AD
    2c62:	30 91 ae 20 	lds	r19, 0x20AE
    2c66:	40 91 af 20 	lds	r20, 0x20AF
    2c6a:	50 91 b0 20 	lds	r21, 0x20B0
    2c6e:	89 2b       	or	r24, r25
    2c70:	e1 f4       	brne	.+56     	; 0x2caa <set_pos_func+0x41c>
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;
    2c72:	ca 01       	movw	r24, r20
    2c74:	b9 01       	movw	r22, r18
    2c76:	20 e9       	ldi	r18, 0x90	; 144
    2c78:	31 e0       	ldi	r19, 0x01	; 1
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2c82:	20 93 b3 20 	sts	0x20B3, r18
    2c86:	30 93 b4 20 	sts	0x20B4, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <set_pos_func+0x3fe>
    2c8c:	0f 92       	push	r0
    2c8e:	ed b7       	in	r30, 0x3d	; 61
    2c90:	fe b7       	in	r31, 0x3e	; 62
    2c92:	31 96       	adiw	r30, 0x01	; 1
    2c94:	83 e3       	ldi	r24, 0x33	; 51
    2c96:	98 e0       	ldi	r25, 0x08	; 8
    2c98:	ad b7       	in	r26, 0x3d	; 61
    2c9a:	be b7       	in	r27, 0x3e	; 62
    2c9c:	11 96       	adiw	r26, 0x01	; 1
    2c9e:	8d 93       	st	X+, r24
    2ca0:	9c 93       	st	X, r25
    2ca2:	12 97       	sbiw	r26, 0x02	; 2
    2ca4:	22 83       	std	Z+2, r18	; 0x02
    2ca6:	33 83       	std	Z+3, r19	; 0x03
    2ca8:	18 c0       	rjmp	.+48     	; 0x2cda <set_pos_func+0x44c>
				}
				else{
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    2caa:	ca 01       	movw	r24, r20
    2cac:	b9 01       	movw	r22, r18
    2cae:	20 e9       	ldi	r18, 0x90	; 144
    2cb0:	31 e0       	ldi	r19, 0x01	; 1
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    2cba:	2f 5f       	subi	r18, 0xFF	; 255
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	20 93 b3 20 	sts	0x20B3, r18
    2cc2:	30 93 b4 20 	sts	0x20B4, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <set_pos_func+0x43a>
    2cc8:	0f 92       	push	r0
    2cca:	8b e1       	ldi	r24, 0x1B	; 27
    2ccc:	98 e0       	ldi	r25, 0x08	; 8
    2cce:	ed b7       	in	r30, 0x3d	; 61
    2cd0:	fe b7       	in	r31, 0x3e	; 62
    2cd2:	81 83       	std	Z+1, r24	; 0x01
    2cd4:	92 83       	std	Z+2, r25	; 0x02
    2cd6:	23 83       	std	Z+3, r18	; 0x03
    2cd8:	34 83       	std	Z+4, r19	; 0x04
    2cda:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
				}
			}
			
			default_func_y = 0;
    2ce6:	10 92 a2 20 	sts	0x20A2, r1
			
			//update the function buffer
			fetch_update_funcY(1,0);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	0e 94 67 0e 	call	0x1cce	; 0x1cce <fetch_update_funcY>
    2cf2:	08 c0       	rjmp	.+16     	; 0x2d04 <set_pos_func+0x476>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    2cf4:	80 91 0b 24 	lds	r24, 0x240B
    2cf8:	88 23       	and	r24, r24
    2cfa:	21 f4       	brne	.+8      	; 0x2d04 <set_pos_func+0x476>
                xputs(PSTR("Error input for function channel.\n"));
    2cfc:	88 ef       	ldi	r24, 0xF8	; 248
    2cfe:	97 e0       	ldi	r25, 0x07	; 7
    2d00:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            break;
    }
	func_is_in_EEPROM = false;
    2d04:	10 92 ff 23 	sts	0x23FF, r1
}
    2d08:	c2 5f       	subi	r28, 0xF2	; 242
    2d0a:	dd 4f       	sbci	r29, 0xFD	; 253
    2d0c:	e4 e0       	ldi	r30, 0x04	; 4
    2d0e:	0c 94 b8 51 	jmp	0xa370	; 0xa370 <__epilogue_restores__+0x1c>

00002d12 <set_pos_func_in_EEPROM>:

void set_pos_func_in_EEPROM(uint8_t func_channel, uint8_t func_id) {
    2d12:	ae e0       	ldi	r26, 0x0E	; 14
    2d14:	b2 e0       	ldi	r27, 0x02	; 2
    2d16:	ef e8       	ldi	r30, 0x8F	; 143
    2d18:	f6 e1       	ldi	r31, 0x16	; 22
    2d1a:	0c 94 96 51 	jmp	0xa32c	; 0xa32c <__prologue_saves__+0x10>
    2d1e:	08 2f       	mov	r16, r24
    2d20:	16 2f       	mov	r17, r22
    uint8_t str[12];
    uint8_t res, func_name_len;
    uint8_t posFuncBuff[512];
    
    
    if (func_id < 10)
    2d22:	6a 30       	cpi	r22, 0x0A	; 10
    2d24:	80 f4       	brcc	.+32     	; 0x2d46 <set_pos_func_in_EEPROM+0x34>
        sprintf(str, "pos000%d.fun\0", func_id);
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <set_pos_func_in_EEPROM+0x16>
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <set_pos_func_in_EEPROM+0x18>
    2d2a:	ed b7       	in	r30, 0x3d	; 61
    2d2c:	fe b7       	in	r31, 0x3e	; 62
    2d2e:	31 96       	adiw	r30, 0x01	; 1
    2d30:	ce 01       	movw	r24, r28
    2d32:	03 96       	adiw	r24, 0x03	; 3
    2d34:	ad b7       	in	r26, 0x3d	; 61
    2d36:	be b7       	in	r27, 0x3e	; 62
    2d38:	11 96       	adiw	r26, 0x01	; 1
    2d3a:	8d 93       	st	X+, r24
    2d3c:	9c 93       	st	X, r25
    2d3e:	12 97       	sbiw	r26, 0x02	; 2
    2d40:	87 e2       	ldi	r24, 0x27	; 39
    2d42:	90 e2       	ldi	r25, 0x20	; 32
    2d44:	1f c0       	rjmp	.+62     	; 0x2d84 <set_pos_func_in_EEPROM+0x72>
    2d46:	ce 01       	movw	r24, r28
    2d48:	03 96       	adiw	r24, 0x03	; 3
    else if (func_id < 100)
    2d4a:	64 36       	cpi	r22, 0x64	; 100
    2d4c:	70 f4       	brcc	.+28     	; 0x2d6a <set_pos_func_in_EEPROM+0x58>
        sprintf(str, "pos00%d.fun\0", func_id);
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <set_pos_func_in_EEPROM+0x3e>
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <set_pos_func_in_EEPROM+0x40>
    2d52:	ed b7       	in	r30, 0x3d	; 61
    2d54:	fe b7       	in	r31, 0x3e	; 62
    2d56:	31 96       	adiw	r30, 0x01	; 1
    2d58:	ad b7       	in	r26, 0x3d	; 61
    2d5a:	be b7       	in	r27, 0x3e	; 62
    2d5c:	11 96       	adiw	r26, 0x01	; 1
    2d5e:	8d 93       	st	X+, r24
    2d60:	9c 93       	st	X, r25
    2d62:	12 97       	sbiw	r26, 0x02	; 2
    2d64:	85 e3       	ldi	r24, 0x35	; 53
    2d66:	90 e2       	ldi	r25, 0x20	; 32
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <set_pos_func_in_EEPROM+0x72>
    else if (func_id < 1000)
        sprintf(str, "pos0%d.fun\0", func_id);
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <set_pos_func_in_EEPROM+0x5a>
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <set_pos_func_in_EEPROM+0x5c>
    2d6e:	ed b7       	in	r30, 0x3d	; 61
    2d70:	fe b7       	in	r31, 0x3e	; 62
    2d72:	31 96       	adiw	r30, 0x01	; 1
    2d74:	ad b7       	in	r26, 0x3d	; 61
    2d76:	be b7       	in	r27, 0x3e	; 62
    2d78:	11 96       	adiw	r26, 0x01	; 1
    2d7a:	8d 93       	st	X+, r24
    2d7c:	9c 93       	st	X, r25
    2d7e:	12 97       	sbiw	r26, 0x02	; 2
    2d80:	82 e4       	ldi	r24, 0x42	; 66
    2d82:	90 e2       	ldi	r25, 0x20	; 32
    2d84:	82 83       	std	Z+2, r24	; 0x02
    2d86:	93 83       	std	Z+3, r25	; 0x03
    2d88:	14 83       	std	Z+4, r17	; 0x04
    2d8a:	15 82       	std	Z+5, r1	; 0x05
    2d8c:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <sprintf>
    2d90:	ed b7       	in	r30, 0x3d	; 61
    2d92:	fe b7       	in	r31, 0x3e	; 62
    2d94:	36 96       	adiw	r30, 0x06	; 6
    2d96:	ed bf       	out	0x3d, r30	; 61
    2d98:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("function id is too big.\n"));
    
    switch(func_channel) {
    2d9a:	01 30       	cpi	r16, 0x01	; 1
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <set_pos_func_in_EEPROM+0x94>
    2d9e:	02 30       	cpi	r16, 0x02	; 2
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <set_pos_func_in_EEPROM+0x92>
    2da2:	20 c3       	rjmp	.+1600   	; 0x33e4 <set_pos_func_in_EEPROM+0x6d2>
    2da4:	2a c2       	rjmp	.+1108   	; 0x31fa <set_pos_func_in_EEPROM+0x4e8>
        case 1:    //channel x
            //read the header block and send back the function name
            //Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);//disable ISR
            
            res = f_close(&file2);
    2da6:	8a e9       	ldi	r24, 0x9A	; 154
    2da8:	94 e2       	ldi	r25, 0x24	; 36
    2daa:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
            
            res = f_open(&file2, str, FA_OPEN_EXISTING | FA_READ);
    2dae:	8a e9       	ldi	r24, 0x9A	; 154
    2db0:	94 e2       	ldi	r25, 0x24	; 36
    2db2:	be 01       	movw	r22, r28
    2db4:	6d 5f       	subi	r22, 0xFD	; 253
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
            if (res == FR_OK) {
    2dbe:	88 23       	and	r24, r24
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <set_pos_func_in_EEPROM+0xb2>
    2dc2:	48 c0       	rjmp	.+144    	; 0x2e54 <set_pos_func_in_EEPROM+0x142>
				
                res = f_read(&file2, posFuncBuff, 512, &cnt);
    2dc4:	8a e9       	ldi	r24, 0x9A	; 154
    2dc6:	94 e2       	ldi	r25, 0x24	; 36
    2dc8:	be 01       	movw	r22, r28
    2dca:	61 5f       	subi	r22, 0xF1	; 241
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	52 e0       	ldi	r21, 0x02	; 2
    2dd2:	9e 01       	movw	r18, r28
    2dd4:	2f 5f       	subi	r18, 0xFF	; 255
    2dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd8:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    2ddc:	88 23       	and	r24, r24
    2dde:	99 f5       	brne	.+102    	; 0x2e46 <set_pos_func_in_EEPROM+0x134>
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	80 50       	subi	r24, 0x00	; 0
    2de6:	92 40       	sbci	r25, 0x02	; 2
    2de8:	71 f5       	brne	.+92     	; 0x2e46 <set_pos_func_in_EEPROM+0x134>
                    // get the test header info
                    ((uint8_t*)&funcSize_x)[0] = posFuncBuff[0];
    2dea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dec:	80 93 a9 20 	sts	0x20A9, r24
                    ((uint8_t*)&funcSize_x)[1] = posFuncBuff[1];
    2df0:	88 89       	ldd	r24, Y+16	; 0x10
    2df2:	80 93 aa 20 	sts	0x20AA, r24
                    ((uint8_t*)&funcSize_x)[2] = posFuncBuff[2];
    2df6:	89 89       	ldd	r24, Y+17	; 0x11
    2df8:	80 93 ab 20 	sts	0x20AB, r24
                    ((uint8_t*)&funcSize_x)[3] = posFuncBuff[3];
    2dfc:	8a 89       	ldd	r24, Y+18	; 0x12
    2dfe:	80 93 ac 20 	sts	0x20AC, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_X = func_id;
    2e02:	10 93 0c 24 	sts	0x240C, r17
    2e06:	10 92 0d 24 	sts	0x240D, r1
                    
                    Stop = 1;
    2e0a:	00 93 9c 20 	sts	0x209C, r16
                    display_flag = 0;  //clear the display flag
    2e0e:	10 92 fa 23 	sts	0x23FA, r1
                    if (quiet_mode_on == 0)
    2e12:	80 91 0b 24 	lds	r24, 0x240B
    2e16:	88 23       	and	r24, r24
    2e18:	29 f5       	brne	.+74     	; 0x2e64 <set_pos_func_in_EEPROM+0x152>
                        xprintf(PSTR("Setting position function %u for X\n"), func_id);
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <set_pos_func_in_EEPROM+0x10a>
    2e1c:	0f 92       	push	r0
    2e1e:	ed b7       	in	r30, 0x3d	; 61
    2e20:	fe b7       	in	r31, 0x3e	; 62
    2e22:	31 96       	adiw	r30, 0x01	; 1
    2e24:	84 ed       	ldi	r24, 0xD4	; 212
    2e26:	97 e0       	ldi	r25, 0x07	; 7
    2e28:	ad b7       	in	r26, 0x3d	; 61
    2e2a:	be b7       	in	r27, 0x3e	; 62
    2e2c:	11 96       	adiw	r26, 0x01	; 1
    2e2e:	8d 93       	st	X+, r24
    2e30:	9c 93       	st	X, r25
    2e32:	12 97       	sbiw	r26, 0x02	; 2
    2e34:	12 83       	std	Z+2, r17	; 0x02
    2e36:	13 82       	std	Z+3, r1	; 0x03
    2e38:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f c0       	rjmp	.+30     	; 0x2e64 <set_pos_func_in_EEPROM+0x152>
                    //xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"),
                    //        func_name_x, funcSize_x);
                    
                } else {
                    if (quiet_mode_on == 0)
    2e46:	80 91 0b 24 	lds	r24, 0x240B
    2e4a:	88 23       	and	r24, r24
    2e4c:	59 f4       	brne	.+22     	; 0x2e64 <set_pos_func_in_EEPROM+0x152>
                        xputs(PSTR("Error f_read set_pos_func X\n"));
    2e4e:	87 eb       	ldi	r24, 0xB7	; 183
    2e50:	97 e0       	ldi	r25, 0x07	; 7
    2e52:	06 c0       	rjmp	.+12     	; 0x2e60 <set_pos_func_in_EEPROM+0x14e>
                }

				
            } else {
                if (quiet_mode_on == 0)
    2e54:	80 91 0b 24 	lds	r24, 0x240B
    2e58:	88 23       	and	r24, r24
    2e5a:	21 f4       	brne	.+8      	; 0x2e64 <set_pos_func_in_EEPROM+0x152>
                    xputs(PSTR("Error f_open in set_pos_func X.\n"));
    2e5c:	86 e9       	ldi	r24, 0x96	; 150
    2e5e:	97 e0       	ldi	r25, 0x07	; 7
    2e60:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            }
			
			if (funcSize_x > 1000){
    2e64:	20 91 a9 20 	lds	r18, 0x20A9
    2e68:	30 91 aa 20 	lds	r19, 0x20AA
    2e6c:	40 91 ab 20 	lds	r20, 0x20AB
    2e70:	50 91 ac 20 	lds	r21, 0x20AC
    2e74:	29 3e       	cpi	r18, 0xE9	; 233
    2e76:	b3 e0       	ldi	r27, 0x03	; 3
    2e78:	3b 07       	cpc	r19, r27
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	4b 07       	cpc	r20, r27
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	5b 07       	cpc	r21, r27
    2e82:	18 f0       	brcs	.+6      	; 0x2e8a <set_pos_func_in_EEPROM+0x178>
				xputs(PSTR("function size is too big to load to EEPROM.\n"));
    2e84:	89 e6       	ldi	r24, 0x69	; 105
    2e86:	97 e0       	ldi	r25, 0x07	; 7
    2e88:	b3 c2       	rjmp	.+1382   	; 0x33f0 <set_pos_func_in_EEPROM+0x6de>
    2e8a:	be 01       	movw	r22, r28
    2e8c:	61 5f       	subi	r22, 0xF1	; 241
    2e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e90:	fe 01       	movw	r30, r28
    2e92:	31 96       	adiw	r30, 0x01	; 1
				return;
				}
			else{
	
		//load 1000 bytes data to temBuff
		if (funcSize_x>512){
    2e94:	21 30       	cpi	r18, 0x01	; 1
    2e96:	82 e0       	ldi	r24, 0x02	; 2
    2e98:	38 07       	cpc	r19, r24
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	48 07       	cpc	r20, r24
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	58 07       	cpc	r21, r24
    2ea2:	08 f4       	brcc	.+2      	; 0x2ea6 <set_pos_func_in_EEPROM+0x194>
    2ea4:	b3 c0       	rjmp	.+358    	; 0x300c <set_pos_func_in_EEPROM+0x2fa>
			res = f_read(&file2, posFuncBuff, 512, &cnt);
    2ea6:	8a e9       	ldi	r24, 0x9A	; 154
    2ea8:	94 e2       	ldi	r25, 0x24	; 36
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	52 e0       	ldi	r21, 0x02	; 2
    2eae:	9f 01       	movw	r18, r30
    2eb0:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    2eb4:	28 2f       	mov	r18, r24
			if (!((res == FR_OK) && (cnt == 512))) {
    2eb6:	88 23       	and	r24, r24
    2eb8:	29 f4       	brne	.+10     	; 0x2ec4 <set_pos_func_in_EEPROM+0x1b2>
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	80 50       	subi	r24, 0x00	; 0
    2ec0:	92 40       	sbci	r25, 0x02	; 2
    2ec2:	e9 f0       	breq	.+58     	; 0x2efe <set_pos_func_in_EEPROM+0x1ec>
		
			if (quiet_mode_on == 0){
    2ec4:	80 91 0b 24 	lds	r24, 0x240B
    2ec8:	88 23       	and	r24, r24
    2eca:	c9 f4       	brne	.+50     	; 0x2efe <set_pos_func_in_EEPROM+0x1ec>
				xprintf(PSTR("res =  %u\n"), res);
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <set_pos_func_in_EEPROM+0x1bc>
    2ece:	0f 92       	push	r0
    2ed0:	ed b7       	in	r30, 0x3d	; 61
    2ed2:	fe b7       	in	r31, 0x3e	; 62
    2ed4:	31 96       	adiw	r30, 0x01	; 1
    2ed6:	8e e5       	ldi	r24, 0x5E	; 94
    2ed8:	97 e0       	ldi	r25, 0x07	; 7
    2eda:	ad b7       	in	r26, 0x3d	; 61
    2edc:	be b7       	in	r27, 0x3e	; 62
    2ede:	11 96       	adiw	r26, 0x01	; 1
    2ee0:	8d 93       	st	X+, r24
    2ee2:	9c 93       	st	X, r25
    2ee4:	12 97       	sbiw	r26, 0x02	; 2
    2ee6:	22 83       	std	Z+2, r18	; 0x02
    2ee8:	13 82       	std	Z+3, r1	; 0x03
    2eea:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	84 e3       	ldi	r24, 0x34	; 52
    2ef8:	97 e0       	ldi	r25, 0x07	; 7
    2efa:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    2efe:	00 e0       	ldi	r16, 0x00	; 0
    2f00:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
			
		for (j = 0; j< 512; j++){
			eeprom_write_byte(fun_x_EEPROM + j,posFuncBuff[j]);
    2f02:	2f e0       	ldi	r18, 0x0F	; 15
    2f04:	e2 2e       	mov	r14, r18
    2f06:	f1 2c       	mov	r15, r1
    2f08:	ec 0e       	add	r14, r28
    2f0a:	fd 1e       	adc	r15, r29
    2f0c:	f7 01       	movw	r30, r14
    2f0e:	e0 0f       	add	r30, r16
    2f10:	f1 1f       	adc	r31, r17
    2f12:	c8 01       	movw	r24, r16
    2f14:	8e 57       	subi	r24, 0x7E	; 126
    2f16:	9f 4f       	sbci	r25, 0xFF	; 255
    2f18:	60 81       	ld	r22, Z
    2f1a:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
				xprintf(PSTR("res =  %u\n"), res);
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
			}
		}
			
		for (j = 0; j< 512; j++){
    2f1e:	0f 5f       	subi	r16, 0xFF	; 255
    2f20:	1f 4f       	sbci	r17, 0xFF	; 255
    2f22:	b2 e0       	ldi	r27, 0x02	; 2
    2f24:	00 30       	cpi	r16, 0x00	; 0
    2f26:	1b 07       	cpc	r17, r27
    2f28:	89 f7       	brne	.-30     	; 0x2f0c <set_pos_func_in_EEPROM+0x1fa>
			eeprom_write_byte(fun_x_EEPROM + j,posFuncBuff[j]);
//xprintf(PSTR(" fun_x_EEPROM[ %d]=  %u\n"),j, posFuncBuff[j]);
		}
		
			res = f_read(&file2, posFuncBuff, funcSize_x - 512, &cnt);
    2f2a:	40 91 a9 20 	lds	r20, 0x20A9
    2f2e:	50 91 aa 20 	lds	r21, 0x20AA
    2f32:	40 50       	subi	r20, 0x00	; 0
    2f34:	52 40       	sbci	r21, 0x02	; 2
    2f36:	8a e9       	ldi	r24, 0x9A	; 154
    2f38:	94 e2       	ldi	r25, 0x24	; 36
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	9e 01       	movw	r18, r28
    2f3e:	2f 5f       	subi	r18, 0xFF	; 255
    2f40:	3f 4f       	sbci	r19, 0xFF	; 255
    2f42:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    2f46:	68 2f       	mov	r22, r24
			if (!((res == FR_OK) && (cnt == funcSize_x - 512))) {
    2f48:	88 23       	and	r24, r24
    2f4a:	a9 f4       	brne	.+42     	; 0x2f76 <set_pos_func_in_EEPROM+0x264>
    2f4c:	29 81       	ldd	r18, Y+1	; 0x01
    2f4e:	3a 81       	ldd	r19, Y+2	; 0x02
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	80 91 a9 20 	lds	r24, 0x20A9
    2f58:	90 91 aa 20 	lds	r25, 0x20AA
    2f5c:	a0 91 ab 20 	lds	r26, 0x20AB
    2f60:	b0 91 ac 20 	lds	r27, 0x20AC
    2f64:	80 50       	subi	r24, 0x00	; 0
    2f66:	92 40       	sbci	r25, 0x02	; 2
    2f68:	a0 40       	sbci	r26, 0x00	; 0
    2f6a:	b0 40       	sbci	r27, 0x00	; 0
    2f6c:	28 17       	cp	r18, r24
    2f6e:	39 07       	cpc	r19, r25
    2f70:	4a 07       	cpc	r20, r26
    2f72:	5b 07       	cpc	r21, r27
    2f74:	e9 f0       	breq	.+58     	; 0x2fb0 <set_pos_func_in_EEPROM+0x29e>
		
			if (quiet_mode_on == 0){
    2f76:	80 91 0b 24 	lds	r24, 0x240B
    2f7a:	88 23       	and	r24, r24
    2f7c:	c9 f4       	brne	.+50     	; 0x2fb0 <set_pos_func_in_EEPROM+0x29e>
				xprintf(PSTR("res =  %u\n"), res);
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <set_pos_func_in_EEPROM+0x26e>
    2f80:	0f 92       	push	r0
    2f82:	ed b7       	in	r30, 0x3d	; 61
    2f84:	fe b7       	in	r31, 0x3e	; 62
    2f86:	31 96       	adiw	r30, 0x01	; 1
    2f88:	89 e2       	ldi	r24, 0x29	; 41
    2f8a:	97 e0       	ldi	r25, 0x07	; 7
    2f8c:	ad b7       	in	r26, 0x3d	; 61
    2f8e:	be b7       	in	r27, 0x3e	; 62
    2f90:	11 96       	adiw	r26, 0x01	; 1
    2f92:	8d 93       	st	X+, r24
    2f94:	9c 93       	st	X, r25
    2f96:	12 97       	sbiw	r26, 0x02	; 2
    2f98:	62 83       	std	Z+2, r22	; 0x02
    2f9a:	13 82       	std	Z+3, r1	; 0x03
    2f9c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	8f ef       	ldi	r24, 0xFF	; 255
    2faa:	96 e0       	ldi	r25, 0x06	; 6
    2fac:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    2fb0:	92 e8       	ldi	r25, 0x82	; 130
    2fb2:	c9 2e       	mov	r12, r25
    2fb4:	92 e0       	ldi	r25, 0x02	; 2
    2fb6:	d9 2e       	mov	r13, r25
    2fb8:	ee 24       	eor	r14, r14
    2fba:	ff 24       	eor	r15, r15
    2fbc:	87 01       	movw	r16, r14
			}
		}
			
		for (j = 0; j< funcSize_x - 512; j++){
			eeprom_write_byte(fun_x_EEPROM + 512 + j,posFuncBuff[j]);
    2fbe:	8f e0       	ldi	r24, 0x0F	; 15
    2fc0:	a8 2e       	mov	r10, r24
    2fc2:	b1 2c       	mov	r11, r1
    2fc4:	ac 0e       	add	r10, r28
    2fc6:	bd 1e       	adc	r11, r29
    2fc8:	0f c0       	rjmp	.+30     	; 0x2fe8 <set_pos_func_in_EEPROM+0x2d6>
    2fca:	f5 01       	movw	r30, r10
    2fcc:	ee 0d       	add	r30, r14
    2fce:	ff 1d       	adc	r31, r15
    2fd0:	c6 01       	movw	r24, r12
    2fd2:	60 81       	ld	r22, Z
    2fd4:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
    2fd8:	08 94       	sec
    2fda:	e1 1c       	adc	r14, r1
    2fdc:	f1 1c       	adc	r15, r1
    2fde:	01 1d       	adc	r16, r1
    2fe0:	11 1d       	adc	r17, r1
    2fe2:	08 94       	sec
    2fe4:	c1 1c       	adc	r12, r1
    2fe6:	d1 1c       	adc	r13, r1
				xprintf(PSTR("res =  %u\n"), res);
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
			}
		}
			
		for (j = 0; j< funcSize_x - 512; j++){
    2fe8:	80 91 a9 20 	lds	r24, 0x20A9
    2fec:	90 91 aa 20 	lds	r25, 0x20AA
    2ff0:	a0 91 ab 20 	lds	r26, 0x20AB
    2ff4:	b0 91 ac 20 	lds	r27, 0x20AC
    2ff8:	80 50       	subi	r24, 0x00	; 0
    2ffa:	92 40       	sbci	r25, 0x02	; 2
    2ffc:	a0 40       	sbci	r26, 0x00	; 0
    2ffe:	b0 40       	sbci	r27, 0x00	; 0
    3000:	e8 16       	cp	r14, r24
    3002:	f9 06       	cpc	r15, r25
    3004:	0a 07       	cpc	r16, r26
    3006:	1b 07       	cpc	r17, r27
    3008:	00 f3       	brcs	.-64     	; 0x2fca <set_pos_func_in_EEPROM+0x2b8>
    300a:	60 c0       	rjmp	.+192    	; 0x30cc <set_pos_func_in_EEPROM+0x3ba>
//xprintf(PSTR(" fun_x_EEPROM[ %d]=  %u\n"),512+j, posFuncBuff[j]);			
		}
		
		}
		else{
					res = f_read(&file2, posFuncBuff, funcSize_x, &cnt);
    300c:	8a e9       	ldi	r24, 0x9A	; 154
    300e:	94 e2       	ldi	r25, 0x24	; 36
    3010:	a9 01       	movw	r20, r18
    3012:	9f 01       	movw	r18, r30
    3014:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    3018:	68 2f       	mov	r22, r24
			if (!((res == FR_OK) && (cnt == funcSize_x))) {
    301a:	88 23       	and	r24, r24
    301c:	89 f4       	brne	.+34     	; 0x3040 <set_pos_func_in_EEPROM+0x32e>
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	a0 e0       	ldi	r26, 0x00	; 0
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	20 91 a9 20 	lds	r18, 0x20A9
    302a:	30 91 aa 20 	lds	r19, 0x20AA
    302e:	40 91 ab 20 	lds	r20, 0x20AB
    3032:	50 91 ac 20 	lds	r21, 0x20AC
    3036:	82 17       	cp	r24, r18
    3038:	93 07       	cpc	r25, r19
    303a:	a4 07       	cpc	r26, r20
    303c:	b5 07       	cpc	r27, r21
    303e:	e9 f0       	breq	.+58     	; 0x307a <set_pos_func_in_EEPROM+0x368>
		
			if (quiet_mode_on == 0){
    3040:	80 91 0b 24 	lds	r24, 0x240B
    3044:	88 23       	and	r24, r24
    3046:	c9 f4       	brne	.+50     	; 0x307a <set_pos_func_in_EEPROM+0x368>
				xprintf(PSTR("res =  %u\n"), res);
    3048:	00 d0       	rcall	.+0      	; 0x304a <set_pos_func_in_EEPROM+0x338>
    304a:	0f 92       	push	r0
    304c:	ed b7       	in	r30, 0x3d	; 61
    304e:	fe b7       	in	r31, 0x3e	; 62
    3050:	31 96       	adiw	r30, 0x01	; 1
    3052:	84 ef       	ldi	r24, 0xF4	; 244
    3054:	96 e0       	ldi	r25, 0x06	; 6
    3056:	ad b7       	in	r26, 0x3d	; 61
    3058:	be b7       	in	r27, 0x3e	; 62
    305a:	11 96       	adiw	r26, 0x01	; 1
    305c:	8d 93       	st	X+, r24
    305e:	9c 93       	st	X, r25
    3060:	12 97       	sbiw	r26, 0x02	; 2
    3062:	62 83       	std	Z+2, r22	; 0x02
    3064:	13 82       	std	Z+3, r1	; 0x03
    3066:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	8a ec       	ldi	r24, 0xCA	; 202
    3074:	96 e0       	ldi	r25, 0x06	; 6
    3076:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    307a:	b2 e8       	ldi	r27, 0x82	; 130
    307c:	cb 2e       	mov	r12, r27
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	db 2e       	mov	r13, r27
    3082:	ee 24       	eor	r14, r14
    3084:	ff 24       	eor	r15, r15
    3086:	87 01       	movw	r16, r14
			}
		}
			
		for (j = 0; j< funcSize_x; j++){
			eeprom_write_byte(fun_x_EEPROM + j,posFuncBuff[j]);
    3088:	af e0       	ldi	r26, 0x0F	; 15
    308a:	aa 2e       	mov	r10, r26
    308c:	b1 2c       	mov	r11, r1
    308e:	ac 0e       	add	r10, r28
    3090:	bd 1e       	adc	r11, r29
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <set_pos_func_in_EEPROM+0x3a0>
    3094:	f5 01       	movw	r30, r10
    3096:	ee 0d       	add	r30, r14
    3098:	ff 1d       	adc	r31, r15
    309a:	c6 01       	movw	r24, r12
    309c:	60 81       	ld	r22, Z
    309e:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
    30a2:	08 94       	sec
    30a4:	e1 1c       	adc	r14, r1
    30a6:	f1 1c       	adc	r15, r1
    30a8:	01 1d       	adc	r16, r1
    30aa:	11 1d       	adc	r17, r1
    30ac:	08 94       	sec
    30ae:	c1 1c       	adc	r12, r1
    30b0:	d1 1c       	adc	r13, r1
				xprintf(PSTR("res =  %u\n"), res);
				xputs(PSTR("Error in f_read in in fetch_update_funcX\n"));
			}
		}
			
		for (j = 0; j< funcSize_x; j++){
    30b2:	80 91 a9 20 	lds	r24, 0x20A9
    30b6:	90 91 aa 20 	lds	r25, 0x20AA
    30ba:	a0 91 ab 20 	lds	r26, 0x20AB
    30be:	b0 91 ac 20 	lds	r27, 0x20AC
    30c2:	e8 16       	cp	r14, r24
    30c4:	f9 06       	cpc	r15, r25
    30c6:	0a 07       	cpc	r16, r26
    30c8:	1b 07       	cpc	r17, r27
    30ca:	20 f3       	brcs	.-56     	; 0x3094 <set_pos_func_in_EEPROM+0x382>
			eeprom_write_byte(fun_x_EEPROM + j,posFuncBuff[j]);
		}
		}		
				
			if (quiet_mode_on == 0)
    30cc:	80 91 0b 24 	lds	r24, 0x240B
    30d0:	88 23       	and	r24, r24
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <set_pos_func_in_EEPROM+0x3c4>
    30d4:	89 c0       	rjmp	.+274    	; 0x31e8 <set_pos_func_in_EEPROM+0x4d6>
			{
				xprintf(PSTR("funcSize_x = %u\n"), funcSize_x);
    30d6:	00 d0       	rcall	.+0      	; 0x30d8 <set_pos_func_in_EEPROM+0x3c6>
    30d8:	00 d0       	rcall	.+0      	; 0x30da <set_pos_func_in_EEPROM+0x3c8>
    30da:	89 eb       	ldi	r24, 0xB9	; 185
    30dc:	96 e0       	ldi	r25, 0x06	; 6
    30de:	ed b7       	in	r30, 0x3d	; 61
    30e0:	fe b7       	in	r31, 0x3e	; 62
    30e2:	81 83       	std	Z+1, r24	; 0x01
    30e4:	92 83       	std	Z+2, r25	; 0x02
    30e6:	80 91 a9 20 	lds	r24, 0x20A9
    30ea:	90 91 aa 20 	lds	r25, 0x20AA
    30ee:	a0 91 ab 20 	lds	r26, 0x20AB
    30f2:	b0 91 ac 20 	lds	r27, 0x20AC
    30f6:	83 83       	std	Z+3, r24	; 0x03
    30f8:	94 83       	std	Z+4, r25	; 0x04
    30fa:	a5 83       	std	Z+5, r26	; 0x05
    30fc:	b6 83       	std	Z+6, r27	; 0x06
    30fe:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				last_load_x = funcSize_x % FUNCTION_LENGTH;
    3102:	60 91 a9 20 	lds	r22, 0x20A9
    3106:	70 91 aa 20 	lds	r23, 0x20AA
    310a:	80 91 ab 20 	lds	r24, 0x20AB
    310e:	90 91 ac 20 	lds	r25, 0x20AC
    3112:	28 ec       	ldi	r18, 0xC8	; 200
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	50 e0       	ldi	r21, 0x00	; 0
    311a:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    311e:	96 95       	lsr	r25
    3120:	87 95       	ror	r24
    3122:	77 95       	ror	r23
    3124:	67 95       	ror	r22
    3126:	60 93 10 24 	sts	0x2410, r22
    312a:	70 93 11 24 	sts	0x2411, r23
				xprintf(PSTR("last_load_x = %u\n"), last_load_x);
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	ed b7       	in	r30, 0x3d	; 61
    3134:	fe b7       	in	r31, 0x3e	; 62
    3136:	31 96       	adiw	r30, 0x01	; 1
    3138:	27 ea       	ldi	r18, 0xA7	; 167
    313a:	36 e0       	ldi	r19, 0x06	; 6
    313c:	ad b7       	in	r26, 0x3d	; 61
    313e:	be b7       	in	r27, 0x3e	; 62
    3140:	11 96       	adiw	r26, 0x01	; 1
    3142:	2d 93       	st	X+, r18
    3144:	3c 93       	st	X, r19
    3146:	12 97       	sbiw	r26, 0x02	; 2
    3148:	62 83       	std	Z+2, r22	; 0x02
    314a:	73 83       	std	Z+3, r23	; 0x03
    314c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				if (last_load_x == 0){
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	80 91 10 24 	lds	r24, 0x2410
    315c:	90 91 11 24 	lds	r25, 0x2411
    3160:	20 91 a9 20 	lds	r18, 0x20A9
    3164:	30 91 aa 20 	lds	r19, 0x20AA
    3168:	40 91 ab 20 	lds	r20, 0x20AB
    316c:	50 91 ac 20 	lds	r21, 0x20AC
    3170:	89 2b       	or	r24, r25
    3172:	e1 f4       	brne	.+56     	; 0x31ac <set_pos_func_in_EEPROM+0x49a>
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH;
    3174:	ca 01       	movw	r24, r20
    3176:	b9 01       	movw	r22, r18
    3178:	20 e9       	ldi	r18, 0x90	; 144
    317a:	31 e0       	ldi	r19, 0x01	; 1
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    3184:	20 93 b1 20 	sts	0x20B1, r18
    3188:	30 93 b2 20 	sts	0x20B2, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);			
    318c:	00 d0       	rcall	.+0      	; 0x318e <set_pos_func_in_EEPROM+0x47c>
    318e:	0f 92       	push	r0
    3190:	ed b7       	in	r30, 0x3d	; 61
    3192:	fe b7       	in	r31, 0x3e	; 62
    3194:	31 96       	adiw	r30, 0x01	; 1
    3196:	8f e8       	ldi	r24, 0x8F	; 143
    3198:	96 e0       	ldi	r25, 0x06	; 6
    319a:	ad b7       	in	r26, 0x3d	; 61
    319c:	be b7       	in	r27, 0x3e	; 62
    319e:	11 96       	adiw	r26, 0x01	; 1
    31a0:	8d 93       	st	X+, r24
    31a2:	9c 93       	st	X, r25
    31a4:	12 97       	sbiw	r26, 0x02	; 2
    31a6:	22 83       	std	Z+2, r18	; 0x02
    31a8:	33 83       	std	Z+3, r19	; 0x03
    31aa:	18 c0       	rjmp	.+48     	; 0x31dc <set_pos_func_in_EEPROM+0x4ca>
				}
				else{
					num_buffer_load_x = funcSize_x / FUNCTION_LENGTH + 1;
    31ac:	ca 01       	movw	r24, r20
    31ae:	b9 01       	movw	r22, r18
    31b0:	20 e9       	ldi	r18, 0x90	; 144
    31b2:	31 e0       	ldi	r19, 0x01	; 1
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    31bc:	2f 5f       	subi	r18, 0xFF	; 255
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
    31c0:	20 93 b1 20 	sts	0x20B1, r18
    31c4:	30 93 b2 20 	sts	0x20B2, r19
					xprintf(PSTR("num_buffer_load_x = %u\n"), num_buffer_load_x);
    31c8:	00 d0       	rcall	.+0      	; 0x31ca <set_pos_func_in_EEPROM+0x4b8>
    31ca:	0f 92       	push	r0
    31cc:	87 e7       	ldi	r24, 0x77	; 119
    31ce:	96 e0       	ldi	r25, 0x06	; 6
    31d0:	ed b7       	in	r30, 0x3d	; 61
    31d2:	fe b7       	in	r31, 0x3e	; 62
    31d4:	81 83       	std	Z+1, r24	; 0x01
    31d6:	92 83       	std	Z+2, r25	; 0x02
    31d8:	23 83       	std	Z+3, r18	; 0x03
    31da:	34 83       	std	Z+4, r19	; 0x04
    31dc:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
				}
			}
			
			default_func_x = false;
    31e8:	10 92 a1 20 	sts	0x20A1, r1
			func_is_in_EEPROM = true; 
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	80 93 ff 23 	sts	0x23FF, r24
			//update the function buffer
			fetch_update_funcX(1,0);
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fetch_update_funcX>
    31f8:	fd c0       	rjmp	.+506    	; 0x33f4 <set_pos_func_in_EEPROM+0x6e2>
		}
            
        case 2:
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); //disable ISR
            //read the header block and send back the function name
            res = f_close(&file3);
    31fa:	80 e2       	ldi	r24, 0x20	; 32
    31fc:	96 e2       	ldi	r25, 0x26	; 38
    31fe:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
            
            res = f_open(&file3, str, FA_OPEN_EXISTING | FA_READ);
    3202:	80 e2       	ldi	r24, 0x20	; 32
    3204:	96 e2       	ldi	r25, 0x26	; 38
    3206:	be 01       	movw	r22, r28
    3208:	6d 5f       	subi	r22, 0xFD	; 253
    320a:	7f 4f       	sbci	r23, 0xFF	; 255
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
            if (res == FR_OK) {
    3212:	88 23       	and	r24, r24
    3214:	09 f0       	breq	.+2      	; 0x3218 <set_pos_func_in_EEPROM+0x506>
    3216:	49 c0       	rjmp	.+146    	; 0x32aa <set_pos_func_in_EEPROM+0x598>
                res = f_read(&file3, posFuncBuff, 512, &cnt);
    3218:	80 e2       	ldi	r24, 0x20	; 32
    321a:	96 e2       	ldi	r25, 0x26	; 38
    321c:	be 01       	movw	r22, r28
    321e:	61 5f       	subi	r22, 0xF1	; 241
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	40 e0       	ldi	r20, 0x00	; 0
    3224:	52 e0       	ldi	r21, 0x02	; 2
    3226:	9e 01       	movw	r18, r28
    3228:	2f 5f       	subi	r18, 0xFF	; 255
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
                if ((res == FR_OK) && (cnt == 512)) {
    3230:	88 23       	and	r24, r24
    3232:	a1 f5       	brne	.+104    	; 0x329c <set_pos_func_in_EEPROM+0x58a>
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	80 50       	subi	r24, 0x00	; 0
    323a:	92 40       	sbci	r25, 0x02	; 2
    323c:	79 f5       	brne	.+94     	; 0x329c <set_pos_func_in_EEPROM+0x58a>
                    // get the test header info
                    // get the test header info
                    ((uint8_t*)&funcSize_y)[0] = posFuncBuff[0];
    323e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3240:	80 93 ad 20 	sts	0x20AD, r24
                    ((uint8_t*)&funcSize_y)[1] = posFuncBuff[1];
    3244:	88 89       	ldd	r24, Y+16	; 0x10
    3246:	80 93 ae 20 	sts	0x20AE, r24
                    ((uint8_t*)&funcSize_y)[2] = posFuncBuff[2];
    324a:	89 89       	ldd	r24, Y+17	; 0x11
    324c:	80 93 af 20 	sts	0x20AF, r24
                    ((uint8_t*)&funcSize_y)[3] = posFuncBuff[3];
    3250:	8a 89       	ldd	r24, Y+18	; 0x12
    3252:	80 93 b0 20 	sts	0x20B0, r24
                    func_name_len = posFuncBuff[4];
                    
                    func_ID_Y = func_id;
    3256:	10 93 0e 24 	sts	0x240E, r17
    325a:	10 92 0f 24 	sts	0x240F, r1
                    
                    Stop = 1;
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	80 93 9c 20 	sts	0x209C, r24
                    display_flag = 0;  //clear the display flag
    3264:	10 92 fa 23 	sts	0x23FA, r1
                    if (quiet_mode_on == 0)
    3268:	80 91 0b 24 	lds	r24, 0x240B
    326c:	88 23       	and	r24, r24
    326e:	29 f5       	brne	.+74     	; 0x32ba <set_pos_func_in_EEPROM+0x5a8>
                        xprintf(PSTR("Setting position function %u for Y\n"), func_id);
    3270:	00 d0       	rcall	.+0      	; 0x3272 <set_pos_func_in_EEPROM+0x560>
    3272:	0f 92       	push	r0
    3274:	ed b7       	in	r30, 0x3d	; 61
    3276:	fe b7       	in	r31, 0x3e	; 62
    3278:	31 96       	adiw	r30, 0x01	; 1
    327a:	83 e5       	ldi	r24, 0x53	; 83
    327c:	96 e0       	ldi	r25, 0x06	; 6
    327e:	ad b7       	in	r26, 0x3d	; 61
    3280:	be b7       	in	r27, 0x3e	; 62
    3282:	11 96       	adiw	r26, 0x01	; 1
    3284:	8d 93       	st	X+, r24
    3286:	9c 93       	st	X, r25
    3288:	12 97       	sbiw	r26, 0x02	; 2
    328a:	12 83       	std	Z+2, r17	; 0x02
    328c:	13 82       	std	Z+3, r1	; 0x03
    328e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <set_pos_func_in_EEPROM+0x5a8>
                    //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                    //       func_name_y, funcSize_y);
                    
                } else {
                    if (quiet_mode_on == 0)
    329c:	80 91 0b 24 	lds	r24, 0x240B
    32a0:	88 23       	and	r24, r24
    32a2:	59 f4       	brne	.+22     	; 0x32ba <set_pos_func_in_EEPROM+0x5a8>
                        xputs(PSTR("Error f_read set_pos_func Y.\n"));
    32a4:	85 e3       	ldi	r24, 0x35	; 53
    32a6:	96 e0       	ldi	r25, 0x06	; 6
    32a8:	06 c0       	rjmp	.+12     	; 0x32b6 <set_pos_func_in_EEPROM+0x5a4>
                }
            } else {
                if (quiet_mode_on == 0)
    32aa:	80 91 0b 24 	lds	r24, 0x240B
    32ae:	88 23       	and	r24, r24
    32b0:	21 f4       	brne	.+8      	; 0x32ba <set_pos_func_in_EEPROM+0x5a8>
                    xputs(PSTR("Error f_open in set_pos_func Y.\n"));
    32b2:	84 e1       	ldi	r24, 0x14	; 20
    32b4:	96 e0       	ldi	r25, 0x06	; 6
    32b6:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            }
			
			if (quiet_mode_on == 0){
    32ba:	80 91 0b 24 	lds	r24, 0x240B
    32be:	88 23       	and	r24, r24
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <set_pos_func_in_EEPROM+0x5b2>
    32c2:	89 c0       	rjmp	.+274    	; 0x33d6 <set_pos_func_in_EEPROM+0x6c4>
				xprintf(PSTR("funcSize_y = %u\n"), funcSize_y);
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <set_pos_func_in_EEPROM+0x5b4>
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <set_pos_func_in_EEPROM+0x5b6>
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	96 e0       	ldi	r25, 0x06	; 6
    32cc:	ed b7       	in	r30, 0x3d	; 61
    32ce:	fe b7       	in	r31, 0x3e	; 62
    32d0:	81 83       	std	Z+1, r24	; 0x01
    32d2:	92 83       	std	Z+2, r25	; 0x02
    32d4:	80 91 ad 20 	lds	r24, 0x20AD
    32d8:	90 91 ae 20 	lds	r25, 0x20AE
    32dc:	a0 91 af 20 	lds	r26, 0x20AF
    32e0:	b0 91 b0 20 	lds	r27, 0x20B0
    32e4:	83 83       	std	Z+3, r24	; 0x03
    32e6:	94 83       	std	Z+4, r25	; 0x04
    32e8:	a5 83       	std	Z+5, r26	; 0x05
    32ea:	b6 83       	std	Z+6, r27	; 0x06
    32ec:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				last_load_y = funcSize_y % FUNCTION_LENGTH;
    32f0:	60 91 ad 20 	lds	r22, 0x20AD
    32f4:	70 91 ae 20 	lds	r23, 0x20AE
    32f8:	80 91 af 20 	lds	r24, 0x20AF
    32fc:	90 91 b0 20 	lds	r25, 0x20B0
    3300:	28 ec       	ldi	r18, 0xC8	; 200
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    330c:	96 95       	lsr	r25
    330e:	87 95       	ror	r24
    3310:	77 95       	ror	r23
    3312:	67 95       	ror	r22
    3314:	60 93 12 24 	sts	0x2412, r22
    3318:	70 93 13 24 	sts	0x2413, r23
				xprintf(PSTR("last_load_y = %u \n"), last_load_y);
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	ed b7       	in	r30, 0x3d	; 61
    3322:	fe b7       	in	r31, 0x3e	; 62
    3324:	31 96       	adiw	r30, 0x01	; 1
    3326:	20 ef       	ldi	r18, 0xF0	; 240
    3328:	35 e0       	ldi	r19, 0x05	; 5
    332a:	ad b7       	in	r26, 0x3d	; 61
    332c:	be b7       	in	r27, 0x3e	; 62
    332e:	11 96       	adiw	r26, 0x01	; 1
    3330:	2d 93       	st	X+, r18
    3332:	3c 93       	st	X, r19
    3334:	12 97       	sbiw	r26, 0x02	; 2
    3336:	62 83       	std	Z+2, r22	; 0x02
    3338:	73 83       	std	Z+3, r23	; 0x03
    333a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				if (last_load_y == 0){
    333e:	0f 90       	pop	r0
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	80 91 12 24 	lds	r24, 0x2412
    334a:	90 91 13 24 	lds	r25, 0x2413
    334e:	20 91 ad 20 	lds	r18, 0x20AD
    3352:	30 91 ae 20 	lds	r19, 0x20AE
    3356:	40 91 af 20 	lds	r20, 0x20AF
    335a:	50 91 b0 20 	lds	r21, 0x20B0
    335e:	89 2b       	or	r24, r25
    3360:	e1 f4       	brne	.+56     	; 0x339a <set_pos_func_in_EEPROM+0x688>
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH;
    3362:	ca 01       	movw	r24, r20
    3364:	b9 01       	movw	r22, r18
    3366:	20 e9       	ldi	r18, 0x90	; 144
    3368:	31 e0       	ldi	r19, 0x01	; 1
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    3372:	20 93 b3 20 	sts	0x20B3, r18
    3376:	30 93 b4 20 	sts	0x20B4, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);			
    337a:	00 d0       	rcall	.+0      	; 0x337c <set_pos_func_in_EEPROM+0x66a>
    337c:	0f 92       	push	r0
    337e:	ed b7       	in	r30, 0x3d	; 61
    3380:	fe b7       	in	r31, 0x3e	; 62
    3382:	31 96       	adiw	r30, 0x01	; 1
    3384:	88 ed       	ldi	r24, 0xD8	; 216
    3386:	95 e0       	ldi	r25, 0x05	; 5
    3388:	ad b7       	in	r26, 0x3d	; 61
    338a:	be b7       	in	r27, 0x3e	; 62
    338c:	11 96       	adiw	r26, 0x01	; 1
    338e:	8d 93       	st	X+, r24
    3390:	9c 93       	st	X, r25
    3392:	12 97       	sbiw	r26, 0x02	; 2
    3394:	22 83       	std	Z+2, r18	; 0x02
    3396:	33 83       	std	Z+3, r19	; 0x03
    3398:	18 c0       	rjmp	.+48     	; 0x33ca <set_pos_func_in_EEPROM+0x6b8>
				}
				else{
					num_buffer_load_y = funcSize_y / FUNCTION_LENGTH + 1;
    339a:	ca 01       	movw	r24, r20
    339c:	b9 01       	movw	r22, r18
    339e:	20 e9       	ldi	r18, 0x90	; 144
    33a0:	31 e0       	ldi	r19, 0x01	; 1
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	50 e0       	ldi	r21, 0x00	; 0
    33a6:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    33aa:	2f 5f       	subi	r18, 0xFF	; 255
    33ac:	3f 4f       	sbci	r19, 0xFF	; 255
    33ae:	20 93 b3 20 	sts	0x20B3, r18
    33b2:	30 93 b4 20 	sts	0x20B4, r19
					xprintf(PSTR("num_buffer_load_y = %u\n"), num_buffer_load_y);
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <set_pos_func_in_EEPROM+0x6a6>
    33b8:	0f 92       	push	r0
    33ba:	80 ec       	ldi	r24, 0xC0	; 192
    33bc:	95 e0       	ldi	r25, 0x05	; 5
    33be:	ed b7       	in	r30, 0x3d	; 61
    33c0:	fe b7       	in	r31, 0x3e	; 62
    33c2:	81 83       	std	Z+1, r24	; 0x01
    33c4:	92 83       	std	Z+2, r25	; 0x02
    33c6:	23 83       	std	Z+3, r18	; 0x03
    33c8:	34 83       	std	Z+4, r19	; 0x04
    33ca:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
				}
			}
			
			default_func_y = 0;
    33d6:	10 92 a2 20 	sts	0x20A2, r1
			
			//update the function buffer
			fetch_update_funcY(1,0);
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	0e 94 67 0e 	call	0x1cce	; 0x1cce <fetch_update_funcY>
    33e2:	08 c0       	rjmp	.+16     	; 0x33f4 <set_pos_func_in_EEPROM+0x6e2>
			
            //Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1);//enable ISR
            break;
            
        default:
            if (quiet_mode_on == 0)
    33e4:	80 91 0b 24 	lds	r24, 0x240B
    33e8:	88 23       	and	r24, r24
    33ea:	21 f4       	brne	.+8      	; 0x33f4 <set_pos_func_in_EEPROM+0x6e2>
                xputs(PSTR("Error input for function channel.\n"));
    33ec:	8d e9       	ldi	r24, 0x9D	; 157
    33ee:	95 e0       	ldi	r25, 0x05	; 5
    33f0:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            break;
    }
}
    33f4:	c2 5f       	subi	r28, 0xF2	; 242
    33f6:	dd 4f       	sbci	r29, 0xFD	; 253
    33f8:	ea e0       	ldi	r30, 0x0A	; 10
    33fa:	0c 94 b2 51 	jmp	0xa364	; 0xa364 <__epilogue_restores__+0x10>

000033fe <set_hwConfig>:
            xputs(PSTR("Error opening pattern file\n"));
    }
	usePreloadedPattern = 0;
}

void set_hwConfig(uint8_t config_num) {
    33fe:	a2 e8       	ldi	r26, 0x82	; 130
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e5 e0       	ldi	r30, 0x05	; 5
    3404:	fa e1       	ldi	r31, 0x1A	; 26
    3406:	0c 94 98 51 	jmp	0xa330	; 0xa330 <__prologue_saves__+0x14>
    340a:	28 2f       	mov	r18, r24
	static uint8_t str[12];
    uint8_t res, b1;
    uint8_t  tempBuff[128];
	uint16_t cnt;
		
    if (config_num < 10)
    340c:	8a 30       	cpi	r24, 0x0A	; 10
    340e:	80 f4       	brcc	.+32     	; 0x3430 <set_hwConfig+0x32>
        sprintf(str, "cfg000%d.cfg\0", config_num);
    3410:	00 d0       	rcall	.+0      	; 0x3412 <set_hwConfig+0x14>
    3412:	00 d0       	rcall	.+0      	; 0x3414 <set_hwConfig+0x16>
    3414:	ed b7       	in	r30, 0x3d	; 61
    3416:	fe b7       	in	r31, 0x3e	; 62
    3418:	31 96       	adiw	r30, 0x01	; 1
    341a:	84 e1       	ldi	r24, 0x14	; 20
    341c:	94 e2       	ldi	r25, 0x24	; 36
    341e:	ad b7       	in	r26, 0x3d	; 61
    3420:	be b7       	in	r27, 0x3e	; 62
    3422:	11 96       	adiw	r26, 0x01	; 1
    3424:	8d 93       	st	X+, r24
    3426:	9c 93       	st	X, r25
    3428:	12 97       	sbiw	r26, 0x02	; 2
    342a:	8e e4       	ldi	r24, 0x4E	; 78
    342c:	90 e2       	ldi	r25, 0x20	; 32
    342e:	1f c0       	rjmp	.+62     	; 0x346e <set_hwConfig+0x70>
    3430:	84 e1       	ldi	r24, 0x14	; 20
    3432:	94 e2       	ldi	r25, 0x24	; 36
    else if (config_num < 100)
    3434:	24 36       	cpi	r18, 0x64	; 100
    3436:	70 f4       	brcc	.+28     	; 0x3454 <set_hwConfig+0x56>
        sprintf(str, "cfg00%d.cfg\0", config_num);
    3438:	00 d0       	rcall	.+0      	; 0x343a <set_hwConfig+0x3c>
    343a:	00 d0       	rcall	.+0      	; 0x343c <set_hwConfig+0x3e>
    343c:	ed b7       	in	r30, 0x3d	; 61
    343e:	fe b7       	in	r31, 0x3e	; 62
    3440:	31 96       	adiw	r30, 0x01	; 1
    3442:	ad b7       	in	r26, 0x3d	; 61
    3444:	be b7       	in	r27, 0x3e	; 62
    3446:	11 96       	adiw	r26, 0x01	; 1
    3448:	8d 93       	st	X+, r24
    344a:	9c 93       	st	X, r25
    344c:	12 97       	sbiw	r26, 0x02	; 2
    344e:	8c e5       	ldi	r24, 0x5C	; 92
    3450:	90 e2       	ldi	r25, 0x20	; 32
    3452:	0d c0       	rjmp	.+26     	; 0x346e <set_hwConfig+0x70>
    else if (config_num < 1000)
        sprintf(str, "cfg0%d.cfg\0", config_num);
    3454:	00 d0       	rcall	.+0      	; 0x3456 <set_hwConfig+0x58>
    3456:	00 d0       	rcall	.+0      	; 0x3458 <set_hwConfig+0x5a>
    3458:	ed b7       	in	r30, 0x3d	; 61
    345a:	fe b7       	in	r31, 0x3e	; 62
    345c:	31 96       	adiw	r30, 0x01	; 1
    345e:	ad b7       	in	r26, 0x3d	; 61
    3460:	be b7       	in	r27, 0x3e	; 62
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	8d 93       	st	X+, r24
    3466:	9c 93       	st	X, r25
    3468:	12 97       	sbiw	r26, 0x02	; 2
    346a:	89 e6       	ldi	r24, 0x69	; 105
    346c:	90 e2       	ldi	r25, 0x20	; 32
    346e:	82 83       	std	Z+2, r24	; 0x02
    3470:	93 83       	std	Z+3, r25	; 0x03
    3472:	24 83       	std	Z+4, r18	; 0x04
    3474:	15 82       	std	Z+5, r1	; 0x05
    3476:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <sprintf>
    347a:	ed b7       	in	r30, 0x3d	; 61
    347c:	fe b7       	in	r31, 0x3e	; 62
    347e:	36 96       	adiw	r30, 0x06	; 6
    3480:	ed bf       	out	0x3d, r30	; 61
    3482:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("config_num is too big.\n"));
			
    res = f_open(&file4, str, FA_OPEN_EXISTING | FA_READ);
    3484:	8c e0       	ldi	r24, 0x0C	; 12
    3486:	97 e2       	ldi	r25, 0x27	; 39
    3488:	64 e1       	ldi	r22, 0x14	; 20
    348a:	74 e2       	ldi	r23, 0x24	; 36
    348c:	41 e0       	ldi	r20, 0x01	; 1
    348e:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
    if (res == FR_OK) {
    3492:	88 23       	and	r24, r24
    3494:	c9 f5       	brne	.+114    	; 0x3508 <set_hwConfig+0x10a>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
    3496:	43 e0       	ldi	r20, 0x03	; 3
    3498:	c4 2e       	mov	r12, r20
    349a:	d1 2c       	mov	r13, r1
    349c:	cc 0e       	add	r12, r28
    349e:	dd 1e       	adc	r13, r29
    34a0:	8c e0       	ldi	r24, 0x0C	; 12
    34a2:	97 e2       	ldi	r25, 0x27	; 39
    34a4:	b6 01       	movw	r22, r12
    34a6:	40 e8       	ldi	r20, 0x80	; 128
    34a8:	50 e0       	ldi	r21, 0x00	; 0
    34aa:	9e 01       	movw	r18, r28
    34ac:	2f 5f       	subi	r18, 0xFF	; 255
    34ae:	3f 4f       	sbci	r19, 0xFF	; 255
    34b0:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
        if ((res == FR_OK) && (cnt == 128)) {
    34b4:	88 23       	and	r24, r24
    34b6:	09 f5       	brne	.+66     	; 0x34fa <set_hwConfig+0xfc>
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	9a 81       	ldd	r25, Y+2	; 0x02
    34bc:	80 38       	cpi	r24, 0x80	; 128
    34be:	91 05       	cpc	r25, r1
    34c0:	e1 f4       	brne	.+56     	; 0x34fa <set_hwConfig+0xfc>
    34c2:	3b e4       	ldi	r19, 0x4B	; 75
    34c4:	e3 2e       	mov	r14, r19
    34c6:	36 e2       	ldi	r19, 0x26	; 38
    34c8:	f3 2e       	mov	r15, r19
    34ca:	00 e0       	ldi	r16, 0x00	; 0
    34cc:	10 e0       	ldi	r17, 0x00	; 0
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
    34ce:	f6 01       	movw	r30, r12
    34d0:	e0 0f       	add	r30, r16
    34d2:	f1 1f       	adc	r31, r17
    34d4:	60 81       	ld	r22, Z
    34d6:	d7 01       	movw	r26, r14
    34d8:	6d 93       	st	X+, r22
    34da:	7d 01       	movw	r14, r26
            xputs(PSTR("Error opening pattern file\n"));
    }
	usePreloadedPattern = 0;
}

void set_hwConfig(uint8_t config_num) {
    34dc:	0f 5f       	subi	r16, 0xFF	; 255
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
    34e0:	c8 01       	movw	r24, r16
    34e2:	8f 5f       	subi	r24, 0xFF	; 255
    34e4:	9f 4f       	sbci	r25, 0xFF	; 255
    34e6:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
    if (res == FR_OK) {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&file4, tempBuff, 128, &cnt);
        if ((res == FR_OK) && (cnt == 128)) {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++) {
    34ea:	00 38       	cpi	r16, 0x80	; 128
    34ec:	11 05       	cpc	r17, r1
    34ee:	79 f7       	brne	.-34     	; 0x34ce <set_hwConfig+0xd0>
				chMap[b1] = tempBuff[b1-1]; // panel 0 doesn't exist
				eeprom_write_byte(arena_config + b1, tempBuff[b1-1]);
            }
		    eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
        }
        f_close(&file4);
    34fa:	8c e0       	ldi	r24, 0x0C	; 12
    34fc:	97 e2       	ldi	r25, 0x27	; 39
    34fe:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    3502:	86 e4       	ldi	r24, 0x46	; 70
    3504:	9a e0       	ldi	r25, 0x0A	; 10
    3506:	02 c0       	rjmp	.+4      	; 0x350c <set_hwConfig+0x10e>
    }
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    3508:	80 e1       	ldi	r24, 0x10	; 16
    350a:	9a e0       	ldi	r25, 0x0A	; 10
    350c:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    }
}
    3510:	ce 57       	subi	r28, 0x7E	; 126
    3512:	df 4f       	sbci	r29, 0xFF	; 255
    3514:	e8 e0       	ldi	r30, 0x08	; 8
    3516:	0c 94 b4 51 	jmp	0xa368	; 0xa368 <__epilogue_restores__+0x14>

0000351a <i2cMasterSend>:
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
}

void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data) {
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	16 2f       	mov	r17, r22
    3522:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0) {
    3524:	88 23       	and	r24, r24
    3526:	49 f5       	brne	.+82     	; 0x357a <i2cMasterSend+0x60>
        while (twi1.status != TWIM_STATUS_READY);
    3528:	80 91 9f 25 	lds	r24, 0x259F
    352c:	88 23       	and	r24, r24
    352e:	e1 f7       	brne	.-8      	; 0x3528 <i2cMasterSend+0xe>
        TWI_MasterWrite(&twi1, 0, data, len);
    3530:	82 e9       	ldi	r24, 0x92	; 146
    3532:	95 e2       	ldi	r25, 0x25	; 37
    3534:	60 e0       	ldi	r22, 0x00	; 0
    3536:	ae 01       	movw	r20, r28
    3538:	21 2f       	mov	r18, r17
    353a:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY);
    353e:	80 91 9a 28 	lds	r24, 0x289A
    3542:	88 23       	and	r24, r24
    3544:	e1 f7       	brne	.-8      	; 0x353e <i2cMasterSend+0x24>
        TWI_MasterWrite(&twi2, 0, data, len);
    3546:	8d e8       	ldi	r24, 0x8D	; 141
    3548:	98 e2       	ldi	r25, 0x28	; 40
    354a:	60 e0       	ldi	r22, 0x00	; 0
    354c:	ae 01       	movw	r20, r28
    354e:	21 2f       	mov	r18, r17
    3550:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY);
    3554:	80 91 47 26 	lds	r24, 0x2647
    3558:	88 23       	and	r24, r24
    355a:	e1 f7       	brne	.-8      	; 0x3554 <i2cMasterSend+0x3a>
        TWI_MasterWrite(&twi3, 0, data, len);
    355c:	8a e3       	ldi	r24, 0x3A	; 58
    355e:	96 e2       	ldi	r25, 0x26	; 38
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	ae 01       	movw	r20, r28
    3564:	21 2f       	mov	r18, r17
    3566:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY);
    356a:	80 91 c3 24 	lds	r24, 0x24C3
    356e:	88 23       	and	r24, r24
    3570:	e1 f7       	brne	.-8      	; 0x356a <i2cMasterSend+0x50>
        TWI_MasterWrite(&twi4, 0, data, len);
    3572:	86 eb       	ldi	r24, 0xB6	; 182
    3574:	94 e2       	ldi	r25, 0x24	; 36
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	22 c0       	rjmp	.+68     	; 0x35be <i2cMasterSend+0xa4>
    }
    else {
        // look up the actual panel address and channel
        ch = chMap[panel];
    357a:	e8 2f       	mov	r30, r24
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	df 01       	movw	r26, r30
    3580:	a6 5b       	subi	r26, 0xB6	; 182
    3582:	b9 4d       	sbci	r27, 0xD9	; 217
    3584:	ac 91       	ld	r26, X
        addr = adrMap[panel];
    3586:	e0 51       	subi	r30, 0x10	; 16
    3588:	f8 4d       	sbci	r31, 0xD8	; 216
    358a:	60 81       	ld	r22, Z
        if (ch != 0){
    358c:	aa 23       	and	r26, r26
    358e:	d9 f0       	breq	.+54     	; 0x35c6 <i2cMasterSend+0xac>
            
            switch (ch) {
    3590:	a3 30       	cpi	r26, 0x03	; 3
    3592:	51 f0       	breq	.+20     	; 0x35a8 <i2cMasterSend+0x8e>
    3594:	a4 30       	cpi	r26, 0x04	; 4
    3596:	59 f0       	breq	.+22     	; 0x35ae <i2cMasterSend+0x94>
    3598:	a2 30       	cpi	r26, 0x02	; 2
    359a:	19 f4       	brne	.+6      	; 0x35a2 <i2cMasterSend+0x88>
    359c:	ad e8       	ldi	r26, 0x8D	; 141
    359e:	b8 e2       	ldi	r27, 0x28	; 40
    35a0:	08 c0       	rjmp	.+16     	; 0x35b2 <i2cMasterSend+0x98>
    35a2:	a2 e9       	ldi	r26, 0x92	; 146
    35a4:	b5 e2       	ldi	r27, 0x25	; 37
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <i2cMasterSend+0x98>
    35a8:	aa e3       	ldi	r26, 0x3A	; 58
    35aa:	b6 e2       	ldi	r27, 0x26	; 38
    35ac:	02 c0       	rjmp	.+4      	; 0x35b2 <i2cMasterSend+0x98>
                case 2:
                    twi = &twi2;
                    break;
                case 3:
                    twi = &twi3;
                    break;
    35ae:	a6 eb       	ldi	r26, 0xB6	; 182
    35b0:	b4 e2       	ldi	r27, 0x24	; 36
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY);
    35b2:	1d 96       	adiw	r26, 0x0d	; 13
    35b4:	8c 91       	ld	r24, X
    35b6:	1d 97       	sbiw	r26, 0x0d	; 13
    35b8:	88 23       	and	r24, r24
    35ba:	d9 f7       	brne	.-10     	; 0x35b2 <i2cMasterSend+0x98>
            TWI_MasterWrite(twi, addr, data, len);
    35bc:	cd 01       	movw	r24, r26
    35be:	ae 01       	movw	r20, r28
    35c0:	21 2f       	mov	r18, r17
    35c2:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
        }
    }
}
    35c6:	df 91       	pop	r29
    35c8:	cf 91       	pop	r28
    35ca:	1f 91       	pop	r17
    35cc:	08 95       	ret

000035ce <display_dumped_frame>:
	if (quiet_mode_on == 0)
        xputs(PSTR("Success set the new laser pattern.\n"));

}

void display_dumped_frame (uint8_t *msg_buffer) {
    35ce:	a1 e0       	ldi	r26, 0x01	; 1
    35d0:	b0 e0       	ldi	r27, 0x00	; 0
    35d2:	ed ee       	ldi	r30, 0xED	; 237
    35d4:	fa e1       	ldi	r31, 0x1A	; 26
    35d6:	0c 94 96 51 	jmp	0xa32c	; 0xa32c <__prologue_saves__+0x10>
    35da:	5c 01       	movw	r10, r24
    //The first two bytes are the x_dac_val, only support positive number 
    //The second two bytes are the y_dac_val, only support positive number 
    //The fifth byte is the number of panels
    //the sixth byte is the gray scale level
    //the seventh byte is the flag of row compression 
    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    35dc:	fc 01       	movw	r30, r24
    35de:	e0 80       	ld	r14, Z
    35e0:	f1 80       	ldd	r15, Z+1	; 0x01
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    35e2:	c2 80       	ldd	r12, Z+2	; 0x02
    35e4:	d3 80       	ldd	r13, Z+3	; 0x03
    num_panels = msg_buffer[4];
    35e6:	84 81       	ldd	r24, Z+4	; 0x04
    35e8:	80 93 00 24 	sts	0x2400, r24
    gs_value =msg_buffer[5];
    35ec:	95 81       	ldd	r25, Z+5	; 0x05
    35ee:	90 93 49 26 	sts	0x2649, r25
    row_compress = msg_buffer[6];
    35f2:	86 81       	ldd	r24, Z+6	; 0x06
    35f4:	80 93 c7 24 	sts	0x24C7, r24


    if (row_compress)
    35f8:	88 23       	and	r24, r24
    35fa:	19 f0       	breq	.+6      	; 0x3602 <display_dumped_frame+0x34>
        bytes_per_panel_frame = gs_value;
    35fc:	90 93 cc 26 	sts	0x26CC, r25
    3600:	09 c0       	rjmp	.+18     	; 0x3614 <display_dumped_frame+0x46>
    else
        bytes_per_panel_frame = gs_value*8;
    3602:	89 2f       	mov	r24, r25
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	53 e0       	ldi	r21, 0x03	; 3
    3608:	88 0f       	add	r24, r24
    360a:	99 1f       	adc	r25, r25
    360c:	5a 95       	dec	r21
    360e:	e1 f7       	brne	.-8      	; 0x3608 <display_dumped_frame+0x3a>
    3610:	80 93 cc 26 	sts	0x26CC, r24
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    3614:	10 92 fa 23 	sts	0x23FA, r1
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	61 e0       	ldi	r22, 0x01	; 1
    361c:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
    3620:	91 e0       	ldi	r25, 0x01	; 1
    3622:	07 e0       	ldi	r16, 0x07	; 7
    3624:	10 e0       	ldi	r17, 0x00	; 0
    3626:	0f c0       	rjmp	.+30     	; 0x3646 <display_dumped_frame+0x78>
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
    3628:	a5 01       	movw	r20, r10
    362a:	40 0f       	add	r20, r16
    362c:	51 1f       	adc	r21, r17
    362e:	89 2f       	mov	r24, r25
    3630:	60 91 cc 26 	lds	r22, 0x26CC
    3634:	99 83       	std	Y+1, r25	; 0x01
    3636:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
        buffer_index = buffer_index + bytes_per_panel_frame;
    363a:	80 91 cc 26 	lds	r24, 0x26CC
    363e:	08 0f       	add	r16, r24
    3640:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    display_flag = 0;  //clear the display flag
    digitalWrite(1, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= num_panels; panel_index++){
    3642:	99 81       	ldd	r25, Y+1	; 0x01
    3644:	9f 5f       	subi	r25, 0xFF	; 255
    3646:	80 91 00 24 	lds	r24, 0x2400
    364a:	89 17       	cp	r24, r25
    364c:	68 f7       	brcc	.-38     	; 0x3628 <display_dumped_frame+0x5a>
        i2cMasterSend(panel_index, bytes_per_panel_frame, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + bytes_per_panel_frame;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    364e:	7f 2d       	mov	r23, r15
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	6e 0d       	add	r22, r14
    3654:	71 1d       	adc	r23, r1
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    365c:	7d 2d       	mov	r23, r13
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	6c 0d       	add	r22, r12
    3662:	71 1d       	adc	r23, r1
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
    digitalWrite(1, LOW); // set line low at end of frame write
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
}
    3672:	21 96       	adiw	r28, 0x01	; 1
    3674:	ea e0       	ldi	r30, 0x0A	; 10
    3676:	0c 94 b2 51 	jmp	0xa364	; 0xa364 <__epilogue_restores__+0x10>

0000367a <handle_message_length_9>:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    }
}

//set gain and bias
void handle_message_length_9(uint8_t *msg_buffer) {
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
    367e:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    3680:	80 81       	ld	r24, Z
    3682:	81 30       	cpi	r24, 0x01	; 1
    3684:	09 f0       	breq	.+2      	; 0x3688 <handle_message_length_9+0xe>
    3686:	49 c0       	rjmp	.+146    	; 0x371a <handle_message_length_9+0xa0>
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

        case 0x01:
            //'send_gain_bias', all of these are signed byte values
            gain_x = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    3688:	92 81       	ldd	r25, Z+2	; 0x02
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	21 81       	ldd	r18, Z+1	; 0x01
    368e:	dc 01       	movw	r26, r24
    3690:	a2 0f       	add	r26, r18
    3692:	b1 1d       	adc	r27, r1
    3694:	a0 93 0a 27 	sts	0x270A, r26
    3698:	b0 93 0b 27 	sts	0x270B, r27
            bias_x = (uint16_t) msg_buffer[3] + (256*msg_buffer[4]);
    369c:	94 81       	ldd	r25, Z+4	; 0x04
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	23 81       	ldd	r18, Z+3	; 0x03
    36a2:	bc 01       	movw	r22, r24
    36a4:	62 0f       	add	r22, r18
    36a6:	71 1d       	adc	r23, r1
    36a8:	60 93 b4 24 	sts	0x24B4, r22
    36ac:	70 93 b5 24 	sts	0x24B5, r23
            gain_y = (uint16_t) msg_buffer[5] + (256*msg_buffer[6]);
    36b0:	96 81       	ldd	r25, Z+6	; 0x06
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	25 81       	ldd	r18, Z+5	; 0x05
    36b6:	ac 01       	movw	r20, r24
    36b8:	42 0f       	add	r20, r18
    36ba:	51 1d       	adc	r21, r1
    36bc:	40 93 cf 26 	sts	0x26CF, r20
    36c0:	50 93 d0 26 	sts	0x26D0, r21
            bias_y = (uint16_t) msg_buffer[7] + (256*msg_buffer[8]);
    36c4:	90 85       	ldd	r25, Z+8	; 0x08
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	27 81       	ldd	r18, Z+7	; 0x07
    36ca:	ec 01       	movw	r28, r24
    36cc:	c2 0f       	add	r28, r18
    36ce:	d1 1d       	adc	r29, r1
    36d0:	9e 01       	movw	r18, r28
    36d2:	c0 93 bf 2a 	sts	0x2ABF, r28
    36d6:	d0 93 c0 2a 	sts	0x2AC0, r29
			if (quiet_mode_on == 0)
    36da:	80 91 0b 24 	lds	r24, 0x240B
    36de:	88 23       	and	r24, r24
    36e0:	11 f5       	brne	.+68     	; 0x3726 <handle_message_length_9+0xac>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), gain_x, bias_x, gain_y, bias_y);
    36e2:	ed b7       	in	r30, 0x3d	; 61
    36e4:	fe b7       	in	r31, 0x3e	; 62
    36e6:	3a 97       	sbiw	r30, 0x0a	; 10
    36e8:	ed bf       	out	0x3d, r30	; 61
    36ea:	fe bf       	out	0x3e, r31	; 62
    36ec:	31 96       	adiw	r30, 0x01	; 1
    36ee:	82 ee       	ldi	r24, 0xE2	; 226
    36f0:	9d e0       	ldi	r25, 0x0D	; 13
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	89 83       	std	Y+1, r24	; 0x01
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	a2 83       	std	Z+2, r26	; 0x02
    36fc:	b3 83       	std	Z+3, r27	; 0x03
    36fe:	64 83       	std	Z+4, r22	; 0x04
    3700:	75 83       	std	Z+5, r23	; 0x05
    3702:	46 83       	std	Z+6, r20	; 0x06
    3704:	57 83       	std	Z+7, r21	; 0x07
    3706:	20 87       	std	Z+8, r18	; 0x08
    3708:	31 87       	std	Z+9, r19	; 0x09
    370a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    370e:	ed b7       	in	r30, 0x3d	; 61
    3710:	fe b7       	in	r31, 0x3e	; 62
    3712:	3a 96       	adiw	r30, 0x0a	; 10
    3714:	ed bf       	out	0x3d, r30	; 61
    3716:	fe bf       	out	0x3e, r31	; 62
    3718:	06 c0       	rjmp	.+12     	; 0x3726 <handle_message_length_9+0xac>
            break;
		
		default:
            i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	68 e0       	ldi	r22, 0x08	; 8
    371e:	4d ee       	ldi	r20, 0xED	; 237
    3720:	50 e2       	ldi	r21, 0x20	; 32
    3722:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
			
	}
}
    3726:	df 91       	pop	r29
    3728:	cf 91       	pop	r28
    372a:	08 95       	ret

0000372c <handle_message_length_4>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    }
}

void handle_message_length_4(uint8_t *msg_buffer) {
    372c:	fc 01       	movw	r30, r24
    int16_t setVal;
	//'set_ao'
    switch(msg_buffer[0]) {
    372e:	80 81       	ld	r24, Z
    3730:	80 31       	cpi	r24, 0x10	; 16
    3732:	19 f0       	breq	.+6      	; 0x373a <handle_message_length_4+0xe>
    3734:	81 31       	cpi	r24, 0x11	; 17
    3736:	a9 f4       	brne	.+42     	; 0x3762 <handle_message_length_4+0x36>
    3738:	07 c0       	rjmp	.+14     	; 0x3748 <handle_message_length_4+0x1c>
        case 0x10: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4. 
		    setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    373a:	81 81       	ldd	r24, Z+1	; 0x01
    373c:	73 81       	ldd	r23, Z+3	; 0x03
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	92 81       	ldd	r25, Z+2	; 0x02
    3742:	69 0f       	add	r22, r25
    3744:	71 1d       	adc	r23, r1
    3746:	09 c0       	rjmp	.+18     	; 0x375a <handle_message_length_4+0x2e>
            break;
		case 0x11:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4 
			setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    3748:	73 81       	ldd	r23, Z+3	; 0x03
    374a:	60 e0       	ldi	r22, 0x00	; 0
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	68 0f       	add	r22, r24
    3750:	71 1d       	adc	r23, r1
			setVal = -setVal;
            analogWrite(msg_buffer[1] - 1, setVal);
    3752:	81 81       	ldd	r24, Z+1	; 0x01
    3754:	70 95       	com	r23
    3756:	61 95       	neg	r22
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	81 50       	subi	r24, 0x01	; 1
    375c:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
    3760:	08 95       	ret
            break;
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	68 e0       	ldi	r22, 0x08	; 8
    3766:	4d ed       	ldi	r20, 0xDD	; 221
    3768:	50 e2       	ldi	r21, 0x20	; 32
    376a:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    376e:	08 95       	ret

00003770 <handle_message_length_3>:
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    }
}

void handle_message_length_3(uint8_t *msg_buffer) {
    3770:	a2 e0       	ldi	r26, 0x02	; 2
    3772:	b0 e0       	ldi	r27, 0x00	; 0
    3774:	ee eb       	ldi	r30, 0xBE	; 190
    3776:	fb e1       	ldi	r31, 0x1B	; 27
    3778:	0c 94 9b 51 	jmp	0xa336	; 0xa336 <__prologue_saves__+0x1a>
    377c:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0]) {
    377e:	fc 01       	movw	r30, r24
    3780:	80 81       	ld	r24, Z
    3782:	85 32       	cpi	r24, 0x25	; 37
    3784:	09 f4       	brne	.+2      	; 0x3788 <handle_message_length_3+0x18>
    3786:	b9 c0       	rjmp	.+370    	; 0x38fa <handle_message_length_3+0x18a>
    3788:	86 32       	cpi	r24, 0x26	; 38
    378a:	50 f4       	brcc	.+20     	; 0x37a0 <handle_message_length_3+0x30>
    378c:	85 31       	cpi	r24, 0x15	; 21
    378e:	09 f4       	brne	.+2      	; 0x3792 <handle_message_length_3+0x22>
    3790:	a0 c0       	rjmp	.+320    	; 0x38d2 <handle_message_length_3+0x162>
    3792:	80 32       	cpi	r24, 0x20	; 32
    3794:	09 f4       	brne	.+2      	; 0x3798 <handle_message_length_3+0x28>
    3796:	a7 c0       	rjmp	.+334    	; 0x38e6 <handle_message_length_3+0x176>
    3798:	80 31       	cpi	r24, 0x10	; 16
    379a:	09 f0       	breq	.+2      	; 0x379e <handle_message_length_3+0x2e>
    379c:	2e c1       	rjmp	.+604    	; 0x39fa <handle_message_length_3+0x28a>
    379e:	91 c0       	rjmp	.+290    	; 0x38c2 <handle_message_length_3+0x152>
    37a0:	85 33       	cpi	r24, 0x35	; 53
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <handle_message_length_3+0x36>
    37a4:	f2 c0       	rjmp	.+484    	; 0x398a <handle_message_length_3+0x21a>
    37a6:	86 33       	cpi	r24, 0x36	; 54
    37a8:	20 f4       	brcc	.+8      	; 0x37b2 <handle_message_length_3+0x42>
    37aa:	80 33       	cpi	r24, 0x30	; 48
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <handle_message_length_3+0x40>
    37ae:	25 c1       	rjmp	.+586    	; 0x39fa <handle_message_length_3+0x28a>
    37b0:	c2 c0       	rjmp	.+388    	; 0x3936 <handle_message_length_3+0x1c6>
    37b2:	80 34       	cpi	r24, 0x40	; 64
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <handle_message_length_3+0x48>
    37b6:	14 c1       	rjmp	.+552    	; 0x39e0 <handle_message_length_3+0x270>
    37b8:	8f 3f       	cpi	r24, 0xFF	; 255
    37ba:	09 f0       	breq	.+2      	; 0x37be <handle_message_length_3+0x4e>
    37bc:	1e c1       	rjmp	.+572    	; 0x39fa <handle_message_length_3+0x28a>
        case 0xFF:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    37be:	f8 01       	movw	r30, r16
    37c0:	f1 80       	ldd	r15, Z+1	; 0x01
            //sends a reset command out to panel at taget address
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    37c2:	80 91 9f 25 	lds	r24, 0x259F
    37c6:	88 23       	and	r24, r24
    37c8:	e1 f7       	brne	.-8      	; 0x37c2 <handle_message_length_3+0x52>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    37ca:	82 e9       	ldi	r24, 0x92	; 146
    37cc:	95 e2       	ldi	r25, 0x25	; 37
    37ce:	6f 2d       	mov	r22, r15
    37d0:	4d ef       	ldi	r20, 0xFD	; 253
    37d2:	50 e2       	ldi	r21, 0x20	; 32
    37d4:	22 e0       	ldi	r18, 0x02	; 2
    37d6:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    37da:	80 91 9a 28 	lds	r24, 0x289A
    37de:	88 23       	and	r24, r24
    37e0:	e1 f7       	brne	.-8      	; 0x37da <handle_message_length_3+0x6a>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    37e2:	8d e8       	ldi	r24, 0x8D	; 141
    37e4:	98 e2       	ldi	r25, 0x28	; 40
    37e6:	6f 2d       	mov	r22, r15
    37e8:	4d ef       	ldi	r20, 0xFD	; 253
    37ea:	50 e2       	ldi	r21, 0x20	; 32
    37ec:	22 e0       	ldi	r18, 0x02	; 2
    37ee:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    37f2:	80 91 47 26 	lds	r24, 0x2647
    37f6:	88 23       	and	r24, r24
    37f8:	e1 f7       	brne	.-8      	; 0x37f2 <handle_message_length_3+0x82>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    37fa:	8a e3       	ldi	r24, 0x3A	; 58
    37fc:	96 e2       	ldi	r25, 0x26	; 38
    37fe:	6f 2d       	mov	r22, r15
    3800:	4d ef       	ldi	r20, 0xFD	; 253
    3802:	50 e2       	ldi	r21, 0x20	; 32
    3804:	22 e0       	ldi	r18, 0x02	; 2
    3806:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    380a:	80 91 c3 24 	lds	r24, 0x24C3
    380e:	88 23       	and	r24, r24
    3810:	e1 f7       	brne	.-8      	; 0x380a <handle_message_length_3+0x9a>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    3812:	86 eb       	ldi	r24, 0xB6	; 182
    3814:	94 e2       	ldi	r25, 0x24	; 36
    3816:	6f 2d       	mov	r22, r15
    3818:	4d ef       	ldi	r20, 0xFD	; 253
    381a:	50 e2       	ldi	r21, 0x20	; 32
    381c:	22 e0       	ldi	r18, 0x02	; 2
    381e:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
    3822:	80 ef       	ldi	r24, 0xF0	; 240
    3824:	95 e5       	ldi	r25, 0x55	; 85
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3826:	20 e2       	ldi	r18, 0x20	; 32
    3828:	33 e0       	ldi	r19, 0x03	; 3
    382a:	f9 01       	movw	r30, r18
    382c:	31 97       	sbiw	r30, 0x01	; 1
    382e:	f1 f7       	brne	.-4      	; 0x382c <handle_message_length_3+0xbc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3830:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3832:	d9 f7       	brne	.-10     	; 0x382a <handle_message_length_3+0xba>
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    3834:	8f ef       	ldi	r24, 0xFF	; 255
    3836:	89 83       	std	Y+1, r24	; 0x01
    3838:	f8 01       	movw	r30, r16
    383a:	92 81       	ldd	r25, Z+2	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
    383c:	80 91 9f 25 	lds	r24, 0x259F
    3840:	88 23       	and	r24, r24
    3842:	e1 f7       	brne	.-8      	; 0x383c <handle_message_length_3+0xcc>
            while (twi4.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF; CMD[1] = msg_buffer[2];   //send change address command
    3844:	9a 83       	std	Y+2, r25	; 0x02
            
            //Since the panel can be located in any of the four channels, so the command should be sent to all channels
            while (twi1.status != TWIM_STATUS_READY);
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    3846:	82 e9       	ldi	r24, 0x92	; 146
    3848:	95 e2       	ldi	r25, 0x25	; 37
    384a:	6f 2d       	mov	r22, r15
    384c:	ae 01       	movw	r20, r28
    384e:	4f 5f       	subi	r20, 0xFF	; 255
    3850:	5f 4f       	sbci	r21, 0xFF	; 255
    3852:	22 e0       	ldi	r18, 0x02	; 2
    3854:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    3858:	80 91 9a 28 	lds	r24, 0x289A
    385c:	88 23       	and	r24, r24
    385e:	e1 f7       	brne	.-8      	; 0x3858 <handle_message_length_3+0xe8>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    3860:	8d e8       	ldi	r24, 0x8D	; 141
    3862:	98 e2       	ldi	r25, 0x28	; 40
    3864:	6f 2d       	mov	r22, r15
    3866:	ae 01       	movw	r20, r28
    3868:	4f 5f       	subi	r20, 0xFF	; 255
    386a:	5f 4f       	sbci	r21, 0xFF	; 255
    386c:	22 e0       	ldi	r18, 0x02	; 2
    386e:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    3872:	80 91 47 26 	lds	r24, 0x2647
    3876:	88 23       	and	r24, r24
    3878:	e1 f7       	brne	.-8      	; 0x3872 <handle_message_length_3+0x102>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    387a:	8a e3       	ldi	r24, 0x3A	; 58
    387c:	96 e2       	ldi	r25, 0x26	; 38
    387e:	6f 2d       	mov	r22, r15
    3880:	ae 01       	movw	r20, r28
    3882:	4f 5f       	subi	r20, 0xFF	; 255
    3884:	5f 4f       	sbci	r21, 0xFF	; 255
    3886:	22 e0       	ldi	r18, 0x02	; 2
    3888:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    388c:	80 91 c3 24 	lds	r24, 0x24C3
    3890:	88 23       	and	r24, r24
    3892:	e1 f7       	brne	.-8      	; 0x388c <handle_message_length_3+0x11c>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    3894:	86 eb       	ldi	r24, 0xB6	; 182
    3896:	94 e2       	ldi	r25, 0x24	; 36
    3898:	6f 2d       	mov	r22, r15
    389a:	ae 01       	movw	r20, r28
    389c:	4f 5f       	subi	r20, 0xFF	; 255
    389e:	5f 4f       	sbci	r21, 0xFF	; 255
    38a0:	22 e0       	ldi	r18, 0x02	; 2
    38a2:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <TWI_MasterWrite>
    38a6:	84 ef       	ldi	r24, 0xF4	; 244
    38a8:	91 e0       	ldi	r25, 0x01	; 1
    38aa:	20 e2       	ldi	r18, 0x20	; 32
    38ac:	33 e0       	ldi	r19, 0x03	; 3
    38ae:	f9 01       	movw	r30, r18
    38b0:	31 97       	sbiw	r30, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <handle_message_length_3+0x140>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	d9 f7       	brne	.-10     	; 0x38ae <handle_message_length_3+0x13e>
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	62 e0       	ldi	r22, 0x02	; 2
    38bc:	4d ef       	ldi	r20, 0xFD	; 253
    38be:	50 e2       	ldi	r21, 0x20	; 32
    38c0:	a0 c0       	rjmp	.+320    	; 0x3a02 <handle_message_length_3+0x292>
            
            break;
            
        case 0x10:
            x_mode = msg_buffer[1];
    38c2:	f8 01       	movw	r30, r16
    38c4:	81 81       	ldd	r24, Z+1	; 0x01
    38c6:	80 93 cb 26 	sts	0x26CB, r24
            y_mode = msg_buffer[2];
    38ca:	82 81       	ldd	r24, Z+2	; 0x02
    38cc:	80 93 09 27 	sts	0x2709, r24
    38d0:	9a c0       	rjmp	.+308    	; 0x3a06 <handle_message_length_3+0x296>
            //put in an error message if value is not 0, 1, or 2.
            break;
            
        case 0x15:   //this is a set position function
            if (msg_buffer[2] == 0){
    38d2:	f8 01       	movw	r30, r16
    38d4:	62 81       	ldd	r22, Z+2	; 0x02
    38d6:	66 23       	and	r22, r22
    38d8:	09 f4       	brne	.+2      	; 0x38dc <handle_message_length_3+0x16c>
    38da:	86 c0       	rjmp	.+268    	; 0x39e8 <handle_message_length_3+0x278>
                set_default_func(msg_buffer[1]);}
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    38dc:	f8 01       	movw	r30, r16
    38de:	81 81       	ldd	r24, Z+1	; 0x01
    38e0:	0e 94 47 14 	call	0x288e	; 0x288e <set_pos_func>
    38e4:	90 c0       	rjmp	.+288    	; 0x3a06 <handle_message_length_3+0x296>
            break;
            
        case 0x20:   //this is a set velocity function
            if (msg_buffer[2] == 0){
    38e6:	f8 01       	movw	r30, r16
    38e8:	62 81       	ldd	r22, Z+2	; 0x02
    38ea:	66 23       	and	r22, r22
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <handle_message_length_3+0x180>
    38ee:	7c c0       	rjmp	.+248    	; 0x39e8 <handle_message_length_3+0x278>
                set_default_func(msg_buffer[1]);}
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    38f0:	f8 01       	movw	r30, r16
    38f2:	81 81       	ldd	r24, Z+1	; 0x01
    38f4:	0e 94 07 12 	call	0x240e	; 0x240e <set_vel_func>
    38f8:	86 c0       	rjmp	.+268    	; 0x3a06 <handle_message_length_3+0x296>
            break;
            
        case 0x25: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    38fa:	f8 01       	movw	r30, r16
    38fc:	92 81       	ldd	r25, Z+2	; 0x02
    38fe:	80 e0       	ldi	r24, 0x00	; 0
    3900:	21 81       	ldd	r18, Z+1	; 0x01
    3902:	8c 01       	movw	r16, r24
    3904:	02 0f       	add	r16, r18
    3906:	11 1d       	adc	r17, r1
            functionX_rate = OVERFLOW_RATE/funcX_freq;
    3908:	98 01       	movw	r18, r16
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	50 e0       	ldi	r21, 0x00	; 0
    390e:	62 e1       	ldi	r22, 0x12	; 18
    3910:	7a e7       	ldi	r23, 0x7A	; 122
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__divmodsi4>
    391a:	20 93 a3 20 	sts	0x20A3, r18
    391e:	30 93 a4 20 	sts	0x20A4, r19
            if (quiet_mode_on == 0)
    3922:	80 91 0b 24 	lds	r24, 0x240B
    3926:	88 23       	and	r24, r24
    3928:	09 f0       	breq	.+2      	; 0x392c <handle_message_length_3+0x1bc>
    392a:	6d c0       	rjmp	.+218    	; 0x3a06 <handle_message_length_3+0x296>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    392c:	00 d0       	rcall	.+0      	; 0x392e <handle_message_length_3+0x1be>
    392e:	0f 92       	push	r0
    3930:	80 e8       	ldi	r24, 0x80	; 128
    3932:	9e e0       	ldi	r25, 0x0E	; 14
    3934:	1d c0       	rjmp	.+58     	; 0x3970 <handle_message_length_3+0x200>
            break;
            
        case 0x30: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    3936:	f8 01       	movw	r30, r16
    3938:	92 81       	ldd	r25, Z+2	; 0x02
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	21 81       	ldd	r18, Z+1	; 0x01
    393e:	8c 01       	movw	r16, r24
    3940:	02 0f       	add	r16, r18
    3942:	11 1d       	adc	r17, r1
            functionY_rate = OVERFLOW_RATE/funcY_freq;
    3944:	98 01       	movw	r18, r16
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	62 e1       	ldi	r22, 0x12	; 18
    394c:	7a e7       	ldi	r23, 0x7A	; 122
    394e:	80 e0       	ldi	r24, 0x00	; 0
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__divmodsi4>
    3956:	20 93 a5 20 	sts	0x20A5, r18
    395a:	30 93 a6 20 	sts	0x20A6, r19
            if (quiet_mode_on == 0)
    395e:	80 91 0b 24 	lds	r24, 0x240B
    3962:	88 23       	and	r24, r24
    3964:	09 f0       	breq	.+2      	; 0x3968 <handle_message_length_3+0x1f8>
    3966:	4f c0       	rjmp	.+158    	; 0x3a06 <handle_message_length_3+0x296>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    3968:	00 d0       	rcall	.+0      	; 0x396a <handle_message_length_3+0x1fa>
    396a:	0f 92       	push	r0
    396c:	8d e5       	ldi	r24, 0x5D	; 93
    396e:	9e e0       	ldi	r25, 0x0E	; 14
    3970:	ed b7       	in	r30, 0x3d	; 61
    3972:	fe b7       	in	r31, 0x3e	; 62
    3974:	81 83       	std	Z+1, r24	; 0x01
    3976:	92 83       	std	Z+2, r25	; 0x02
    3978:	03 83       	std	Z+3, r16	; 0x03
    397a:	14 83       	std	Z+4, r17	; 0x04
    397c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	0f 90       	pop	r0
    3988:	3e c0       	rjmp	.+124    	; 0x3a06 <handle_message_length_3+0x296>
            break;
			
		case 0x35: //set resoultion_x and resolution_y	
			resolution_x = (uint32_t)msg_buffer[1] * 4095/10;
    398a:	f8 01       	movw	r30, r16
    398c:	61 81       	ldd	r22, Z+1	; 0x01
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	2f ef       	ldi	r18, 0xFF	; 255
    3996:	3f e0       	ldi	r19, 0x0F	; 15
    3998:	40 e0       	ldi	r20, 0x00	; 0
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    39a0:	2a e0       	ldi	r18, 0x0A	; 10
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	50 e0       	ldi	r21, 0x00	; 0
    39a8:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    39ac:	20 93 9d 20 	sts	0x209D, r18
    39b0:	30 93 9e 20 	sts	0x209E, r19
			resolution_y = (uint32_t)msg_buffer[2] * 4095/10;
    39b4:	f8 01       	movw	r30, r16
    39b6:	62 81       	ldd	r22, Z+2	; 0x02
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	2f ef       	ldi	r18, 0xFF	; 255
    39c0:	3f e0       	ldi	r19, 0x0F	; 15
    39c2:	40 e0       	ldi	r20, 0x00	; 0
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    39ca:	2a e0       	ldi	r18, 0x0A	; 10
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    39d6:	20 93 9f 20 	sts	0x209F, r18
    39da:	30 93 a0 20 	sts	0x20A0, r19
    39de:	13 c0       	rjmp	.+38     	; 0x3a06 <handle_message_length_3+0x296>
			break;
			
        case 0x40:   //this is a set position function
            if (msg_buffer[2] == 0){
    39e0:	f8 01       	movw	r30, r16
    39e2:	62 81       	ldd	r22, Z+2	; 0x02
    39e4:	66 23       	and	r22, r22
    39e6:	21 f4       	brne	.+8      	; 0x39f0 <handle_message_length_3+0x280>
                set_default_func(msg_buffer[1]);}
    39e8:	81 81       	ldd	r24, Z+1	; 0x01
    39ea:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <set_default_func>
    39ee:	0b c0       	rjmp	.+22     	; 0x3a06 <handle_message_length_3+0x296>
            else
                set_pos_func_in_EEPROM(msg_buffer[1], msg_buffer[2]);
    39f0:	f8 01       	movw	r30, r16
    39f2:	81 81       	ldd	r24, Z+1	; 0x01
    39f4:	0e 94 89 16 	call	0x2d12	; 0x2d12 <set_pos_func_in_EEPROM>
    39f8:	06 c0       	rjmp	.+12     	; 0x3a06 <handle_message_length_3+0x296>
            break;			
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	68 e0       	ldi	r22, 0x08	; 8
    39fe:	45 ed       	ldi	r20, 0xD5	; 213
    3a00:	50 e2       	ldi	r21, 0x20	; 32
    3a02:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    }
}
    3a06:	22 96       	adiw	r28, 0x02	; 2
    3a08:	e5 e0       	ldi	r30, 0x05	; 5
    3a0a:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <__epilogue_restores__+0x1a>

00003a0e <loadPattern2Panels>:
void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
}

void loadPattern2Panels(uint8_t pat_num) {
    3a0e:	aa e2       	ldi	r26, 0x2A	; 42
    3a10:	b2 e0       	ldi	r27, 0x02	; 2
    3a12:	ed e0       	ldi	r30, 0x0D	; 13
    3a14:	fd e1       	ldi	r31, 0x1D	; 29
    3a16:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    3a1a:	a8 2e       	mov	r10, r24
	
	res = f_close(&file1);
	usePreloadedPattern = 1;
	xprintf(PSTR("Successfully load pattern %u to the panels\n"), pat_num);
	
}
    3a1c:	8d b7       	in	r24, 0x3d	; 61
    3a1e:	9e b7       	in	r25, 0x3e	; 62
    3a20:	c9 5d       	subi	r28, 0xD9	; 217
    3a22:	dd 4f       	sbci	r29, 0xFD	; 253
    3a24:	88 83       	st	Y, r24
    3a26:	99 83       	std	Y+1, r25	; 0x01
    3a28:	c7 52       	subi	r28, 0x27	; 39
    3a2a:	d2 40       	sbci	r29, 0x02	; 2
	uint8_t j, panel_index;
	uint8_t *FLASH;
	uint16_t len, cnt, buff_index;
	uint32_t offset;
	//uint16_t X_dac_val, Y_dac_val;
	uint8_t sreg = SREG;
    3a2c:	8f b7       	in	r24, 0x3f	; 63
	uint8_t CMD[34];
	uint16_t f_num;
	uint16_t bytes_per_panel_patten;
				
    
    if (pat_num < 10)
    3a2e:	99 e0       	ldi	r25, 0x09	; 9
    3a30:	9a 15       	cp	r25, r10
    3a32:	80 f0       	brcs	.+32     	; 0x3a54 <loadPattern2Panels+0x46>
        sprintf(str, "pat000%d.pat\0", pat_num);
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <loadPattern2Panels+0x28>
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <loadPattern2Panels+0x2a>
    3a38:	ed b7       	in	r30, 0x3d	; 61
    3a3a:	fe b7       	in	r31, 0x3e	; 62
    3a3c:	31 96       	adiw	r30, 0x01	; 1
    3a3e:	8c e2       	ldi	r24, 0x2C	; 44
    3a40:	94 e2       	ldi	r25, 0x24	; 36
    3a42:	ad b7       	in	r26, 0x3d	; 61
    3a44:	be b7       	in	r27, 0x3e	; 62
    3a46:	11 96       	adiw	r26, 0x01	; 1
    3a48:	8d 93       	st	X+, r24
    3a4a:	9c 93       	st	X, r25
    3a4c:	12 97       	sbiw	r26, 0x02	; 2
    3a4e:	85 e7       	ldi	r24, 0x75	; 117
    3a50:	90 e2       	ldi	r25, 0x20	; 32
    3a52:	20 c0       	rjmp	.+64     	; 0x3a94 <loadPattern2Panels+0x86>
    3a54:	8c e2       	ldi	r24, 0x2C	; 44
    3a56:	94 e2       	ldi	r25, 0x24	; 36
    else if (pat_num < 100)
    3a58:	f3 e6       	ldi	r31, 0x63	; 99
    3a5a:	fa 15       	cp	r31, r10
    3a5c:	70 f0       	brcs	.+28     	; 0x3a7a <loadPattern2Panels+0x6c>
        sprintf(str, "pat00%d.pat\0", pat_num);
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <loadPattern2Panels+0x52>
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <loadPattern2Panels+0x54>
    3a62:	ed b7       	in	r30, 0x3d	; 61
    3a64:	fe b7       	in	r31, 0x3e	; 62
    3a66:	31 96       	adiw	r30, 0x01	; 1
    3a68:	ad b7       	in	r26, 0x3d	; 61
    3a6a:	be b7       	in	r27, 0x3e	; 62
    3a6c:	11 96       	adiw	r26, 0x01	; 1
    3a6e:	8d 93       	st	X+, r24
    3a70:	9c 93       	st	X, r25
    3a72:	12 97       	sbiw	r26, 0x02	; 2
    3a74:	83 e8       	ldi	r24, 0x83	; 131
    3a76:	90 e2       	ldi	r25, 0x20	; 32
    3a78:	0d c0       	rjmp	.+26     	; 0x3a94 <loadPattern2Panels+0x86>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    3a7a:	00 d0       	rcall	.+0      	; 0x3a7c <loadPattern2Panels+0x6e>
    3a7c:	00 d0       	rcall	.+0      	; 0x3a7e <loadPattern2Panels+0x70>
    3a7e:	ed b7       	in	r30, 0x3d	; 61
    3a80:	fe b7       	in	r31, 0x3e	; 62
    3a82:	31 96       	adiw	r30, 0x01	; 1
    3a84:	ad b7       	in	r26, 0x3d	; 61
    3a86:	be b7       	in	r27, 0x3e	; 62
    3a88:	11 96       	adiw	r26, 0x01	; 1
    3a8a:	8d 93       	st	X+, r24
    3a8c:	9c 93       	st	X, r25
    3a8e:	12 97       	sbiw	r26, 0x02	; 2
    3a90:	80 e9       	ldi	r24, 0x90	; 144
    3a92:	90 e2       	ldi	r25, 0x20	; 32
    3a94:	82 83       	std	Z+2, r24	; 0x02
    3a96:	93 83       	std	Z+3, r25	; 0x03
    3a98:	a4 82       	std	Z+4, r10	; 0x04
    3a9a:	15 82       	std	Z+5, r1	; 0x05
    3a9c:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <sprintf>
    3aa0:	ed b7       	in	r30, 0x3d	; 61
    3aa2:	fe b7       	in	r31, 0x3e	; 62
    3aa4:	36 96       	adiw	r30, 0x06	; 6
    3aa6:	ed bf       	out	0x3d, r30	; 61
    3aa8:	fe bf       	out	0x3e, r31	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    3aaa:	83 e7       	ldi	r24, 0x73	; 115
    3aac:	98 e2       	ldi	r25, 0x28	; 40
    3aae:	6c e2       	ldi	r22, 0x2C	; 44
    3ab0:	74 e2       	ldi	r23, 0x24	; 36
    3ab2:	41 e0       	ldi	r20, 0x01	; 1
    3ab4:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
    if (res == FR_OK) {
    3ab8:	88 23       	and	r24, r24
    3aba:	09 f0       	breq	.+2      	; 0x3abe <loadPattern2Panels+0xb0>
    3abc:	2a c2       	rjmp	.+1108   	; 0x3f12 <loadPattern2Panels+0x504>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    3abe:	83 e7       	ldi	r24, 0x73	; 115
    3ac0:	98 e2       	ldi	r25, 0x28	; 40
    3ac2:	be 01       	movw	r22, r28
    3ac4:	69 5d       	subi	r22, 0xD9	; 217
    3ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	52 e0       	ldi	r21, 0x02	; 2
    3acc:	9e 01       	movw	r18, r28
    3ace:	2f 5f       	subi	r18, 0xFF	; 255
    3ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad2:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    3ad6:	88 23       	and	r24, r24
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <loadPattern2Panels+0xce>
    3ada:	14 c2       	rjmp	.+1064   	; 0x3f04 <loadPattern2Panels+0x4f6>
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae0:	80 50       	subi	r24, 0x00	; 0
    3ae2:	92 40       	sbci	r25, 0x02	; 2
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <loadPattern2Panels+0xda>
    3ae6:	0e c2       	rjmp	.+1052   	; 0x3f04 <loadPattern2Panels+0x4f6>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    3ae8:	8f a1       	ldd	r24, Y+39	; 0x27
    3aea:	80 93 26 27 	sts	0x2726, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    3aee:	88 a5       	ldd	r24, Y+40	; 0x28
    3af0:	80 93 27 27 	sts	0x2727, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    3af4:	89 a5       	ldd	r24, Y+41	; 0x29
    3af6:	80 93 c5 24 	sts	0x24C5, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    3afa:	8a a5       	ldd	r24, Y+42	; 0x2a
    3afc:	80 93 c6 24 	sts	0x24C6, r24
            num_panels = pattDataBuff[4];
    3b00:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b02:	80 93 00 24 	sts	0x2400, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    3b06:	4c a5       	ldd	r20, Y+44	; 0x2c
    3b08:	40 93 49 26 	sts	0x2649, r20
            
            
            num_frames = x_num * y_num;
    3b0c:	20 91 c5 24 	lds	r18, 0x24C5
    3b10:	30 91 c6 24 	lds	r19, 0x24C6
    3b14:	80 91 26 27 	lds	r24, 0x2726
    3b18:	90 91 27 27 	lds	r25, 0x2727
    3b1c:	28 9f       	mul	r18, r24
    3b1e:	20 01       	movw	r4, r0
    3b20:	29 9f       	mul	r18, r25
    3b22:	50 0c       	add	r5, r0
    3b24:	38 9f       	mul	r19, r24
    3b26:	50 0c       	add	r5, r0
    3b28:	11 24       	eor	r1, r1
            if ((gs_value >= 11) & (gs_value <= 14)) {
    3b2a:	84 2f       	mov	r24, r20
    3b2c:	8b 50       	subi	r24, 0x0B	; 11
    3b2e:	84 30       	cpi	r24, 0x04	; 4
    3b30:	50 f4       	brcc	.+20     	; 0x3b46 <loadPattern2Panels+0x138>
                gs_value = gs_value - 10;
    3b32:	94 2f       	mov	r25, r20
    3b34:	9a 50       	subi	r25, 0x0A	; 10
    3b36:	90 93 49 26 	sts	0x2649, r25
                row_compress = 1;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	80 93 c7 24 	sts	0x24C7, r24
                bytes_per_panel_frame = gs_value;
    3b40:	90 93 cc 26 	sts	0x26CC, r25
    3b44:	0b c0       	rjmp	.+22     	; 0x3b5c <loadPattern2Panels+0x14e>
            }
            else {
                row_compress = 0;
    3b46:	10 92 c7 24 	sts	0x24C7, r1
                bytes_per_panel_frame = gs_value * 8;
    3b4a:	84 2f       	mov	r24, r20
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	f3 e0       	ldi	r31, 0x03	; 3
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	fa 95       	dec	r31
    3b56:	e1 f7       	brne	.-8      	; 0x3b50 <loadPattern2Panels+0x142>
    3b58:	80 93 cc 26 	sts	0x26CC, r24
            }
            index_x = index_y = 0;
    3b5c:	10 92 71 28 	sts	0x2871, r1
    3b60:	10 92 72 28 	sts	0x2872, r1
    3b64:	80 91 71 28 	lds	r24, 0x2871
    3b68:	90 91 72 28 	lds	r25, 0x2872
    3b6c:	80 93 cd 26 	sts	0x26CD, r24
    3b70:	90 93 ce 26 	sts	0x26CE, r25
            frame_num = 0;
    3b74:	10 92 01 24 	sts	0x2401, r1
    3b78:	10 92 02 24 	sts	0x2402, r1
            Stop = 1;
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    3b82:	10 92 fa 23 	sts	0x23FA, r1
			bytes_per_panel_patten = num_frames*bytes_per_panel_frame;
    3b86:	80 91 cc 26 	lds	r24, 0x26CC
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	84 9d       	mul	r24, r4
    3b8e:	80 01       	movw	r16, r0
    3b90:	85 9d       	mul	r24, r5
    3b92:	10 0d       	add	r17, r0
    3b94:	94 9d       	mul	r25, r4
    3b96:	10 0d       	add	r17, r0
    3b98:	11 24       	eor	r1, r1
            if (quiet_mode_on == 0){
    3b9a:	80 91 0b 24 	lds	r24, 0x240B
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f0       	breq	.+2      	; 0x3ba4 <loadPattern2Panels+0x196>
    3ba2:	54 c0       	rjmp	.+168    	; 0x3c4c <loadPattern2Panels+0x23e>
                xprintf(PSTR("preload pattern %u:\n"), pat_num);
    3ba4:	00 d0       	rcall	.+0      	; 0x3ba6 <loadPattern2Panels+0x198>
    3ba6:	0f 92       	push	r0
    3ba8:	ed b7       	in	r30, 0x3d	; 61
    3baa:	fe b7       	in	r31, 0x3e	; 62
    3bac:	31 96       	adiw	r30, 0x01	; 1
    3bae:	85 e1       	ldi	r24, 0x15	; 21
    3bb0:	9d e0       	ldi	r25, 0x0D	; 13
    3bb2:	ad b7       	in	r26, 0x3d	; 61
    3bb4:	be b7       	in	r27, 0x3e	; 62
    3bb6:	11 96       	adiw	r26, 0x01	; 1
    3bb8:	8d 93       	st	X+, r24
    3bba:	9c 93       	st	X, r25
    3bbc:	12 97       	sbiw	r26, 0x02	; 2
    3bbe:	a2 82       	std	Z+2, r10	; 0x02
    3bc0:	13 82       	std	Z+3, r1	; 0x03
    3bc2:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    3bc6:	ed b7       	in	r30, 0x3d	; 61
    3bc8:	fe b7       	in	r31, 0x3e	; 62
    3bca:	38 97       	sbiw	r30, 0x08	; 8
    3bcc:	ed bf       	out	0x3d, r30	; 61
    3bce:	fe bf       	out	0x3e, r31	; 62
    3bd0:	31 96       	adiw	r30, 0x01	; 1
    3bd2:	82 ec       	ldi	r24, 0xC2	; 194
    3bd4:	9c e0       	ldi	r25, 0x0C	; 12
    3bd6:	ad b7       	in	r26, 0x3d	; 61
    3bd8:	be b7       	in	r27, 0x3e	; 62
    3bda:	11 96       	adiw	r26, 0x01	; 1
    3bdc:	8d 93       	st	X+, r24
    3bde:	9c 93       	st	X, r25
    3be0:	12 97       	sbiw	r26, 0x02	; 2
    3be2:	80 91 26 27 	lds	r24, 0x2726
    3be6:	90 91 27 27 	lds	r25, 0x2727
    3bea:	82 83       	std	Z+2, r24	; 0x02
    3bec:	93 83       	std	Z+3, r25	; 0x03
    3bee:	80 91 c5 24 	lds	r24, 0x24C5
    3bf2:	90 91 c6 24 	lds	r25, 0x24C6
    3bf6:	84 83       	std	Z+4, r24	; 0x04
    3bf8:	95 83       	std	Z+5, r25	; 0x05
    3bfa:	80 91 00 24 	lds	r24, 0x2400
    3bfe:	86 83       	std	Z+6, r24	; 0x06
    3c00:	17 82       	std	Z+7, r1	; 0x07
    3c02:	80 91 49 26 	lds	r24, 0x2649
    3c06:	80 87       	std	Z+8, r24	; 0x08
    3c08:	11 86       	std	Z+9, r1	; 0x09
    3c0a:	80 91 c7 24 	lds	r24, 0x24C7
    3c0e:	82 87       	std	Z+10, r24	; 0x0a
    3c10:	13 86       	std	Z+11, r1	; 0x0b
    3c12:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                        x_num, y_num, num_panels, gs_value, row_compress);
				xprintf(PSTR("  bytes_per_panel_frame = %u\n  bytes_per_panel_pattern = %u\n"),
    3c16:	ed b7       	in	r30, 0x3d	; 61
    3c18:	fe b7       	in	r31, 0x3e	; 62
    3c1a:	36 96       	adiw	r30, 0x06	; 6
    3c1c:	ed bf       	out	0x3d, r30	; 61
    3c1e:	fe bf       	out	0x3e, r31	; 62
    3c20:	31 96       	adiw	r30, 0x01	; 1
    3c22:	85 e8       	ldi	r24, 0x85	; 133
    3c24:	9c e0       	ldi	r25, 0x0C	; 12
    3c26:	ad b7       	in	r26, 0x3d	; 61
    3c28:	be b7       	in	r27, 0x3e	; 62
    3c2a:	11 96       	adiw	r26, 0x01	; 1
    3c2c:	8d 93       	st	X+, r24
    3c2e:	9c 93       	st	X, r25
    3c30:	12 97       	sbiw	r26, 0x02	; 2
    3c32:	80 91 cc 26 	lds	r24, 0x26CC
    3c36:	82 83       	std	Z+2, r24	; 0x02
    3c38:	13 82       	std	Z+3, r1	; 0x03
    3c3a:	04 83       	std	Z+4, r16	; 0x04
    3c3c:	15 83       	std	Z+5, r17	; 0x05
    3c3e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    3c42:	ed b7       	in	r30, 0x3d	; 61
    3c44:	fe b7       	in	r31, 0x3e	; 62
    3c46:	36 96       	adiw	r30, 0x06	; 6
    3c48:	ed bf       	out	0x3d, r30	; 61
    3c4a:	fe bf       	out	0x3e, r31	; 62
                        bytes_per_panel_frame, bytes_per_panel_patten);
            }
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
    3c4c:	f3 e0       	ldi	r31, 0x03	; 3
    3c4e:	01 32       	cpi	r16, 0x21	; 33
    3c50:	1f 07       	cpc	r17, r31
    3c52:	08 f0       	brcs	.+2      	; 0x3c56 <loadPattern2Panels+0x248>
    3c54:	2e c1       	rjmp	.+604    	; 0x3eb2 <loadPattern2Panels+0x4a4>
			{
				//fetch_display_frame(frame_num, index_x, index_y);
				for(f_num = 0; f_num < num_frames; ++f_num)
    3c56:	1b 82       	std	Y+3, r1	; 0x03
    3c58:	1c 82       	std	Y+4, r1	; 0x04
						if ((res == FR_OK) && (cnt == len)) {							
						
							buff_index = 0;
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
								FLASH = &frameBuff[buff_index];
								buff_index = buff_index + bytes_per_panel_frame;
    3c5a:	e5 e0       	ldi	r30, 0x05	; 5
    3c5c:	8e 2e       	mov	r8, r30
    3c5e:	91 2c       	mov	r9, r1
    3c60:	8c 0e       	add	r8, r28
    3c62:	9d 1e       	adc	r9, r29
								for(j=0;j<bytes_per_panel_frame;++j)
								{
									CMD[j] = FLASH[j];
								}
								CMD[bytes_per_panel_frame] = *(uint8_t *)&f_num;
    3c64:	73 e0       	ldi	r23, 0x03	; 3
    3c66:	27 2e       	mov	r2, r23
    3c68:	31 2c       	mov	r3, r1
    3c6a:	2c 0e       	add	r2, r28
    3c6c:	3d 1e       	adc	r3, r29
    3c6e:	1a c1       	rjmp	.+564    	; 0x3ea4 <loadPattern2Panels+0x496>
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
			{
				//fetch_display_frame(frame_num, index_x, index_y);
				for(f_num = 0; f_num < num_frames; ++f_num)
    3c70:	8d b7       	in	r24, 0x3d	; 61
    3c72:	c7 5d       	subi	r28, 0xD7	; 215
    3c74:	dd 4f       	sbci	r29, 0xFD	; 253
    3c76:	88 83       	st	Y, r24
    3c78:	c9 52       	subi	r28, 0x29	; 41
    3c7a:	d2 40       	sbci	r29, 0x02	; 2
    3c7c:	9e b7       	in	r25, 0x3e	; 62
    3c7e:	c6 5d       	subi	r28, 0xD6	; 214
    3c80:	dd 4f       	sbci	r29, 0xFD	; 253
    3c82:	98 83       	st	Y, r25
    3c84:	ca 52       	subi	r28, 0x2A	; 42
    3c86:	d2 40       	sbci	r29, 0x02	; 2
				{
					len = num_panels * bytes_per_panel_frame;
    3c88:	90 91 cc 26 	lds	r25, 0x26CC
    3c8c:	80 91 00 24 	lds	r24, 0x2400
    3c90:	98 9f       	mul	r25, r24
    3c92:	60 01       	movw	r12, r0
    3c94:	11 24       	eor	r1, r1
					block_per_frame = len/512 + 1;
					uint8_t  frameBuff[len];
    3c96:	ad b7       	in	r26, 0x3d	; 61
    3c98:	be b7       	in	r27, 0x3e	; 62
    3c9a:	ac 19       	sub	r26, r12
    3c9c:	bd 09       	sbc	r27, r13
    3c9e:	ad bf       	out	0x3d, r26	; 61
    3ca0:	be bf       	out	0x3e, r27	; 62
    3ca2:	6d b6       	in	r6, 0x3d	; 61
    3ca4:	7e b6       	in	r7, 0x3e	; 62
    3ca6:	08 94       	sec
    3ca8:	61 1c       	adc	r6, r1
    3caa:	71 1c       	adc	r7, r1
					offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    3cac:	6d 2d       	mov	r22, r13
    3cae:	66 95       	lsr	r22
    3cb0:	6f 5f       	subi	r22, 0xFF	; 255
    3cb2:	70 e0       	ldi	r23, 0x00	; 0
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	40 e0       	ldi	r20, 0x00	; 0
    3cba:	50 e0       	ldi	r21, 0x00	; 0
    3cbc:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    3cc0:	7b 01       	movw	r14, r22
    3cc2:	8c 01       	movw	r16, r24
    3cc4:	08 94       	sec
    3cc6:	e1 1c       	adc	r14, r1
    3cc8:	f1 1c       	adc	r15, r1
    3cca:	01 1d       	adc	r16, r1
    3ccc:	11 1d       	adc	r17, r1
    3cce:	69 e0       	ldi	r22, 0x09	; 9
    3cd0:	ee 0c       	add	r14, r14
    3cd2:	ff 1c       	adc	r15, r15
    3cd4:	00 1f       	adc	r16, r16
    3cd6:	11 1f       	adc	r17, r17
    3cd8:	6a 95       	dec	r22
    3cda:	d1 f7       	brne	.-12     	; 0x3cd0 <loadPattern2Panels+0x2c2>

					res = f_lseek(&file1, offset);
    3cdc:	83 e7       	ldi	r24, 0x73	; 115
    3cde:	98 e2       	ldi	r25, 0x28	; 40
    3ce0:	b8 01       	movw	r22, r16
    3ce2:	a7 01       	movw	r20, r14
    3ce4:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
    3ce8:	b8 2e       	mov	r11, r24
					if ((res == FR_OK) && (file1.fptr == offset)) {
    3cea:	88 23       	and	r24, r24
    3cec:	09 f0       	breq	.+2      	; 0x3cf0 <loadPattern2Panels+0x2e2>
    3cee:	91 c0       	rjmp	.+290    	; 0x3e12 <loadPattern2Panels+0x404>
    3cf0:	80 91 79 28 	lds	r24, 0x2879
    3cf4:	90 91 7a 28 	lds	r25, 0x287A
    3cf8:	a0 91 7b 28 	lds	r26, 0x287B
    3cfc:	b0 91 7c 28 	lds	r27, 0x287C
    3d00:	8e 15       	cp	r24, r14
    3d02:	9f 05       	cpc	r25, r15
    3d04:	a0 07       	cpc	r26, r16
    3d06:	b1 07       	cpc	r27, r17
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <loadPattern2Panels+0x2fe>
    3d0a:	83 c0       	rjmp	.+262    	; 0x3e12 <loadPattern2Panels+0x404>
						res = f_read(&file1, frameBuff, len, &cnt);
    3d0c:	83 e7       	ldi	r24, 0x73	; 115
    3d0e:	98 e2       	ldi	r25, 0x28	; 40
    3d10:	b3 01       	movw	r22, r6
    3d12:	a6 01       	movw	r20, r12
    3d14:	9e 01       	movw	r18, r28
    3d16:	2f 5f       	subi	r18, 0xFF	; 255
    3d18:	3f 4f       	sbci	r19, 0xFF	; 255
    3d1a:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    3d1e:	18 2f       	mov	r17, r24
						if ((res == FR_OK) && (cnt == len)) {							
    3d20:	88 23       	and	r24, r24
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <loadPattern2Panels+0x318>
    3d24:	4f c0       	rjmp	.+158    	; 0x3dc4 <loadPattern2Panels+0x3b6>
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2a:	8c 15       	cp	r24, r12
    3d2c:	9d 05       	cpc	r25, r13
    3d2e:	09 f0       	breq	.+2      	; 0x3d32 <loadPattern2Panels+0x324>
    3d30:	49 c0       	rjmp	.+146    	; 0x3dc4 <loadPattern2Panels+0x3b6>
    3d32:	11 e0       	ldi	r17, 0x01	; 1
    3d34:	ee 24       	eor	r14, r14
    3d36:	ff 24       	eor	r15, r15
    3d38:	3f c0       	rjmp	.+126    	; 0x3db8 <loadPattern2Panels+0x3aa>
						
							buff_index = 0;
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
								FLASH = &frameBuff[buff_index];
								buff_index = buff_index + bytes_per_panel_frame;
    3d3a:	00 91 cc 26 	lds	r16, 0x26CC
    3d3e:	93 01       	movw	r18, r6
    3d40:	2e 0d       	add	r18, r14
    3d42:	3f 1d       	adc	r19, r15
    3d44:	d4 01       	movw	r26, r8
    3d46:	f9 01       	movw	r30, r18
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <loadPattern2Panels+0x340>
								for(j=0;j<bytes_per_panel_frame;++j)
								{
									CMD[j] = FLASH[j];
    3d4a:	81 91       	ld	r24, Z+
    3d4c:	8d 93       	st	X+, r24
						
							buff_index = 0;
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
								FLASH = &frameBuff[buff_index];
								buff_index = buff_index + bytes_per_panel_frame;
								for(j=0;j<bytes_per_panel_frame;++j)
    3d4e:	8e 2f       	mov	r24, r30
    3d50:	82 1b       	sub	r24, r18
    3d52:	80 17       	cp	r24, r16
    3d54:	d0 f3       	brcs	.-12     	; 0x3d4a <loadPattern2Panels+0x33c>
								{
									CMD[j] = FLASH[j];
								}
								CMD[bytes_per_panel_frame] = *(uint8_t *)&f_num;
    3d56:	e0 2f       	mov	r30, r16
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	94 01       	movw	r18, r8
    3d5c:	2e 0f       	add	r18, r30
    3d5e:	3f 1f       	adc	r19, r31
    3d60:	d1 01       	movw	r26, r2
    3d62:	8c 91       	ld	r24, X
    3d64:	d9 01       	movw	r26, r18
    3d66:	8c 93       	st	X, r24
								CMD[bytes_per_panel_frame+1] = *((uint8_t *)&f_num + 1);
    3d68:	86 e0       	ldi	r24, 0x06	; 6
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	8c 0f       	add	r24, r28
    3d6e:	9d 1f       	adc	r25, r29
    3d70:	e8 0f       	add	r30, r24
    3d72:	f9 1f       	adc	r31, r25
    3d74:	d1 01       	movw	r26, r2
    3d76:	11 96       	adiw	r26, 0x01	; 1
    3d78:	8c 91       	ld	r24, X
    3d7a:	80 83       	st	Z, r24
								
								if (row_compress == 0)
    3d7c:	80 91 c7 24 	lds	r24, 0x24C7
    3d80:	88 23       	and	r24, r24
    3d82:	21 f4       	brne	.+8      	; 0x3d8c <loadPattern2Panels+0x37e>
									i2cMasterSend(panel_index, bytes_per_panel_frame+2, CMD);
    3d84:	60 2f       	mov	r22, r16
    3d86:	6e 5f       	subi	r22, 0xFE	; 254
    3d88:	81 2f       	mov	r24, r17
    3d8a:	10 c0       	rjmp	.+32     	; 0x3dac <loadPattern2Panels+0x39e>
								else{
									switch(gs_value) {
    3d8c:	80 91 49 26 	lds	r24, 0x2649
    3d90:	83 30       	cpi	r24, 0x03	; 3
    3d92:	39 f0       	breq	.+14     	; 0x3da2 <loadPattern2Panels+0x394>
    3d94:	84 30       	cpi	r24, 0x04	; 4
    3d96:	41 f0       	breq	.+16     	; 0x3da8 <loadPattern2Panels+0x39a>
    3d98:	81 30       	cpi	r24, 0x01	; 1
    3d9a:	59 f4       	brne	.+22     	; 0x3db2 <loadPattern2Panels+0x3a4>
									case 1: //the data format is [5, data, f_num_HB, f_num_LB , x, x]
										i2cMasterSend(panel_index, 5, CMD);
    3d9c:	81 2f       	mov	r24, r17
    3d9e:	65 e0       	ldi	r22, 0x05	; 5
    3da0:	05 c0       	rjmp	.+10     	; 0x3dac <loadPattern2Panels+0x39e>
										break;
									case 3: //the data format is [6, data1, data2, data 3, f_num_HB, f_num_LB , x]
										i2cMasterSend(panel_index, 6, CMD);
    3da2:	81 2f       	mov	r24, r17
    3da4:	66 e0       	ldi	r22, 0x06	; 6
    3da6:	02 c0       	rjmp	.+4      	; 0x3dac <loadPattern2Panels+0x39e>
										break;
									case 4: //the data format is [7, data1, data2, data 3, data4, f_num_HB, f_num_LB , x]
										i2cMasterSend(panel_index, 7, CMD);
    3da8:	81 2f       	mov	r24, r17
    3daa:	67 e0       	ldi	r22, 0x07	; 7
    3dac:	a4 01       	movw	r20, r8
    3dae:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
						if ((res == FR_OK) && (cnt == len)) {							
						
							buff_index = 0;
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
								FLASH = &frameBuff[buff_index];
								buff_index = buff_index + bytes_per_panel_frame;
    3db2:	e0 0e       	add	r14, r16
    3db4:	f1 1c       	adc	r15, r1
					if ((res == FR_OK) && (file1.fptr == offset)) {
						res = f_read(&file1, frameBuff, len, &cnt);
						if ((res == FR_OK) && (cnt == len)) {							
						
							buff_index = 0;
							for (panel_index = 1; panel_index <= num_panels; panel_index++){
    3db6:	1f 5f       	subi	r17, 0xFF	; 255
    3db8:	80 91 00 24 	lds	r24, 0x2400
    3dbc:	81 17       	cp	r24, r17
    3dbe:	08 f0       	brcs	.+2      	; 0x3dc2 <loadPattern2Panels+0x3b4>
    3dc0:	bc cf       	rjmp	.-136    	; 0x3d3a <loadPattern2Panels+0x32c>
    3dc2:	5e c0       	rjmp	.+188    	; 0x3e80 <loadPattern2Panels+0x472>
								}

							} //end of for all panels loop
						}
						else {
							if (quiet_mode_on == 0){
    3dc4:	80 91 0b 24 	lds	r24, 0x240B
    3dc8:	88 23       	and	r24, r24
    3dca:	09 f0       	breq	.+2      	; 0x3dce <loadPattern2Panels+0x3c0>
    3dcc:	59 c0       	rjmp	.+178    	; 0x3e80 <loadPattern2Panels+0x472>
								xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    3dce:	8c e5       	ldi	r24, 0x5C	; 92
    3dd0:	9c e0       	ldi	r25, 0x0C	; 12
    3dd2:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
								xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    3dd6:	ed b7       	in	r30, 0x3d	; 61
    3dd8:	fe b7       	in	r31, 0x3e	; 62
    3dda:	38 97       	sbiw	r30, 0x08	; 8
    3ddc:	ed bf       	out	0x3d, r30	; 61
    3dde:	fe bf       	out	0x3e, r31	; 62
    3de0:	31 96       	adiw	r30, 0x01	; 1
    3de2:	8e e3       	ldi	r24, 0x3E	; 62
    3de4:	9c e0       	ldi	r25, 0x0C	; 12
    3de6:	ad b7       	in	r26, 0x3d	; 61
    3de8:	be b7       	in	r27, 0x3e	; 62
    3dea:	11 96       	adiw	r26, 0x01	; 1
    3dec:	8d 93       	st	X+, r24
    3dee:	9c 93       	st	X, r25
    3df0:	12 97       	sbiw	r26, 0x02	; 2
    3df2:	12 83       	std	Z+2, r17	; 0x02
    3df4:	13 82       	std	Z+3, r1	; 0x03
    3df6:	8b 81       	ldd	r24, Y+3	; 0x03
    3df8:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfa:	84 83       	std	Z+4, r24	; 0x04
    3dfc:	95 83       	std	Z+5, r25	; 0x05
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
    3e02:	86 83       	std	Z+6, r24	; 0x06
    3e04:	97 83       	std	Z+7, r25	; 0x07
    3e06:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    3e0a:	ed b7       	in	r30, 0x3d	; 61
    3e0c:	fe b7       	in	r31, 0x3e	; 62
    3e0e:	38 96       	adiw	r30, 0x08	; 8
    3e10:	27 c0       	rjmp	.+78     	; 0x3e60 <loadPattern2Panels+0x452>
								return;
							}
						}
					} else {
						
						if (quiet_mode_on == 0){
    3e12:	80 91 0b 24 	lds	r24, 0x240B
    3e16:	88 23       	and	r24, r24
    3e18:	99 f5       	brne	.+102    	; 0x3e80 <loadPattern2Panels+0x472>
							xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    3e1a:	84 e1       	ldi	r24, 0x14	; 20
    3e1c:	9c e0       	ldi	r25, 0x0C	; 12
    3e1e:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
							xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    3e22:	8d b7       	in	r24, 0x3d	; 61
    3e24:	9e b7       	in	r25, 0x3e	; 62
    3e26:	0a 97       	sbiw	r24, 0x0a	; 10
    3e28:	8d bf       	out	0x3d, r24	; 61
    3e2a:	9e bf       	out	0x3e, r25	; 62
    3e2c:	ed b7       	in	r30, 0x3d	; 61
    3e2e:	fe b7       	in	r31, 0x3e	; 62
    3e30:	31 96       	adiw	r30, 0x01	; 1
    3e32:	81 ef       	ldi	r24, 0xF1	; 241
    3e34:	9b e0       	ldi	r25, 0x0B	; 11
    3e36:	ad b7       	in	r26, 0x3d	; 61
    3e38:	be b7       	in	r27, 0x3e	; 62
    3e3a:	11 96       	adiw	r26, 0x01	; 1
    3e3c:	8d 93       	st	X+, r24
    3e3e:	9c 93       	st	X, r25
    3e40:	12 97       	sbiw	r26, 0x02	; 2
    3e42:	b2 82       	std	Z+2, r11	; 0x02
    3e44:	13 82       	std	Z+3, r1	; 0x03
    3e46:	8b 81       	ldd	r24, Y+3	; 0x03
    3e48:	9c 81       	ldd	r25, Y+4	; 0x04
    3e4a:	84 83       	std	Z+4, r24	; 0x04
    3e4c:	95 83       	std	Z+5, r25	; 0x05
    3e4e:	e6 82       	std	Z+6, r14	; 0x06
    3e50:	f7 82       	std	Z+7, r15	; 0x07
    3e52:	00 87       	std	Z+8, r16	; 0x08
    3e54:	11 87       	std	Z+9, r17	; 0x09
    3e56:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    3e5a:	ed b7       	in	r30, 0x3d	; 61
    3e5c:	fe b7       	in	r31, 0x3e	; 62
    3e5e:	3a 96       	adiw	r30, 0x0a	; 10
    3e60:	ed bf       	out	0x3d, r30	; 61
    3e62:	fe bf       	out	0x3e, r31	; 62
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
			{
				//fetch_display_frame(frame_num, index_x, index_y);
				for(f_num = 0; f_num < num_frames; ++f_num)
    3e64:	c7 5d       	subi	r28, 0xD7	; 215
    3e66:	dd 4f       	sbci	r29, 0xFD	; 253
    3e68:	88 81       	ld	r24, Y
    3e6a:	c9 52       	subi	r28, 0x29	; 41
    3e6c:	d2 40       	sbci	r29, 0x02	; 2
    3e6e:	c6 5d       	subi	r28, 0xD6	; 214
    3e70:	dd 4f       	sbci	r29, 0xFD	; 253
    3e72:	98 81       	ld	r25, Y
    3e74:	ca 52       	subi	r28, 0x2A	; 42
    3e76:	d2 40       	sbci	r29, 0x02	; 2
    3e78:	9c 01       	movw	r18, r24
    3e7a:	2d bf       	out	0x3d, r18	; 61
    3e7c:	3e bf       	out	0x3e, r19	; 62
    3e7e:	6e c0       	rjmp	.+220    	; 0x3f5c <loadPattern2Panels+0x54e>
						}
					} else {
						
						if (quiet_mode_on == 0){
							xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
							xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    3e80:	c7 5d       	subi	r28, 0xD7	; 215
    3e82:	dd 4f       	sbci	r29, 0xFD	; 253
    3e84:	28 81       	ld	r18, Y
    3e86:	c9 52       	subi	r28, 0x29	; 41
    3e88:	d2 40       	sbci	r29, 0x02	; 2
    3e8a:	c6 5d       	subi	r28, 0xD6	; 214
    3e8c:	dd 4f       	sbci	r29, 0xFD	; 253
    3e8e:	38 81       	ld	r19, Y
    3e90:	ca 52       	subi	r28, 0x2A	; 42
    3e92:	d2 40       	sbci	r29, 0x02	; 2
    3e94:	c9 01       	movw	r24, r18
    3e96:	8d bf       	out	0x3d, r24	; 61
    3e98:	9e bf       	out	0x3e, r25	; 62
			
			//since panel has only 800 byte for the pattern per panel, we need to check before tranfer
			if (bytes_per_panel_patten <= 800)
			{
				//fetch_display_frame(frame_num, index_x, index_y);
				for(f_num = 0; f_num < num_frames; ++f_num)
    3e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e9e:	01 96       	adiw	r24, 0x01	; 1
    3ea0:	8b 83       	std	Y+3, r24	; 0x03
    3ea2:	9c 83       	std	Y+4, r25	; 0x04
    3ea4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ea6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ea8:	24 15       	cp	r18, r4
    3eaa:	35 05       	cpc	r19, r5
    3eac:	08 f4       	brcc	.+2      	; 0x3eb0 <loadPattern2Panels+0x4a2>
    3eae:	e0 ce       	rjmp	.-576    	; 0x3c70 <loadPattern2Panels+0x262>
    3eb0:	39 c0       	rjmp	.+114    	; 0x3f24 <loadPattern2Panels+0x516>
						}
					}
				}
			}
			else{
				xprintf(PSTR("Pattern size is upto 800 byte per panel.\n"));
    3eb2:	0f 92       	push	r0
    3eb4:	0f 92       	push	r0
    3eb6:	87 ec       	ldi	r24, 0xC7	; 199
    3eb8:	9b e0       	ldi	r25, 0x0B	; 11
    3eba:	ad b7       	in	r26, 0x3d	; 61
    3ebc:	be b7       	in	r27, 0x3e	; 62
    3ebe:	11 96       	adiw	r26, 0x01	; 1
    3ec0:	8d 93       	st	X+, r24
    3ec2:	9c 93       	st	X, r25
    3ec4:	12 97       	sbiw	r26, 0x02	; 2
    3ec6:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xprintf(PSTR("This pattern size is %lu\n"), bytes_per_panel_patten);
    3eca:	0f 92       	push	r0
    3ecc:	0f 92       	push	r0
    3ece:	8d ea       	ldi	r24, 0xAD	; 173
    3ed0:	9b e0       	ldi	r25, 0x0B	; 11
    3ed2:	ed b7       	in	r30, 0x3d	; 61
    3ed4:	fe b7       	in	r31, 0x3e	; 62
    3ed6:	81 83       	std	Z+1, r24	; 0x01
    3ed8:	92 83       	std	Z+2, r25	; 0x02
    3eda:	03 83       	std	Z+3, r16	; 0x03
    3edc:	14 83       	std	Z+4, r17	; 0x04
    3ede:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				xprintf(PSTR("Failed to load this Pattern to Panels\n"));
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	86 e8       	ldi	r24, 0x86	; 134
    3ee8:	9b e0       	ldi	r25, 0x0B	; 11
    3eea:	ad b7       	in	r26, 0x3d	; 61
    3eec:	be b7       	in	r27, 0x3e	; 62
    3eee:	11 96       	adiw	r26, 0x01	; 1
    3ef0:	8d 93       	st	X+, r24
    3ef2:	9c 93       	st	X, r25
    3ef4:	12 97       	sbiw	r26, 0x02	; 2
    3ef6:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
				usePreloadedPattern = 0;
    3efa:	10 92 fe 23 	sts	0x23FE, r1
    3efe:	0f 90       	pop	r0
    3f00:	0f 90       	pop	r0
    3f02:	2c c0       	rjmp	.+88     	; 0x3f5c <loadPattern2Panels+0x54e>
				//set_pattern(pat_num); didn't work
				return;
			}
			
        } else {
            if (quiet_mode_on == 0)
    3f04:	80 91 0b 24 	lds	r24, 0x240B
    3f08:	88 23       	and	r24, r24
    3f0a:	41 f5       	brne	.+80     	; 0x3f5c <loadPattern2Panels+0x54e>
                xputs(PSTR("Error reading in pattern file\n"));
    3f0c:	87 e6       	ldi	r24, 0x67	; 103
    3f0e:	9b e0       	ldi	r25, 0x0B	; 11
    3f10:	06 c0       	rjmp	.+12     	; 0x3f1e <loadPattern2Panels+0x510>
			return;
        }
    } else {
        if (quiet_mode_on == 0)
    3f12:	80 91 0b 24 	lds	r24, 0x240B
    3f16:	88 23       	and	r24, r24
    3f18:	09 f5       	brne	.+66     	; 0x3f5c <loadPattern2Panels+0x54e>
            xputs(PSTR("Error opening pattern file\n"));
    3f1a:	8b e4       	ldi	r24, 0x4B	; 75
    3f1c:	9b e0       	ldi	r25, 0x0B	; 11
    3f1e:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    3f22:	1c c0       	rjmp	.+56     	; 0x3f5c <loadPattern2Panels+0x54e>
			return;
    }
	
	res = f_close(&file1);
    3f24:	83 e7       	ldi	r24, 0x73	; 115
    3f26:	98 e2       	ldi	r25, 0x28	; 40
    3f28:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
	usePreloadedPattern = 1;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	80 93 fe 23 	sts	0x23FE, r24
	xprintf(PSTR("Successfully load pattern %u to the panels\n"), pat_num);
    3f32:	00 d0       	rcall	.+0      	; 0x3f34 <loadPattern2Panels+0x526>
    3f34:	0f 92       	push	r0
    3f36:	ed b7       	in	r30, 0x3d	; 61
    3f38:	fe b7       	in	r31, 0x3e	; 62
    3f3a:	31 96       	adiw	r30, 0x01	; 1
    3f3c:	8f e1       	ldi	r24, 0x1F	; 31
    3f3e:	9b e0       	ldi	r25, 0x0B	; 11
    3f40:	ad b7       	in	r26, 0x3d	; 61
    3f42:	be b7       	in	r27, 0x3e	; 62
    3f44:	11 96       	adiw	r26, 0x01	; 1
    3f46:	8d 93       	st	X+, r24
    3f48:	9c 93       	st	X, r25
    3f4a:	12 97       	sbiw	r26, 0x02	; 2
    3f4c:	a2 82       	std	Z+2, r10	; 0x02
    3f4e:	13 82       	std	Z+3, r1	; 0x03
    3f50:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	0f 90       	pop	r0
	
}
    3f5c:	c9 5d       	subi	r28, 0xD9	; 217
    3f5e:	dd 4f       	sbci	r29, 0xFD	; 253
    3f60:	e8 81       	ld	r30, Y
    3f62:	f9 81       	ldd	r31, Y+1	; 0x01
    3f64:	c7 52       	subi	r28, 0x27	; 39
    3f66:	d2 40       	sbci	r29, 0x02	; 2
    3f68:	ed bf       	out	0x3d, r30	; 61
    3f6a:	fe bf       	out	0x3e, r31	; 62
    3f6c:	c6 5d       	subi	r28, 0xD6	; 214
    3f6e:	dd 4f       	sbci	r29, 0xFD	; 253
    3f70:	e2 e1       	ldi	r30, 0x12	; 18
    3f72:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

00003f76 <toggle_trigger>:
}


void toggle_trigger(void) {
    
    digitalToggle(3); //toggle digital 3 to trigger camera
    3f76:	83 e0       	ldi	r24, 0x03	; 3
    3f78:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <digitalToggle>
}
    3f7c:	08 95       	ret

00003f7e <Update_display>:
	
	digitalWrite(1, LOW); // set line low at end of frame write

}

void Update_display(void) {
    3f7e:	ef 92       	push	r14
    3f80:	ff 92       	push	r15
    3f82:	0f 93       	push	r16
    3f84:	cf 93       	push	r28
    3f86:	df 93       	push	r29
    int16_t temp_ADC_val;
	int16_t  X_val, Y_val;

    //there are five modes 0 - OL, 1 - CL, 2 - CL w Bias, 3 - POS mode with ch5, 4 - POS mode from pos func 5 - function DBG mode
    
    switch(x_mode) {
    3f88:	80 91 cb 26 	lds	r24, 0x26CB
    3f8c:	81 30       	cpi	r24, 0x01	; 1
    3f8e:	01 f1       	breq	.+64     	; 0x3fd0 <Update_display+0x52>
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	30 f0       	brcs	.+12     	; 0x3fa0 <Update_display+0x22>
    3f94:	82 30       	cpi	r24, 0x02	; 2
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <Update_display+0x1c>
    3f98:	4a c0       	rjmp	.+148    	; 0x402e <__stack+0x2f>
    3f9a:	ee 24       	eor	r14, r14
    3f9c:	ff 24       	eor	r15, r15
    3f9e:	88 c0       	rjmp	.+272    	; 0x40b0 <__stack+0xb1>
        case 0:   // open loop - use function generator to set x rate
            X_val = 2*function_X[func_read_index_x];
    3fa0:	e0 91 03 24 	lds	r30, 0x2403
            X_rate = ((X_val*gain_x)/10 + 5*bias_x)/2;
    3fa4:	20 91 0a 27 	lds	r18, 0x270A
    3fa8:	30 91 0b 27 	lds	r19, 0x270B
    3fac:	22 0f       	add	r18, r18
    3fae:	33 1f       	adc	r19, r19
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	ee 0f       	add	r30, r30
    3fb4:	ff 1f       	adc	r31, r31
    3fb6:	e8 5d       	subi	r30, 0xD8	; 216
    3fb8:	f8 4d       	sbci	r31, 0xD8	; 216
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	ac 01       	movw	r20, r24
    3fc0:	24 9f       	mul	r18, r20
    3fc2:	c0 01       	movw	r24, r0
    3fc4:	25 9f       	mul	r18, r21
    3fc6:	90 0d       	add	r25, r0
    3fc8:	34 9f       	mul	r19, r20
    3fca:	90 0d       	add	r25, r0
    3fcc:	11 24       	eor	r1, r1
    3fce:	1c c0       	rjmp	.+56     	; 0x4008 <__stack+0x9>
            break;
        case 1: //closed loop, use CH0 - CH1 to set x rate
            X_ADC1 = analogRead(0)/4;  // 1 volt = 102 frames/sec
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    3fd6:	64 e0       	ldi	r22, 0x04	; 4
    3fd8:	70 e0       	ldi	r23, 0x00	; 0
    3fda:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    3fde:	cb 01       	movw	r24, r22
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 5*bias_x)/2;  //X_val can go as high as 4095, gain_x 100fiu and bias_x 250
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	88 0f       	add	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	6a e0       	ldi	r22, 0x0A	; 10
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    3ff0:	80 91 0a 27 	lds	r24, 0x270A
    3ff4:	90 91 0b 27 	lds	r25, 0x270B
    3ff8:	9c 01       	movw	r18, r24
    3ffa:	62 9f       	mul	r22, r18
    3ffc:	c0 01       	movw	r24, r0
    3ffe:	63 9f       	mul	r22, r19
    4000:	90 0d       	add	r25, r0
    4002:	72 9f       	mul	r23, r18
    4004:	90 0d       	add	r25, r0
    4006:	11 24       	eor	r1, r1
    4008:	6a e0       	ldi	r22, 0x0A	; 10
    400a:	70 e0       	ldi	r23, 0x00	; 0
    400c:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    4010:	cb 01       	movw	r24, r22
    4012:	40 91 b4 24 	lds	r20, 0x24B4
    4016:	50 91 b5 24 	lds	r21, 0x24B5
    401a:	9a 01       	movw	r18, r20
    401c:	22 0f       	add	r18, r18
    401e:	33 1f       	adc	r19, r19
    4020:	22 0f       	add	r18, r18
    4022:	33 1f       	adc	r19, r19
    4024:	24 0f       	add	r18, r20
    4026:	35 1f       	adc	r19, r21
    4028:	82 0f       	add	r24, r18
    402a:	93 1f       	adc	r25, r19
    402c:	3c c0       	rjmp	.+120    	; 0x40a6 <__stack+0xa7>
            //    X_rate = 256;
            //else if (X_rate < -256)
            //    X_rate = -256;
            break;
        case 2: //closed loop w bias - use CH0 - CH1, and function gen. to set x rate
            X_ADC1 = analogRead(0)/4; // 1 volt = 102
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
            temp_ADC_val = X_val; //the previous value
            X_val = ( 6*temp_ADC_val + 4*X_ADC1 )/10;   //this is a 60% old value, 40% new value smoother
    4034:	64 e0       	ldi	r22, 0x04	; 4
    4036:	70 e0       	ldi	r23, 0x00	; 0
    4038:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    403c:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch X
            X_rate = (int16_t)((int32_t)(X_val*gain_x)/10 + 2*function_X[func_read_index_x] + 5*bias_x)/2;
    403e:	e0 91 03 24 	lds	r30, 0x2403
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	e8 5d       	subi	r30, 0xD8	; 216
    404a:	f8 4d       	sbci	r31, 0xD8	; 216
    404c:	01 90       	ld	r0, Z+
    404e:	f0 81       	ld	r31, Z
    4050:	e0 2d       	mov	r30, r0
    4052:	ee 0f       	add	r30, r30
    4054:	ff 1f       	adc	r31, r31
    4056:	40 91 b4 24 	lds	r20, 0x24B4
    405a:	50 91 b5 24 	lds	r21, 0x24B5
    405e:	9a 01       	movw	r18, r20
    4060:	22 0f       	add	r18, r18
    4062:	33 1f       	adc	r19, r19
    4064:	22 0f       	add	r18, r18
    4066:	33 1f       	adc	r19, r19
    4068:	24 0f       	add	r18, r20
    406a:	35 1f       	adc	r19, r21
    406c:	e2 0f       	add	r30, r18
    406e:	f3 1f       	adc	r31, r19
    4070:	88 0f       	add	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	88 0f       	add	r24, r24
    4076:	99 1f       	adc	r25, r25
    4078:	6a e0       	ldi	r22, 0x0A	; 10
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    4080:	80 91 0a 27 	lds	r24, 0x270A
    4084:	90 91 0b 27 	lds	r25, 0x270B
    4088:	ac 01       	movw	r20, r24
    408a:	64 9f       	mul	r22, r20
    408c:	c0 01       	movw	r24, r0
    408e:	65 9f       	mul	r22, r21
    4090:	90 0d       	add	r25, r0
    4092:	74 9f       	mul	r23, r20
    4094:	90 0d       	add	r25, r0
    4096:	11 24       	eor	r1, r1
    4098:	6a e0       	ldi	r22, 0x0A	; 10
    409a:	70 e0       	ldi	r23, 0x00	; 0
    409c:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    40a0:	cf 01       	movw	r24, r30
    40a2:	86 0f       	add	r24, r22
    40a4:	97 1f       	adc	r25, r23
    40a6:	62 e0       	ldi	r22, 0x02	; 2
    40a8:	70 e0       	ldi	r23, 0x00	; 0
    40aa:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    40ae:	7b 01       	movw	r14, r22
            break;
    }

	
    
    switch(y_mode) {
    40b0:	80 91 09 27 	lds	r24, 0x2709
    40b4:	81 30       	cpi	r24, 0x01	; 1
    40b6:	01 f1       	breq	.+64     	; 0x40f8 <__stack+0xf9>
    40b8:	81 30       	cpi	r24, 0x01	; 1
    40ba:	30 f0       	brcs	.+12     	; 0x40c8 <__stack+0xc9>
    40bc:	82 30       	cpi	r24, 0x02	; 2
    40be:	09 f4       	brne	.+2      	; 0x40c2 <__stack+0xc3>
    40c0:	4a c0       	rjmp	.+148    	; 0x4156 <__stack+0x157>
    40c2:	c0 e0       	ldi	r28, 0x00	; 0
    40c4:	d0 e0       	ldi	r29, 0x00	; 0
    40c6:	88 c0       	rjmp	.+272    	; 0x41d8 <__stack+0x1d9>
        case 0:   // open loop - use function generator to set x rate
            Y_val = 2*function_Y[func_read_index_y];
    40c8:	e0 91 04 24 	lds	r30, 0x2404
            Y_rate = ((Y_val*gain_y)/10 + 5*bias_y)/2;
    40cc:	20 91 cf 26 	lds	r18, 0x26CF
    40d0:	30 91 d0 26 	lds	r19, 0x26D0
    40d4:	22 0f       	add	r18, r18
    40d6:	33 1f       	adc	r19, r19
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	ee 0f       	add	r30, r30
    40dc:	ff 1f       	adc	r31, r31
    40de:	e8 53       	subi	r30, 0x38	; 56
    40e0:	fb 4d       	sbci	r31, 0xDB	; 219
    40e2:	80 81       	ld	r24, Z
    40e4:	91 81       	ldd	r25, Z+1	; 0x01
    40e6:	ac 01       	movw	r20, r24
    40e8:	24 9f       	mul	r18, r20
    40ea:	c0 01       	movw	r24, r0
    40ec:	25 9f       	mul	r18, r21
    40ee:	90 0d       	add	r25, r0
    40f0:	34 9f       	mul	r19, r20
    40f2:	90 0d       	add	r25, r0
    40f4:	11 24       	eor	r1, r1
    40f6:	1c c0       	rjmp	.+56     	; 0x4130 <__stack+0x131>
            break;
        case 1: //closed loop, use CH2 - CH3 to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102fps
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    40fe:	64 e0       	ldi	r22, 0x04	; 4
    4100:	70 e0       	ldi	r23, 0x00	; 0
    4102:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    4106:	cb 01       	movw	r24, r22
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 5*bias_y)/2; //Y_val can go as high as 4095, gain_y 100, and bias_y 250.
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	88 0f       	add	r24, r24
    410e:	99 1f       	adc	r25, r25
    4110:	6a e0       	ldi	r22, 0x0A	; 10
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    4118:	80 91 cf 26 	lds	r24, 0x26CF
    411c:	90 91 d0 26 	lds	r25, 0x26D0
    4120:	9c 01       	movw	r18, r24
    4122:	62 9f       	mul	r22, r18
    4124:	c0 01       	movw	r24, r0
    4126:	63 9f       	mul	r22, r19
    4128:	90 0d       	add	r25, r0
    412a:	72 9f       	mul	r23, r18
    412c:	90 0d       	add	r25, r0
    412e:	11 24       	eor	r1, r1
    4130:	6a e0       	ldi	r22, 0x0A	; 10
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    4138:	cb 01       	movw	r24, r22
    413a:	40 91 bf 2a 	lds	r20, 0x2ABF
    413e:	50 91 c0 2a 	lds	r21, 0x2AC0
    4142:	9a 01       	movw	r18, r20
    4144:	22 0f       	add	r18, r18
    4146:	33 1f       	adc	r19, r19
    4148:	22 0f       	add	r18, r18
    414a:	33 1f       	adc	r19, r19
    414c:	24 0f       	add	r18, r20
    414e:	35 1f       	adc	r19, r21
    4150:	82 0f       	add	r24, r18
    4152:	93 1f       	adc	r25, r19
    4154:	3c c0       	rjmp	.+120    	; 0x41ce <__stack+0x1cf>
            //else if (Y_rate < -256)
            //    Y_rate = -256;
            
            break;
        case 2: //closed loop w bias - use CH2 - CH3, and function gen. to set x rate
            Y_ADC1 = analogRead(1)/4; // 1 volt = 102
    4156:	81 e0       	ldi	r24, 0x01	; 1
    4158:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
            temp_ADC_val = Y_val; //the previous value
            Y_val = ( 6*temp_ADC_val + 4*Y_ADC1)/10;   //this is a 60% old value, 40% new value smoother
    415c:	64 e0       	ldi	r22, 0x04	; 4
    415e:	70 e0       	ldi	r23, 0x00	; 0
    4160:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    4164:	cb 01       	movw	r24, r22
            //add in the bias to CL mode on ch Y
            Y_rate = (int16_t)((int32_t)(Y_val*gain_y)/10 + 2*function_Y[func_read_index_y] + 5*bias_y)/2; //Y_val can go as high as 4095
    4166:	e0 91 04 24 	lds	r30, 0x2404
    416a:	f0 e0       	ldi	r31, 0x00	; 0
    416c:	ee 0f       	add	r30, r30
    416e:	ff 1f       	adc	r31, r31
    4170:	e8 53       	subi	r30, 0x38	; 56
    4172:	fb 4d       	sbci	r31, 0xDB	; 219
    4174:	01 90       	ld	r0, Z+
    4176:	f0 81       	ld	r31, Z
    4178:	e0 2d       	mov	r30, r0
    417a:	ee 0f       	add	r30, r30
    417c:	ff 1f       	adc	r31, r31
    417e:	40 91 bf 2a 	lds	r20, 0x2ABF
    4182:	50 91 c0 2a 	lds	r21, 0x2AC0
    4186:	9a 01       	movw	r18, r20
    4188:	22 0f       	add	r18, r18
    418a:	33 1f       	adc	r19, r19
    418c:	22 0f       	add	r18, r18
    418e:	33 1f       	adc	r19, r19
    4190:	24 0f       	add	r18, r20
    4192:	35 1f       	adc	r19, r21
    4194:	e2 0f       	add	r30, r18
    4196:	f3 1f       	adc	r31, r19
    4198:	88 0f       	add	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	6a e0       	ldi	r22, 0x0A	; 10
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    41a8:	80 91 cf 26 	lds	r24, 0x26CF
    41ac:	90 91 d0 26 	lds	r25, 0x26D0
    41b0:	ac 01       	movw	r20, r24
    41b2:	64 9f       	mul	r22, r20
    41b4:	c0 01       	movw	r24, r0
    41b6:	65 9f       	mul	r22, r21
    41b8:	90 0d       	add	r25, r0
    41ba:	74 9f       	mul	r23, r20
    41bc:	90 0d       	add	r25, r0
    41be:	11 24       	eor	r1, r1
    41c0:	6a e0       	ldi	r22, 0x0A	; 10
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    41c8:	cf 01       	movw	r24, r30
    41ca:	86 0f       	add	r24, r22
    41cc:	97 1f       	adc	r25, r23
    41ce:	62 e0       	ldi	r22, 0x02	; 2
    41d0:	70 e0       	ldi	r23, 0x00	; 0
    41d2:	0e 94 3e 51 	call	0xa27c	; 0xa27c <__divmodhi4>
    41d6:	eb 01       	movw	r28, r22
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so gain_x of 10 is 1X gain, gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (Stop == 1){
    41d8:	80 91 9c 20 	lds	r24, 0x209C
    41dc:	81 30       	cpi	r24, 0x01	; 1
    41de:	59 f1       	breq	.+86     	; 0x4236 <__stack+0x237>
        X_rate = Y_rate = 0;
    }
    
    if (X_rate > 0)
    41e0:	1e 14       	cp	r1, r14
    41e2:	1f 04       	cpc	r1, r15
    41e4:	74 f4       	brge	.+28     	; 0x4202 <__stack+0x203>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    41e6:	97 01       	movw	r18, r14
    41e8:	44 27       	eor	r20, r20
    41ea:	37 fd       	sbrc	r19, 7
    41ec:	40 95       	com	r20
    41ee:	54 2f       	mov	r21, r20
    41f0:	62 e1       	ldi	r22, 0x12	; 18
    41f2:	7a e7       	ldi	r23, 0x7A	; 122
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    41fc:	83 eb       	ldi	r24, 0xB3	; 179
    41fe:	9b e0       	ldi	r25, 0x0B	; 11
    4200:	13 c0       	rjmp	.+38     	; 0x4228 <__stack+0x229>
    else if (X_rate < 0)
    4202:	e1 14       	cp	r14, r1
    4204:	f1 04       	cpc	r15, r1
    4206:	c9 f0       	breq	.+50     	; 0x423a <__stack+0x23b>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_RATE/abs(X_rate), 2, 1);
    4208:	22 27       	eor	r18, r18
    420a:	33 27       	eor	r19, r19
    420c:	2e 19       	sub	r18, r14
    420e:	3f 09       	sbc	r19, r15
    4210:	44 27       	eor	r20, r20
    4212:	37 fd       	sbrc	r19, 7
    4214:	40 95       	com	r20
    4216:	54 2f       	mov	r21, r20
    4218:	62 e1       	ldi	r22, 0x12	; 18
    421a:	7a e7       	ldi	r23, 0x7A	; 122
    421c:	80 e0       	ldi	r24, 0x00	; 0
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    4224:	87 e2       	ldi	r24, 0x27	; 39
    4226:	9c e0       	ldi	r25, 0x0C	; 12
    4228:	ba 01       	movw	r22, r20
    422a:	a9 01       	movw	r20, r18
    422c:	22 e0       	ldi	r18, 0x02	; 2
    422e:	01 e0       	ldi	r16, 0x01	; 1
    4230:	0e 94 d0 3c 	call	0x79a0	; 0x79a0 <Update_Reg_Handler>
    4234:	0e c0       	rjmp	.+28     	; 0x4252 <__stack+0x253>
    4236:	c0 e0       	ldi	r28, 0x00	; 0
    4238:	d0 e0       	ldi	r29, 0x00	; 0
    else     //X_rate == 0
        Update_Reg_Handler(decrement_index_x, (UPDATE_RATE), 2, 0);
    423a:	87 e2       	ldi	r24, 0x27	; 39
    423c:	9c e0       	ldi	r25, 0x0C	; 12
    423e:	4e e3       	ldi	r20, 0x3E	; 62
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	60 e0       	ldi	r22, 0x00	; 0
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	22 e0       	ldi	r18, 0x02	; 2
    4248:	00 e0       	ldi	r16, 0x00	; 0
    424a:	0e 94 d0 3c 	call	0x79a0	; 0x79a0 <Update_Reg_Handler>
    424e:	ee 24       	eor	r14, r14
    4250:	ff 24       	eor	r15, r15
    
    
    if (Y_rate > 0)
    4252:	1c 16       	cp	r1, r28
    4254:	1d 06       	cpc	r1, r29
    4256:	74 f4       	brge	.+28     	; 0x4274 <__stack+0x275>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    4258:	9e 01       	movw	r18, r28
    425a:	44 27       	eor	r20, r20
    425c:	37 fd       	sbrc	r19, 7
    425e:	40 95       	com	r20
    4260:	54 2f       	mov	r21, r20
    4262:	62 e1       	ldi	r22, 0x12	; 18
    4264:	7a e7       	ldi	r23, 0x7A	; 122
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    426e:	8b ee       	ldi	r24, 0xEB	; 235
    4270:	9b e0       	ldi	r25, 0x0B	; 11
    4272:	12 c0       	rjmp	.+36     	; 0x4298 <__stack+0x299>
    else if (Y_rate < 0)
    4274:	20 97       	sbiw	r28, 0x00	; 0
    4276:	a9 f0       	breq	.+42     	; 0x42a2 <__stack+0x2a3>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_RATE/abs(Y_rate), 3, 1);
    4278:	22 27       	eor	r18, r18
    427a:	33 27       	eor	r19, r19
    427c:	2c 1b       	sub	r18, r28
    427e:	3d 0b       	sbc	r19, r29
    4280:	44 27       	eor	r20, r20
    4282:	37 fd       	sbrc	r19, 7
    4284:	40 95       	com	r20
    4286:	54 2f       	mov	r21, r20
    4288:	62 e1       	ldi	r22, 0x12	; 18
    428a:	7a e7       	ldi	r23, 0x7A	; 122
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    4294:	8f e5       	ldi	r24, 0x5F	; 95
    4296:	9c e0       	ldi	r25, 0x0C	; 12
    4298:	ba 01       	movw	r22, r20
    429a:	a9 01       	movw	r20, r18
    429c:	23 e0       	ldi	r18, 0x03	; 3
    429e:	01 e0       	ldi	r16, 0x01	; 1
    42a0:	08 c0       	rjmp	.+16     	; 0x42b2 <__stack+0x2b3>
    else      //Y_rate == 0
        Update_Reg_Handler(decrement_index_y, (UPDATE_RATE), 3, 0);
    42a2:	8f e5       	ldi	r24, 0x5F	; 95
    42a4:	9c e0       	ldi	r25, 0x0C	; 12
    42a6:	4e e3       	ldi	r20, 0x3E	; 62
    42a8:	50 e0       	ldi	r21, 0x00	; 0
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	23 e0       	ldi	r18, 0x03	; 3
    42b0:	00 e0       	ldi	r16, 0x00	; 0
    42b2:	0e 94 d0 3c 	call	0x79a0	; 0x79a0 <Update_Reg_Handler>
    
    //if the rates are too high, track the largest one to set warning LED
    x_gt_y = (X_rate >= Y_rate);
    42b6:	10 92 fb 23 	sts	0x23FB, r1
    42ba:	ec 16       	cp	r14, r28
    42bc:	fd 06       	cpc	r15, r29
    42be:	1c f0       	brlt	.+6      	; 0x42c6 <__stack+0x2c7>
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	80 93 fb 23 	sts	0x23FB, r24
}
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	0f 91       	pop	r16
    42cc:	ff 90       	pop	r15
    42ce:	ef 90       	pop	r14
    42d0:	08 95       	ret

000042d2 <fetch_display_frame>:
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    digitalWrite(1, LOW); // set line low at end of frame write
}


void fetch_display_frame(uint16_t f_num, uint16_t Xindex, uint16_t Yindex){
    42d2:	ab e0       	ldi	r26, 0x0B	; 11
    42d4:	b0 e0       	ldi	r27, 0x00	; 0
    42d6:	ef e6       	ldi	r30, 0x6F	; 111
    42d8:	f1 e2       	ldi	r31, 0x21	; 33
    42da:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    42de:	5c 01       	movw	r10, r24
    42e0:	2b 01       	movw	r4, r22
    42e2:	1a 01       	movw	r2, r20
			digitalWrite(0, HIGH);   // turn on laser
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write

}
    42e4:	8d b7       	in	r24, 0x3d	; 61
    42e6:	9e b7       	in	r25, 0x3e	; 62
    42e8:	89 87       	std	Y+9, r24	; 0x09
    42ea:	9a 87       	std	Y+10, r25	; 0x0a
    uint8_t *FLASH;
    uint16_t len, cnt, buff_index;
    uint32_t offset;
    uint8_t res;
    uint16_t X_dac_val, Y_dac_val;
    uint8_t sreg = SREG;
    42ec:	8f b7       	in	r24, 0x3f	; 63
	uint8_t block_per_frame;
	uint8_t tempVal, bitIndex, arrayIndex;
	uint8_t CMD[2];
	
	digitalWrite(1, HIGH); // set line high at start of frame write			
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	61 e0       	ldi	r22, 0x01	; 1
    42f2:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
	if (display_flag > 1){      //if flag gets bigger than 1 -> frame skipped
    42f6:	80 91 fa 23 	lds	r24, 0x23FA
    42fa:	82 30       	cpi	r24, 0x02	; 2
    42fc:	18 f0       	brcs	.+6      	; 0x4304 <fetch_display_frame+0x32>
			ledToggle(1);    //toggle LED 1
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <ledToggle>
	}
				
	display_flag = 0;  //clear the display flag
    4304:	10 92 fa 23 	sts	0x23FA, r1
	
	if(usePreloadedPattern == 0)
    4308:	80 91 fe 23 	lds	r24, 0x23FE
    430c:	88 23       	and	r24, r24
    430e:	09 f0       	breq	.+2      	; 0x4312 <fetch_display_frame+0x40>
    4310:	47 c2       	rjmp	.+1166   	; 0x47a0 <fetch_display_frame+0x4ce>
    4312:	8d b6       	in	r8, 0x3d	; 61
    4314:	9e b7       	in	r25, 0x3e	; 62
    4316:	9b 87       	std	Y+11, r25	; 0x0b
	{
		len = num_panels * bytes_per_panel_frame;
    4318:	80 91 cc 26 	lds	r24, 0x26CC
    431c:	90 91 00 24 	lds	r25, 0x2400
    4320:	89 9f       	mul	r24, r25
    4322:	60 01       	movw	r12, r0
    4324:	11 24       	eor	r1, r1
		
		if (len%512 != 0)
    4326:	c6 01       	movw	r24, r12
    4328:	91 70       	andi	r25, 0x01	; 1
    432a:	6d 2d       	mov	r22, r13
    432c:	66 95       	lsr	r22
    432e:	89 2b       	or	r24, r25
    4330:	09 f0       	breq	.+2      	; 0x4334 <fetch_display_frame+0x62>
			block_per_frame = len/512 + 1;
    4332:	6f 5f       	subi	r22, 0xFF	; 255
		else 
			block_per_frame = len/512;
			
		uint8_t  frameBuff[len];
    4334:	ad b7       	in	r26, 0x3d	; 61
    4336:	be b7       	in	r27, 0x3e	; 62
    4338:	ac 19       	sub	r26, r12
    433a:	bd 09       	sbc	r27, r13
    433c:	ad bf       	out	0x3d, r26	; 61
    433e:	be bf       	out	0x3e, r27	; 62
    4340:	6d b6       	in	r6, 0x3d	; 61
    4342:	7e b6       	in	r7, 0x3e	; 62
    4344:	08 94       	sec
    4346:	61 1c       	adc	r6, r1
    4348:	71 1c       	adc	r7, r1
		offset = 512 + (uint32_t)f_num * 512 * block_per_frame;
    434a:	70 e0       	ldi	r23, 0x00	; 0
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	95 01       	movw	r18, r10
    4352:	40 e0       	ldi	r20, 0x00	; 0
    4354:	50 e0       	ldi	r21, 0x00	; 0
    4356:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    435a:	7b 01       	movw	r14, r22
    435c:	8c 01       	movw	r16, r24
    435e:	08 94       	sec
    4360:	e1 1c       	adc	r14, r1
    4362:	f1 1c       	adc	r15, r1
    4364:	01 1d       	adc	r16, r1
    4366:	11 1d       	adc	r17, r1
    4368:	e9 e0       	ldi	r30, 0x09	; 9
    436a:	ee 0c       	add	r14, r14
    436c:	ff 1c       	adc	r15, r15
    436e:	00 1f       	adc	r16, r16
    4370:	11 1f       	adc	r17, r17
    4372:	ea 95       	dec	r30
    4374:	d1 f7       	brne	.-12     	; 0x436a <fetch_display_frame+0x98>

		res = f_lseek(&file1, offset);
    4376:	83 e7       	ldi	r24, 0x73	; 115
    4378:	98 e2       	ldi	r25, 0x28	; 40
    437a:	b8 01       	movw	r22, r16
    437c:	a7 01       	movw	r20, r14
    437e:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
    4382:	98 2e       	mov	r9, r24
		if ((res == FR_OK) && (file1.fptr == offset)) {
    4384:	88 23       	and	r24, r24
    4386:	09 f0       	breq	.+2      	; 0x438a <fetch_display_frame+0xb8>
    4388:	de c1       	rjmp	.+956    	; 0x4746 <fetch_display_frame+0x474>
    438a:	80 91 79 28 	lds	r24, 0x2879
    438e:	90 91 7a 28 	lds	r25, 0x287A
    4392:	a0 91 7b 28 	lds	r26, 0x287B
    4396:	b0 91 7c 28 	lds	r27, 0x287C
    439a:	8e 15       	cp	r24, r14
    439c:	9f 05       	cpc	r25, r15
    439e:	a0 07       	cpc	r26, r16
    43a0:	b1 07       	cpc	r27, r17
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <fetch_display_frame+0xd4>
    43a4:	d0 c1       	rjmp	.+928    	; 0x4746 <fetch_display_frame+0x474>
			res = f_read(&file1, frameBuff, len, &cnt);
    43a6:	83 e7       	ldi	r24, 0x73	; 115
    43a8:	98 e2       	ldi	r25, 0x28	; 40
    43aa:	b3 01       	movw	r22, r6
    43ac:	a6 01       	movw	r20, r12
    43ae:	9e 01       	movw	r18, r28
    43b0:	2f 5f       	subi	r18, 0xFF	; 255
    43b2:	3f 4f       	sbci	r19, 0xFF	; 255
    43b4:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
    43b8:	18 2f       	mov	r17, r24
			if ((res == FR_OK) && (cnt == len)) {	
    43ba:	88 23       	and	r24, r24
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <fetch_display_frame+0xee>
    43be:	9e c1       	rjmp	.+828    	; 0x46fc <fetch_display_frame+0x42a>
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	9a 81       	ldd	r25, Y+2	; 0x02
    43c4:	8c 15       	cp	r24, r12
    43c6:	9d 05       	cpc	r25, r13
    43c8:	09 f0       	breq	.+2      	; 0x43cc <fetch_display_frame+0xfa>
    43ca:	98 c1       	rjmp	.+816    	; 0x46fc <fetch_display_frame+0x42a>
    43cc:	dd 24       	eor	r13, r13
    43ce:	d3 94       	inc	r13
    43d0:	ee 24       	eor	r14, r14
    43d2:	ff 24       	eor	r15, r15
														if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
															gscale[0] = FLASH[0];
															gscale[1] = FLASH[8];
															gscale[2] = FLASH[16];
															gscale[3] = FLASH[24];
															i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    43d4:	75 e0       	ldi	r23, 0x05	; 5
    43d6:	a7 2e       	mov	r10, r23
    43d8:	b1 2c       	mov	r11, r1
    43da:	ac 0e       	add	r10, r28
    43dc:	bd 1e       	adc	r11, r29
    43de:	88 c1       	rjmp	.+784    	; 0x46f0 <fetch_display_frame+0x41e>
			

				buff_index = 0;
				
				for (panel_index = 1; panel_index <= num_panels; panel_index++){
					FLASH = &frameBuff[buff_index];
    43e0:	83 01       	movw	r16, r6
    43e2:	0e 0d       	add	r16, r14
    43e4:	1f 1d       	adc	r17, r15
					buff_index = buff_index + bytes_per_panel_frame;
    43e6:	c0 90 cc 26 	lds	r12, 0x26CC

					packet_sent = 0; //used with compression to simplify coniditionals.
					if (ident_compress == 1) {
    43ea:	80 91 9c 28 	lds	r24, 0x289C
    43ee:	81 30       	cpi	r24, 0x01	; 1
    43f0:	09 f0       	breq	.+2      	; 0x43f4 <fetch_display_frame+0x122>
    43f2:	75 c1       	rjmp	.+746    	; 0x46de <fetch_display_frame+0x40c>
						if (bytes_per_panel_frame == 8){
    43f4:	b8 e0       	ldi	r27, 0x08	; 8
    43f6:	cb 16       	cp	r12, r27
    43f8:	f1 f4       	brne	.+60     	; 0x4436 <fetch_display_frame+0x164>
							if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    43fa:	f8 01       	movw	r30, r16
    43fc:	90 81       	ld	r25, Z
    43fe:	81 81       	ldd	r24, Z+1	; 0x01
    4400:	98 17       	cp	r25, r24
    4402:	c9 f4       	brne	.+50     	; 0x4436 <fetch_display_frame+0x164>
    4404:	42 81       	ldd	r20, Z+2	; 0x02
    4406:	83 81       	ldd	r24, Z+3	; 0x03
    4408:	48 17       	cp	r20, r24
    440a:	a9 f4       	brne	.+42     	; 0x4436 <fetch_display_frame+0x164>
    440c:	34 81       	ldd	r19, Z+4	; 0x04
    440e:	85 81       	ldd	r24, Z+5	; 0x05
    4410:	38 17       	cp	r19, r24
    4412:	89 f4       	brne	.+34     	; 0x4436 <fetch_display_frame+0x164>
    4414:	26 81       	ldd	r18, Z+6	; 0x06
    4416:	87 81       	ldd	r24, Z+7	; 0x07
    4418:	28 17       	cp	r18, r24
    441a:	69 f4       	brne	.+26     	; 0x4436 <fetch_display_frame+0x164>
								if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    441c:	94 17       	cp	r25, r20
    441e:	59 f4       	brne	.+22     	; 0x4436 <fetch_display_frame+0x164>
    4420:	93 17       	cp	r25, r19
    4422:	49 f4       	brne	.+18     	; 0x4436 <fetch_display_frame+0x164>
    4424:	92 17       	cp	r25, r18
    4426:	39 f4       	brne	.+14     	; 0x4436 <fetch_display_frame+0x164>
									i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    4428:	8d 2d       	mov	r24, r13
    442a:	61 e0       	ldi	r22, 0x01	; 1
    442c:	a8 01       	movw	r20, r16
    442e:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    4432:	51 e0       	ldi	r21, 0x01	; 1
    4434:	01 c0       	rjmp	.+2      	; 0x4438 <fetch_display_frame+0x166>
    4436:	50 e0       	ldi	r21, 0x00	; 0
									packet_sent = 1;
								} //end of second round of comparisons
							} //end of first round of byte comparisons
						} // end of check if bytes_per_panel_frame is 8
						
						if (bytes_per_panel_frame == 24){
    4438:	80 91 cc 26 	lds	r24, 0x26CC
    443c:	88 31       	cpi	r24, 0x18	; 24
    443e:	09 f0       	breq	.+2      	; 0x4442 <fetch_display_frame+0x170>
    4440:	8c c0       	rjmp	.+280    	; 0x455a <fetch_display_frame+0x288>
							if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    4442:	f3 01       	movw	r30, r6
    4444:	ee 0d       	add	r30, r14
    4446:	ff 1d       	adc	r31, r15
    4448:	e0 81       	ld	r30, Z
    444a:	d8 01       	movw	r26, r16
    444c:	11 96       	adiw	r26, 0x01	; 1
    444e:	8c 91       	ld	r24, X
    4450:	11 97       	sbiw	r26, 0x01	; 1
    4452:	e8 17       	cp	r30, r24
    4454:	09 f0       	breq	.+2      	; 0x4458 <fetch_display_frame+0x186>
    4456:	81 c0       	rjmp	.+258    	; 0x455a <fetch_display_frame+0x288>
    4458:	12 96       	adiw	r26, 0x02	; 2
    445a:	3c 91       	ld	r19, X
    445c:	12 97       	sbiw	r26, 0x02	; 2
    445e:	13 96       	adiw	r26, 0x03	; 3
    4460:	8c 91       	ld	r24, X
    4462:	13 97       	sbiw	r26, 0x03	; 3
    4464:	38 17       	cp	r19, r24
    4466:	09 f0       	breq	.+2      	; 0x446a <fetch_display_frame+0x198>
    4468:	78 c0       	rjmp	.+240    	; 0x455a <fetch_display_frame+0x288>
    446a:	14 96       	adiw	r26, 0x04	; 4
    446c:	2c 91       	ld	r18, X
    446e:	14 97       	sbiw	r26, 0x04	; 4
    4470:	15 96       	adiw	r26, 0x05	; 5
    4472:	8c 91       	ld	r24, X
    4474:	15 97       	sbiw	r26, 0x05	; 5
    4476:	28 17       	cp	r18, r24
    4478:	09 f0       	breq	.+2      	; 0x447c <fetch_display_frame+0x1aa>
    447a:	6f c0       	rjmp	.+222    	; 0x455a <fetch_display_frame+0x288>
    447c:	16 96       	adiw	r26, 0x06	; 6
    447e:	9c 91       	ld	r25, X
    4480:	16 97       	sbiw	r26, 0x06	; 6
    4482:	17 96       	adiw	r26, 0x07	; 7
    4484:	8c 91       	ld	r24, X
    4486:	17 97       	sbiw	r26, 0x07	; 7
    4488:	98 17       	cp	r25, r24
    448a:	09 f0       	breq	.+2      	; 0x448e <fetch_display_frame+0x1bc>
    448c:	66 c0       	rjmp	.+204    	; 0x455a <fetch_display_frame+0x288>
								if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    448e:	e3 17       	cp	r30, r19
    4490:	09 f0       	breq	.+2      	; 0x4494 <fetch_display_frame+0x1c2>
    4492:	63 c0       	rjmp	.+198    	; 0x455a <fetch_display_frame+0x288>
    4494:	e2 17       	cp	r30, r18
    4496:	09 f0       	breq	.+2      	; 0x449a <fetch_display_frame+0x1c8>
    4498:	60 c0       	rjmp	.+192    	; 0x455a <fetch_display_frame+0x288>
    449a:	e9 17       	cp	r30, r25
    449c:	09 f0       	breq	.+2      	; 0x44a0 <fetch_display_frame+0x1ce>
    449e:	5d c0       	rjmp	.+186    	; 0x455a <fetch_display_frame+0x288>
									if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    44a0:	18 96       	adiw	r26, 0x08	; 8
    44a2:	9c 91       	ld	r25, X
    44a4:	18 97       	sbiw	r26, 0x08	; 8
    44a6:	19 96       	adiw	r26, 0x09	; 9
    44a8:	8c 91       	ld	r24, X
    44aa:	19 97       	sbiw	r26, 0x09	; 9
    44ac:	98 17       	cp	r25, r24
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <fetch_display_frame+0x1e0>
    44b0:	54 c0       	rjmp	.+168    	; 0x455a <fetch_display_frame+0x288>
    44b2:	1a 96       	adiw	r26, 0x0a	; 10
    44b4:	4c 91       	ld	r20, X
    44b6:	1a 97       	sbiw	r26, 0x0a	; 10
    44b8:	1b 96       	adiw	r26, 0x0b	; 11
    44ba:	8c 91       	ld	r24, X
    44bc:	1b 97       	sbiw	r26, 0x0b	; 11
    44be:	48 17       	cp	r20, r24
    44c0:	09 f0       	breq	.+2      	; 0x44c4 <fetch_display_frame+0x1f2>
    44c2:	4b c0       	rjmp	.+150    	; 0x455a <fetch_display_frame+0x288>
    44c4:	1c 96       	adiw	r26, 0x0c	; 12
    44c6:	3c 91       	ld	r19, X
    44c8:	1c 97       	sbiw	r26, 0x0c	; 12
    44ca:	1d 96       	adiw	r26, 0x0d	; 13
    44cc:	8c 91       	ld	r24, X
    44ce:	1d 97       	sbiw	r26, 0x0d	; 13
    44d0:	38 17       	cp	r19, r24
    44d2:	09 f0       	breq	.+2      	; 0x44d6 <fetch_display_frame+0x204>
    44d4:	42 c0       	rjmp	.+132    	; 0x455a <fetch_display_frame+0x288>
    44d6:	1e 96       	adiw	r26, 0x0e	; 14
    44d8:	2c 91       	ld	r18, X
    44da:	1e 97       	sbiw	r26, 0x0e	; 14
    44dc:	1f 96       	adiw	r26, 0x0f	; 15
    44de:	8c 91       	ld	r24, X
    44e0:	1f 97       	sbiw	r26, 0x0f	; 15
    44e2:	28 17       	cp	r18, r24
    44e4:	d1 f5       	brne	.+116    	; 0x455a <fetch_display_frame+0x288>
										if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    44e6:	94 17       	cp	r25, r20
    44e8:	c1 f5       	brne	.+112    	; 0x455a <fetch_display_frame+0x288>
    44ea:	93 17       	cp	r25, r19
    44ec:	b1 f5       	brne	.+108    	; 0x455a <fetch_display_frame+0x288>
    44ee:	92 17       	cp	r25, r18
    44f0:	a1 f5       	brne	.+104    	; 0x455a <fetch_display_frame+0x288>
											if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    44f2:	50 96       	adiw	r26, 0x10	; 16
    44f4:	9c 91       	ld	r25, X
    44f6:	50 97       	sbiw	r26, 0x10	; 16
    44f8:	51 96       	adiw	r26, 0x11	; 17
    44fa:	8c 91       	ld	r24, X
    44fc:	51 97       	sbiw	r26, 0x11	; 17
    44fe:	98 17       	cp	r25, r24
    4500:	61 f5       	brne	.+88     	; 0x455a <fetch_display_frame+0x288>
    4502:	52 96       	adiw	r26, 0x12	; 18
    4504:	4c 91       	ld	r20, X
    4506:	52 97       	sbiw	r26, 0x12	; 18
    4508:	53 96       	adiw	r26, 0x13	; 19
    450a:	8c 91       	ld	r24, X
    450c:	53 97       	sbiw	r26, 0x13	; 19
    450e:	48 17       	cp	r20, r24
    4510:	21 f5       	brne	.+72     	; 0x455a <fetch_display_frame+0x288>
    4512:	54 96       	adiw	r26, 0x14	; 20
    4514:	3c 91       	ld	r19, X
    4516:	54 97       	sbiw	r26, 0x14	; 20
    4518:	55 96       	adiw	r26, 0x15	; 21
    451a:	8c 91       	ld	r24, X
    451c:	55 97       	sbiw	r26, 0x15	; 21
    451e:	38 17       	cp	r19, r24
    4520:	e1 f4       	brne	.+56     	; 0x455a <fetch_display_frame+0x288>
    4522:	56 96       	adiw	r26, 0x16	; 22
    4524:	2c 91       	ld	r18, X
    4526:	56 97       	sbiw	r26, 0x16	; 22
    4528:	57 96       	adiw	r26, 0x17	; 23
    452a:	8c 91       	ld	r24, X
    452c:	57 97       	sbiw	r26, 0x17	; 23
    452e:	28 17       	cp	r18, r24
    4530:	a1 f4       	brne	.+40     	; 0x455a <fetch_display_frame+0x288>
												if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    4532:	94 17       	cp	r25, r20
    4534:	91 f4       	brne	.+36     	; 0x455a <fetch_display_frame+0x288>
    4536:	93 17       	cp	r25, r19
    4538:	81 f4       	brne	.+32     	; 0x455a <fetch_display_frame+0x288>
    453a:	92 17       	cp	r25, r18
    453c:	71 f4       	brne	.+28     	; 0x455a <fetch_display_frame+0x288>
													gscale[0] = FLASH[0];
    453e:	ed 83       	std	Y+5, r30	; 0x05
													gscale[1] = FLASH[8];
    4540:	18 96       	adiw	r26, 0x08	; 8
    4542:	8c 91       	ld	r24, X
    4544:	18 97       	sbiw	r26, 0x08	; 8
    4546:	8e 83       	std	Y+6, r24	; 0x06
													gscale[2] = FLASH[16];
    4548:	50 96       	adiw	r26, 0x10	; 16
    454a:	8c 91       	ld	r24, X
    454c:	8f 83       	std	Y+7, r24	; 0x07
													i2cMasterSend(panel_index, 3, &gscale[0]); //send a 3 byte packet with the correct row_compressed value.
    454e:	8d 2d       	mov	r24, r13
    4550:	63 e0       	ldi	r22, 0x03	; 3
    4552:	a5 01       	movw	r20, r10
    4554:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    4558:	51 e0       	ldi	r21, 0x01	; 1
									} //end of third round of comparisons
								} //end of second round of comparisons
							} //end of first round of byte comparisons
						} // end of check if bytes_per_panel_frame is 24
						
						if (bytes_per_panel_frame == 32){
    455a:	80 91 cc 26 	lds	r24, 0x26CC
    455e:	80 32       	cpi	r24, 0x20	; 32
    4560:	09 f0       	breq	.+2      	; 0x4564 <fetch_display_frame+0x292>
    4562:	bb c0       	rjmp	.+374    	; 0x46da <fetch_display_frame+0x408>
							if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    4564:	f3 01       	movw	r30, r6
    4566:	ee 0d       	add	r30, r14
    4568:	ff 1d       	adc	r31, r15
    456a:	e0 81       	ld	r30, Z
    456c:	d8 01       	movw	r26, r16
    456e:	11 96       	adiw	r26, 0x01	; 1
    4570:	8c 91       	ld	r24, X
    4572:	11 97       	sbiw	r26, 0x01	; 1
    4574:	e8 17       	cp	r30, r24
    4576:	09 f0       	breq	.+2      	; 0x457a <fetch_display_frame+0x2a8>
    4578:	b0 c0       	rjmp	.+352    	; 0x46da <fetch_display_frame+0x408>
    457a:	12 96       	adiw	r26, 0x02	; 2
    457c:	3c 91       	ld	r19, X
    457e:	12 97       	sbiw	r26, 0x02	; 2
    4580:	13 96       	adiw	r26, 0x03	; 3
    4582:	8c 91       	ld	r24, X
    4584:	13 97       	sbiw	r26, 0x03	; 3
    4586:	38 17       	cp	r19, r24
    4588:	09 f0       	breq	.+2      	; 0x458c <fetch_display_frame+0x2ba>
    458a:	a7 c0       	rjmp	.+334    	; 0x46da <fetch_display_frame+0x408>
    458c:	14 96       	adiw	r26, 0x04	; 4
    458e:	2c 91       	ld	r18, X
    4590:	14 97       	sbiw	r26, 0x04	; 4
    4592:	15 96       	adiw	r26, 0x05	; 5
    4594:	8c 91       	ld	r24, X
    4596:	15 97       	sbiw	r26, 0x05	; 5
    4598:	28 17       	cp	r18, r24
    459a:	09 f0       	breq	.+2      	; 0x459e <fetch_display_frame+0x2cc>
    459c:	9e c0       	rjmp	.+316    	; 0x46da <fetch_display_frame+0x408>
    459e:	16 96       	adiw	r26, 0x06	; 6
    45a0:	9c 91       	ld	r25, X
    45a2:	16 97       	sbiw	r26, 0x06	; 6
    45a4:	17 96       	adiw	r26, 0x07	; 7
    45a6:	8c 91       	ld	r24, X
    45a8:	17 97       	sbiw	r26, 0x07	; 7
    45aa:	98 17       	cp	r25, r24
    45ac:	09 f0       	breq	.+2      	; 0x45b0 <fetch_display_frame+0x2de>
    45ae:	95 c0       	rjmp	.+298    	; 0x46da <fetch_display_frame+0x408>
								if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    45b0:	e3 17       	cp	r30, r19
    45b2:	09 f0       	breq	.+2      	; 0x45b6 <fetch_display_frame+0x2e4>
    45b4:	92 c0       	rjmp	.+292    	; 0x46da <fetch_display_frame+0x408>
    45b6:	e2 17       	cp	r30, r18
    45b8:	09 f0       	breq	.+2      	; 0x45bc <fetch_display_frame+0x2ea>
    45ba:	8f c0       	rjmp	.+286    	; 0x46da <fetch_display_frame+0x408>
    45bc:	e9 17       	cp	r30, r25
    45be:	09 f0       	breq	.+2      	; 0x45c2 <fetch_display_frame+0x2f0>
    45c0:	8c c0       	rjmp	.+280    	; 0x46da <fetch_display_frame+0x408>
									if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    45c2:	18 96       	adiw	r26, 0x08	; 8
    45c4:	9c 91       	ld	r25, X
    45c6:	18 97       	sbiw	r26, 0x08	; 8
    45c8:	19 96       	adiw	r26, 0x09	; 9
    45ca:	8c 91       	ld	r24, X
    45cc:	19 97       	sbiw	r26, 0x09	; 9
    45ce:	98 17       	cp	r25, r24
    45d0:	09 f0       	breq	.+2      	; 0x45d4 <fetch_display_frame+0x302>
    45d2:	83 c0       	rjmp	.+262    	; 0x46da <fetch_display_frame+0x408>
    45d4:	1a 96       	adiw	r26, 0x0a	; 10
    45d6:	4c 91       	ld	r20, X
    45d8:	1a 97       	sbiw	r26, 0x0a	; 10
    45da:	1b 96       	adiw	r26, 0x0b	; 11
    45dc:	8c 91       	ld	r24, X
    45de:	1b 97       	sbiw	r26, 0x0b	; 11
    45e0:	48 17       	cp	r20, r24
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <fetch_display_frame+0x314>
    45e4:	7a c0       	rjmp	.+244    	; 0x46da <fetch_display_frame+0x408>
    45e6:	1c 96       	adiw	r26, 0x0c	; 12
    45e8:	3c 91       	ld	r19, X
    45ea:	1c 97       	sbiw	r26, 0x0c	; 12
    45ec:	1d 96       	adiw	r26, 0x0d	; 13
    45ee:	8c 91       	ld	r24, X
    45f0:	1d 97       	sbiw	r26, 0x0d	; 13
    45f2:	38 17       	cp	r19, r24
    45f4:	09 f0       	breq	.+2      	; 0x45f8 <fetch_display_frame+0x326>
    45f6:	71 c0       	rjmp	.+226    	; 0x46da <fetch_display_frame+0x408>
    45f8:	1e 96       	adiw	r26, 0x0e	; 14
    45fa:	2c 91       	ld	r18, X
    45fc:	1e 97       	sbiw	r26, 0x0e	; 14
    45fe:	1f 96       	adiw	r26, 0x0f	; 15
    4600:	8c 91       	ld	r24, X
    4602:	1f 97       	sbiw	r26, 0x0f	; 15
    4604:	28 17       	cp	r18, r24
    4606:	09 f0       	breq	.+2      	; 0x460a <fetch_display_frame+0x338>
    4608:	68 c0       	rjmp	.+208    	; 0x46da <fetch_display_frame+0x408>
										if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    460a:	94 17       	cp	r25, r20
    460c:	09 f0       	breq	.+2      	; 0x4610 <fetch_display_frame+0x33e>
    460e:	65 c0       	rjmp	.+202    	; 0x46da <fetch_display_frame+0x408>
    4610:	93 17       	cp	r25, r19
    4612:	09 f0       	breq	.+2      	; 0x4616 <fetch_display_frame+0x344>
    4614:	62 c0       	rjmp	.+196    	; 0x46da <fetch_display_frame+0x408>
    4616:	92 17       	cp	r25, r18
    4618:	09 f0       	breq	.+2      	; 0x461c <fetch_display_frame+0x34a>
    461a:	5f c0       	rjmp	.+190    	; 0x46da <fetch_display_frame+0x408>
											if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    461c:	50 96       	adiw	r26, 0x10	; 16
    461e:	9c 91       	ld	r25, X
    4620:	50 97       	sbiw	r26, 0x10	; 16
    4622:	51 96       	adiw	r26, 0x11	; 17
    4624:	8c 91       	ld	r24, X
    4626:	51 97       	sbiw	r26, 0x11	; 17
    4628:	98 17       	cp	r25, r24
    462a:	09 f0       	breq	.+2      	; 0x462e <fetch_display_frame+0x35c>
    462c:	56 c0       	rjmp	.+172    	; 0x46da <fetch_display_frame+0x408>
    462e:	52 96       	adiw	r26, 0x12	; 18
    4630:	4c 91       	ld	r20, X
    4632:	52 97       	sbiw	r26, 0x12	; 18
    4634:	53 96       	adiw	r26, 0x13	; 19
    4636:	8c 91       	ld	r24, X
    4638:	53 97       	sbiw	r26, 0x13	; 19
    463a:	48 17       	cp	r20, r24
    463c:	09 f0       	breq	.+2      	; 0x4640 <fetch_display_frame+0x36e>
    463e:	4d c0       	rjmp	.+154    	; 0x46da <fetch_display_frame+0x408>
    4640:	54 96       	adiw	r26, 0x14	; 20
    4642:	3c 91       	ld	r19, X
    4644:	54 97       	sbiw	r26, 0x14	; 20
    4646:	55 96       	adiw	r26, 0x15	; 21
    4648:	8c 91       	ld	r24, X
    464a:	55 97       	sbiw	r26, 0x15	; 21
    464c:	38 17       	cp	r19, r24
    464e:	09 f0       	breq	.+2      	; 0x4652 <fetch_display_frame+0x380>
    4650:	44 c0       	rjmp	.+136    	; 0x46da <fetch_display_frame+0x408>
    4652:	56 96       	adiw	r26, 0x16	; 22
    4654:	2c 91       	ld	r18, X
    4656:	56 97       	sbiw	r26, 0x16	; 22
    4658:	57 96       	adiw	r26, 0x17	; 23
    465a:	8c 91       	ld	r24, X
    465c:	57 97       	sbiw	r26, 0x17	; 23
    465e:	28 17       	cp	r18, r24
    4660:	e1 f5       	brne	.+120    	; 0x46da <fetch_display_frame+0x408>
												if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    4662:	94 17       	cp	r25, r20
    4664:	d1 f5       	brne	.+116    	; 0x46da <fetch_display_frame+0x408>
    4666:	93 17       	cp	r25, r19
    4668:	c1 f5       	brne	.+112    	; 0x46da <fetch_display_frame+0x408>
    466a:	92 17       	cp	r25, r18
    466c:	b1 f5       	brne	.+108    	; 0x46da <fetch_display_frame+0x408>
													if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    466e:	58 96       	adiw	r26, 0x18	; 24
    4670:	9c 91       	ld	r25, X
    4672:	58 97       	sbiw	r26, 0x18	; 24
    4674:	59 96       	adiw	r26, 0x19	; 25
    4676:	8c 91       	ld	r24, X
    4678:	59 97       	sbiw	r26, 0x19	; 25
    467a:	98 17       	cp	r25, r24
    467c:	71 f5       	brne	.+92     	; 0x46da <fetch_display_frame+0x408>
    467e:	5a 96       	adiw	r26, 0x1a	; 26
    4680:	4c 91       	ld	r20, X
    4682:	5a 97       	sbiw	r26, 0x1a	; 26
    4684:	5b 96       	adiw	r26, 0x1b	; 27
    4686:	8c 91       	ld	r24, X
    4688:	5b 97       	sbiw	r26, 0x1b	; 27
    468a:	48 17       	cp	r20, r24
    468c:	31 f5       	brne	.+76     	; 0x46da <fetch_display_frame+0x408>
    468e:	5c 96       	adiw	r26, 0x1c	; 28
    4690:	3c 91       	ld	r19, X
    4692:	5c 97       	sbiw	r26, 0x1c	; 28
    4694:	5d 96       	adiw	r26, 0x1d	; 29
    4696:	8c 91       	ld	r24, X
    4698:	5d 97       	sbiw	r26, 0x1d	; 29
    469a:	38 17       	cp	r19, r24
    469c:	f1 f4       	brne	.+60     	; 0x46da <fetch_display_frame+0x408>
    469e:	5e 96       	adiw	r26, 0x1e	; 30
    46a0:	2c 91       	ld	r18, X
    46a2:	5e 97       	sbiw	r26, 0x1e	; 30
    46a4:	5f 96       	adiw	r26, 0x1f	; 31
    46a6:	8c 91       	ld	r24, X
    46a8:	5f 97       	sbiw	r26, 0x1f	; 31
    46aa:	28 17       	cp	r18, r24
    46ac:	b1 f4       	brne	.+44     	; 0x46da <fetch_display_frame+0x408>
														if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    46ae:	94 17       	cp	r25, r20
    46b0:	a1 f4       	brne	.+40     	; 0x46da <fetch_display_frame+0x408>
    46b2:	93 17       	cp	r25, r19
    46b4:	91 f4       	brne	.+36     	; 0x46da <fetch_display_frame+0x408>
    46b6:	92 17       	cp	r25, r18
    46b8:	81 f4       	brne	.+32     	; 0x46da <fetch_display_frame+0x408>
															gscale[0] = FLASH[0];
    46ba:	ed 83       	std	Y+5, r30	; 0x05
															gscale[1] = FLASH[8];
    46bc:	18 96       	adiw	r26, 0x08	; 8
    46be:	8c 91       	ld	r24, X
    46c0:	18 97       	sbiw	r26, 0x08	; 8
    46c2:	8e 83       	std	Y+6, r24	; 0x06
															gscale[2] = FLASH[16];
    46c4:	50 96       	adiw	r26, 0x10	; 16
    46c6:	8c 91       	ld	r24, X
    46c8:	50 97       	sbiw	r26, 0x10	; 16
    46ca:	8f 83       	std	Y+7, r24	; 0x07
															gscale[3] = FLASH[24];
    46cc:	58 96       	adiw	r26, 0x18	; 24
    46ce:	8c 91       	ld	r24, X
    46d0:	88 87       	std	Y+8, r24	; 0x08
															i2cMasterSend(panel_index, 4, &gscale[0]); //send a 4 byte packet with the correct row_compressed value.
    46d2:	8d 2d       	mov	r24, r13
    46d4:	64 e0       	ldi	r22, 0x04	; 4
    46d6:	a5 01       	movw	r20, r10
    46d8:	06 c0       	rjmp	.+12     	; 0x46e6 <fetch_display_frame+0x414>
								} //end of second round of comparisons
							} //end of first round of byte comparisons
						} // end of check if bytes_per_panel_frame is 32
					} //end of if ident_compress == 1
					
					if (packet_sent == 0){ //above conditionals rejected sending a simple pattern patch
    46da:	55 23       	and	r21, r21
    46dc:	31 f4       	brne	.+12     	; 0x46ea <fetch_display_frame+0x418>
						i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
    46de:	8d 2d       	mov	r24, r13
    46e0:	60 91 cc 26 	lds	r22, 0x26CC
    46e4:	a8 01       	movw	r20, r16
    46e6:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>

				buff_index = 0;
				
				for (panel_index = 1; panel_index <= num_panels; panel_index++){
					FLASH = &frameBuff[buff_index];
					buff_index = buff_index + bytes_per_panel_frame;
    46ea:	ec 0c       	add	r14, r12
    46ec:	f1 1c       	adc	r15, r1
			if ((res == FR_OK) && (cnt == len)) {	
			

				buff_index = 0;
				
				for (panel_index = 1; panel_index <= num_panels; panel_index++){
    46ee:	d3 94       	inc	r13
    46f0:	80 91 00 24 	lds	r24, 0x2400
    46f4:	8d 15       	cp	r24, r13
    46f6:	08 f0       	brcs	.+2      	; 0x46fa <fetch_display_frame+0x428>
    46f8:	73 ce       	rjmp	.-794    	; 0x43e0 <fetch_display_frame+0x10e>
    46fa:	4c c0       	rjmp	.+152    	; 0x4794 <fetch_display_frame+0x4c2>
						i2cMasterSend(panel_index, bytes_per_panel_frame, &FLASH[0]);
					}
				} //end of for all panels loop
			}
			else {
				if (quiet_mode_on == 0){
    46fc:	80 91 0b 24 	lds	r24, 0x240B
    4700:	88 23       	and	r24, r24
    4702:	09 f0       	breq	.+2      	; 0x4706 <fetch_display_frame+0x434>
    4704:	47 c0       	rjmp	.+142    	; 0x4794 <fetch_display_frame+0x4c2>
					xputs(PSTR("Error in f_read in fetch_display_frame!\n"));
    4706:	85 e9       	ldi	r24, 0x95	; 149
    4708:	9d e0       	ldi	r25, 0x0D	; 13
    470a:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
					xprintf(PSTR("RES = %u, f_num= %u, cnt= %u\n"), res, f_num, cnt);
    470e:	ed b7       	in	r30, 0x3d	; 61
    4710:	fe b7       	in	r31, 0x3e	; 62
    4712:	38 97       	sbiw	r30, 0x08	; 8
    4714:	ed bf       	out	0x3d, r30	; 61
    4716:	fe bf       	out	0x3e, r31	; 62
    4718:	31 96       	adiw	r30, 0x01	; 1
    471a:	87 e7       	ldi	r24, 0x77	; 119
    471c:	9d e0       	ldi	r25, 0x0D	; 13
    471e:	ad b7       	in	r26, 0x3d	; 61
    4720:	be b7       	in	r27, 0x3e	; 62
    4722:	11 96       	adiw	r26, 0x01	; 1
    4724:	8d 93       	st	X+, r24
    4726:	9c 93       	st	X, r25
    4728:	12 97       	sbiw	r26, 0x02	; 2
    472a:	12 83       	std	Z+2, r17	; 0x02
    472c:	13 82       	std	Z+3, r1	; 0x03
    472e:	a4 82       	std	Z+4, r10	; 0x04
    4730:	b5 82       	std	Z+5, r11	; 0x05
    4732:	89 81       	ldd	r24, Y+1	; 0x01
    4734:	9a 81       	ldd	r25, Y+2	; 0x02
    4736:	86 83       	std	Z+6, r24	; 0x06
    4738:	97 83       	std	Z+7, r25	; 0x07
    473a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    473e:	ed b7       	in	r30, 0x3d	; 61
    4740:	fe b7       	in	r31, 0x3e	; 62
    4742:	38 96       	adiw	r30, 0x08	; 8
    4744:	25 c0       	rjmp	.+74     	; 0x4790 <fetch_display_frame+0x4be>
				}
			}
		} else { 
			if (quiet_mode_on == 0){
    4746:	80 91 0b 24 	lds	r24, 0x240B
    474a:	88 23       	and	r24, r24
    474c:	19 f5       	brne	.+70     	; 0x4794 <fetch_display_frame+0x4c2>
				xputs(PSTR("Error in f_lseek in fetch_display_frame!\n"));
    474e:	8d e4       	ldi	r24, 0x4D	; 77
    4750:	9d e0       	ldi	r25, 0x0D	; 13
    4752:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
				xprintf(PSTR("RES = %u, f_num= %u, offset = %lu\n"), res, f_num, offset);
    4756:	8d b7       	in	r24, 0x3d	; 61
    4758:	9e b7       	in	r25, 0x3e	; 62
    475a:	0a 97       	sbiw	r24, 0x0a	; 10
    475c:	8d bf       	out	0x3d, r24	; 61
    475e:	9e bf       	out	0x3e, r25	; 62
    4760:	ed b7       	in	r30, 0x3d	; 61
    4762:	fe b7       	in	r31, 0x3e	; 62
    4764:	31 96       	adiw	r30, 0x01	; 1
    4766:	8a e2       	ldi	r24, 0x2A	; 42
    4768:	9d e0       	ldi	r25, 0x0D	; 13
    476a:	ad b7       	in	r26, 0x3d	; 61
    476c:	be b7       	in	r27, 0x3e	; 62
    476e:	11 96       	adiw	r26, 0x01	; 1
    4770:	8d 93       	st	X+, r24
    4772:	9c 93       	st	X, r25
    4774:	12 97       	sbiw	r26, 0x02	; 2
    4776:	92 82       	std	Z+2, r9	; 0x02
    4778:	13 82       	std	Z+3, r1	; 0x03
    477a:	a4 82       	std	Z+4, r10	; 0x04
    477c:	b5 82       	std	Z+5, r11	; 0x05
    477e:	e6 82       	std	Z+6, r14	; 0x06
    4780:	f7 82       	std	Z+7, r15	; 0x07
    4782:	00 87       	std	Z+8, r16	; 0x08
    4784:	11 87       	std	Z+9, r17	; 0x09
    4786:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    478a:	ed b7       	in	r30, 0x3d	; 61
    478c:	fe b7       	in	r31, 0x3e	; 62
    478e:	3a 96       	adiw	r30, 0x0a	; 10
    4790:	ed bf       	out	0x3d, r30	; 61
    4792:	fe bf       	out	0x3e, r31	; 62
    4794:	88 2d       	mov	r24, r8
    4796:	9b 85       	ldd	r25, Y+11	; 0x0b
    4798:	9c 01       	movw	r18, r24
    479a:	2d bf       	out	0x3d, r18	; 61
    479c:	3e bf       	out	0x3e, r19	; 62
    479e:	0e c0       	rjmp	.+28     	; 0x47bc <fetch_display_frame+0x4ea>
		}
	}
	else//use preloaded pattern to get higher performance
	{
		//ask all panels to load f_num
		CMD[0] = *((uint8_t *)&frame_num + 1) | 0xf0;  // this is the high byte
    47a0:	80 91 02 24 	lds	r24, 0x2402
    47a4:	80 6f       	ori	r24, 0xF0	; 240
    47a6:	8b 83       	std	Y+3, r24	; 0x03
		CMD[1] = *(uint8_t *)&frame_num; //this is the low byte
    47a8:	80 91 01 24 	lds	r24, 0x2401
    47ac:	8c 83       	std	Y+4, r24	; 0x04
		//xprintf(PSTR("CMD[0]= %u,  CMD[1] = %u\n"),CMD[0],CMD[1]);
		//_delay_ms(10);
		
		i2cMasterSend(0, 2, CMD); 	//use 2 to follow the old protocol temporarily
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	62 e0       	ldi	r22, 0x02	; 2
    47b2:	ae 01       	movw	r20, r28
    47b4:	4d 5f       	subi	r20, 0xFD	; 253
    47b6:	5f 4f       	sbci	r21, 0xFF	; 255
    47b8:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
	}
		
    //update analog out
    if (x_mode != 5){
    47bc:	80 91 cb 26 	lds	r24, 0x26CB
    47c0:	85 30       	cpi	r24, 0x05	; 5
    47c2:	c9 f0       	breq	.+50     	; 0x47f6 <fetch_display_frame+0x524>
		X_dac_val = ((uint32_t)Xindex + 1)*32767/x_num;
		analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    47c4:	b2 01       	movw	r22, r4
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	6f 5f       	subi	r22, 0xFF	; 255
    47cc:	7f 4f       	sbci	r23, 0xFF	; 255
    47ce:	8f 4f       	sbci	r24, 0xFF	; 255
    47d0:	9f 4f       	sbci	r25, 0xFF	; 255
    47d2:	2f ef       	ldi	r18, 0xFF	; 255
    47d4:	3f e7       	ldi	r19, 0x7F	; 127
    47d6:	40 e0       	ldi	r20, 0x00	; 0
    47d8:	50 e0       	ldi	r21, 0x00	; 0
    47da:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    47de:	20 91 26 27 	lds	r18, 0x2726
    47e2:	30 91 27 27 	lds	r19, 0x2727
    47e6:	40 e0       	ldi	r20, 0x00	; 0
    47e8:	50 e0       	ldi	r21, 0x00	; 0
    47ea:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	b9 01       	movw	r22, r18
    47f2:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
	}

    
    if (y_mode != 5){
    47f6:	80 91 09 27 	lds	r24, 0x2709
    47fa:	85 30       	cpi	r24, 0x05	; 5
    47fc:	c9 f0       	breq	.+50     	; 0x4830 <fetch_display_frame+0x55e>
        Y_dac_val = ((uint32_t)Yindex + 1)*32767/y_num; 
        analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    47fe:	b1 01       	movw	r22, r2
    4800:	80 e0       	ldi	r24, 0x00	; 0
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	6f 5f       	subi	r22, 0xFF	; 255
    4806:	7f 4f       	sbci	r23, 0xFF	; 255
    4808:	8f 4f       	sbci	r24, 0xFF	; 255
    480a:	9f 4f       	sbci	r25, 0xFF	; 255
    480c:	2f ef       	ldi	r18, 0xFF	; 255
    480e:	3f e7       	ldi	r19, 0x7F	; 127
    4810:	40 e0       	ldi	r20, 0x00	; 0
    4812:	50 e0       	ldi	r21, 0x00	; 0
    4814:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    4818:	20 91 c5 24 	lds	r18, 0x24C5
    481c:	30 91 c6 24 	lds	r19, 0x24C6
    4820:	40 e0       	ldi	r20, 0x00	; 0
    4822:	50 e0       	ldi	r21, 0x00	; 0
    4824:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	b9 01       	movw	r22, r18
    482c:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
    }

	
	  //also update the output lines for quadrant-type learning patterns
	if (Laser_active == 1)
    4830:	80 91 fc 23 	lds	r24, 0x23FC
    4834:	81 30       	cpi	r24, 0x01	; 1
    4836:	59 f5       	brne	.+86     	; 0x488e <fetch_display_frame+0x5bc>
	{
		arrayIndex = index_x/8;  // find the index in laserPattern array for index_x
    4838:	80 91 cd 26 	lds	r24, 0x26CD
    483c:	90 91 ce 26 	lds	r25, 0x26CE
		bitIndex = index_x - arrayIndex*8;  // find the bit index in a laserPattern byte for index_x
    4840:	40 91 cd 26 	lds	r20, 0x26CD
    4844:	50 91 ce 26 	lds	r21, 0x26CE
    4848:	63 e0       	ldi	r22, 0x03	; 3
    484a:	96 95       	lsr	r25
    484c:	87 95       	ror	r24
    484e:	6a 95       	dec	r22
    4850:	e1 f7       	brne	.-8      	; 0x484a <fetch_display_frame+0x578>
    4852:	90 e0       	ldi	r25, 0x00	; 0
	
		tempVal = laserPattern[arrayIndex];
	
		if ((tempVal & (1<<(7-bitIndex))) == 0)
    4854:	fc 01       	movw	r30, r24
    4856:	ef 55       	subi	r30, 0x5F	; 95
    4858:	fa 4d       	sbci	r31, 0xDA	; 218
    485a:	20 81       	ld	r18, Z
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	53 e0       	ldi	r21, 0x03	; 3
    4860:	88 0f       	add	r24, r24
    4862:	99 1f       	adc	r25, r25
    4864:	5a 95       	dec	r21
    4866:	e1 f7       	brne	.-8      	; 0x4860 <fetch_display_frame+0x58e>
    4868:	48 1b       	sub	r20, r24
    486a:	87 e0       	ldi	r24, 0x07	; 7
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	84 1b       	sub	r24, r20
    4870:	91 09       	sbc	r25, r1
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <fetch_display_frame+0x5a6>
    4874:	35 95       	asr	r19
    4876:	27 95       	ror	r18
    4878:	8a 95       	dec	r24
    487a:	e2 f7       	brpl	.-8      	; 0x4874 <fetch_display_frame+0x5a2>
    487c:	20 fd       	sbrc	r18, 0
    487e:	03 c0       	rjmp	.+6      	; 0x4886 <fetch_display_frame+0x5b4>
			digitalWrite(0, LOW);  // turn off laser
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	60 e0       	ldi	r22, 0x00	; 0
    4884:	02 c0       	rjmp	.+4      	; 0x488a <fetch_display_frame+0x5b8>
		else
			digitalWrite(0, HIGH);   // turn on laser
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	61 e0       	ldi	r22, 0x01	; 1
    488a:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
	}
	
	digitalWrite(1, LOW); // set line low at end of frame write
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	60 e0       	ldi	r22, 0x00	; 0
    4892:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>

}
    4896:	89 85       	ldd	r24, Y+9	; 0x09
    4898:	9a 85       	ldd	r25, Y+10	; 0x0a
    489a:	8d bf       	out	0x3d, r24	; 61
    489c:	9e bf       	out	0x3e, r25	; 62
    489e:	2b 96       	adiw	r28, 0x0b	; 11
    48a0:	e2 e1       	ldi	r30, 0x12	; 18
    48a2:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

000048a6 <benchmark_pattern>:
    else{
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    }
}

void benchmark_pattern(void) { // this function assumes that a pattern has been set
    48a6:	a0 e0       	ldi	r26, 0x00	; 0
    48a8:	b0 e0       	ldi	r27, 0x00	; 0
    48aa:	e9 e5       	ldi	r30, 0x59	; 89
    48ac:	f4 e2       	ldi	r31, 0x24	; 36
    48ae:	0c 94 96 51 	jmp	0xa32c	; 0xa32c <__prologue_saves__+0x10>
    uint16_t num_frames;
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    Stop = 1;
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	80 93 9c 20 	sts	0x209C, r24
    num_frames = x_num*y_num;
    48b8:	20 91 c5 24 	lds	r18, 0x24C5
    48bc:	30 91 c6 24 	lds	r19, 0x24C6
    48c0:	80 91 26 27 	lds	r24, 0x2726
    48c4:	90 91 27 27 	lds	r25, 0x2727
    48c8:	28 9f       	mul	r18, r24
    48ca:	50 01       	movw	r10, r0
    48cc:	29 9f       	mul	r18, r25
    48ce:	b0 0c       	add	r11, r0
    48d0:	38 9f       	mul	r19, r24
    48d2:	b0 0c       	add	r11, r0
    48d4:	11 24       	eor	r1, r1
    
    timer_coarse_tic();
    48d6:	0e 94 e0 4e 	call	0x9dc0	; 0x9dc0 <timer_coarse_tic>
    48da:	c0 e0       	ldi	r28, 0x00	; 0
    48dc:	d0 e0       	ldi	r29, 0x00	; 0
    48de:	0c c0       	rjmp	.+24     	; 0x48f8 <benchmark_pattern+0x52>
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
        fetch_display_frame(frame_ind, index_x, index_y);
    48e0:	60 91 cd 26 	lds	r22, 0x26CD
    48e4:	70 91 ce 26 	lds	r23, 0x26CE
    48e8:	40 91 71 28 	lds	r20, 0x2871
    48ec:	50 91 72 28 	lds	r21, 0x2872
    48f0:	ce 01       	movw	r24, r28
    48f2:	0e 94 69 21 	call	0x42d2	; 0x42d2 <fetch_display_frame>
    Stop = 1;
    num_frames = x_num*y_num;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < num_frames; frame_ind++)
    48f6:	21 96       	adiw	r28, 0x01	; 1
    48f8:	ca 15       	cp	r28, r10
    48fa:	db 05       	cpc	r29, r11
    48fc:	88 f3       	brcs	.-30     	; 0x48e0 <benchmark_pattern+0x3a>
        fetch_display_frame(frame_ind, index_x, index_y);
    
    bench_time = timer_coarse_toc();
    48fe:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <timer_coarse_toc>
    4902:	7b 01       	movw	r14, r22
    4904:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)num_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    4906:	8d b7       	in	r24, 0x3d	; 61
    4908:	9e b7       	in	r25, 0x3e	; 62
    490a:	08 97       	sbiw	r24, 0x08	; 8
    490c:	8d bf       	out	0x3d, r24	; 61
    490e:	9e bf       	out	0x3e, r25	; 62
    4910:	cd b6       	in	r12, 0x3d	; 61
    4912:	de b6       	in	r13, 0x3e	; 62
    4914:	08 94       	sec
    4916:	c1 1c       	adc	r12, r1
    4918:	d1 1c       	adc	r13, r1
    491a:	89 ee       	ldi	r24, 0xE9	; 233
    491c:	99 e0       	ldi	r25, 0x09	; 9
    491e:	ed b7       	in	r30, 0x3d	; 61
    4920:	fe b7       	in	r31, 0x3e	; 62
    4922:	81 83       	std	Z+1, r24	; 0x01
    4924:	92 83       	std	Z+2, r25	; 0x02
    4926:	f6 01       	movw	r30, r12
    4928:	e2 82       	std	Z+2, r14	; 0x02
    492a:	f3 82       	std	Z+3, r15	; 0x03
    492c:	04 83       	std	Z+4, r16	; 0x04
    492e:	15 83       	std	Z+5, r17	; 0x05
    4930:	b5 01       	movw	r22, r10
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	28 ee       	ldi	r18, 0xE8	; 232
    4938:	33 e0       	ldi	r19, 0x03	; 3
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	50 e0       	ldi	r21, 0x00	; 0
    493e:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    4942:	a8 01       	movw	r20, r16
    4944:	97 01       	movw	r18, r14
    4946:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    494a:	f6 01       	movw	r30, r12
    494c:	26 83       	std	Z+6, r18	; 0x06
    494e:	37 83       	std	Z+7, r19	; 0x07
    4950:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    4954:	8d b7       	in	r24, 0x3d	; 61
    4956:	9e b7       	in	r25, 0x3e	; 62
    4958:	08 96       	adiw	r24, 0x08	; 8
    495a:	8d bf       	out	0x3d, r24	; 61
    495c:	9e bf       	out	0x3e, r25	; 62
}
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	ea e0       	ldi	r30, 0x0A	; 10
    4964:	0c 94 b2 51 	jmp	0xa364	; 0xa364 <__epilogue_restores__+0x10>

00004968 <set_pattern>:
	usePreloadedPattern = 1;
	xprintf(PSTR("Successfully load pattern %u to the panels\n"), pat_num);
	
}

void set_pattern(uint8_t pat_num) {
    4968:	a2 e0       	ldi	r26, 0x02	; 2
    496a:	b2 e0       	ldi	r27, 0x02	; 2
    496c:	ea eb       	ldi	r30, 0xBA	; 186
    496e:	f4 e2       	ldi	r31, 0x24	; 36
    4970:	0c 94 9d 51 	jmp	0xa33a	; 0xa33a <__prologue_saves__+0x1e>
    4974:	18 2f       	mov	r17, r24
    uint16_t cnt;
    static uint8_t str[12];
    uint8_t  pattDataBuff[512];
    uint8_t res;
    
    if (pat_num < 10)
    4976:	8a 30       	cpi	r24, 0x0A	; 10
    4978:	80 f4       	brcc	.+32     	; 0x499a <set_pattern+0x32>
        sprintf(str, "pat000%d.pat\0", pat_num);
    497a:	00 d0       	rcall	.+0      	; 0x497c <set_pattern+0x14>
    497c:	00 d0       	rcall	.+0      	; 0x497e <set_pattern+0x16>
    497e:	ed b7       	in	r30, 0x3d	; 61
    4980:	fe b7       	in	r31, 0x3e	; 62
    4982:	31 96       	adiw	r30, 0x01	; 1
    4984:	80 e2       	ldi	r24, 0x20	; 32
    4986:	94 e2       	ldi	r25, 0x24	; 36
    4988:	ad b7       	in	r26, 0x3d	; 61
    498a:	be b7       	in	r27, 0x3e	; 62
    498c:	11 96       	adiw	r26, 0x01	; 1
    498e:	8d 93       	st	X+, r24
    4990:	9c 93       	st	X, r25
    4992:	12 97       	sbiw	r26, 0x02	; 2
    4994:	85 e7       	ldi	r24, 0x75	; 117
    4996:	90 e2       	ldi	r25, 0x20	; 32
    4998:	1f c0       	rjmp	.+62     	; 0x49d8 <set_pattern+0x70>
    499a:	80 e2       	ldi	r24, 0x20	; 32
    499c:	94 e2       	ldi	r25, 0x24	; 36
    else if (pat_num < 100)
    499e:	14 36       	cpi	r17, 0x64	; 100
    49a0:	70 f4       	brcc	.+28     	; 0x49be <set_pattern+0x56>
        sprintf(str, "pat00%d.pat\0", pat_num);
    49a2:	00 d0       	rcall	.+0      	; 0x49a4 <set_pattern+0x3c>
    49a4:	00 d0       	rcall	.+0      	; 0x49a6 <set_pattern+0x3e>
    49a6:	ed b7       	in	r30, 0x3d	; 61
    49a8:	fe b7       	in	r31, 0x3e	; 62
    49aa:	31 96       	adiw	r30, 0x01	; 1
    49ac:	ad b7       	in	r26, 0x3d	; 61
    49ae:	be b7       	in	r27, 0x3e	; 62
    49b0:	11 96       	adiw	r26, 0x01	; 1
    49b2:	8d 93       	st	X+, r24
    49b4:	9c 93       	st	X, r25
    49b6:	12 97       	sbiw	r26, 0x02	; 2
    49b8:	83 e8       	ldi	r24, 0x83	; 131
    49ba:	90 e2       	ldi	r25, 0x20	; 32
    49bc:	0d c0       	rjmp	.+26     	; 0x49d8 <set_pattern+0x70>
    else if (pat_num < 1000)
        sprintf(str, "pat0%d.pat\0", pat_num);
    49be:	00 d0       	rcall	.+0      	; 0x49c0 <set_pattern+0x58>
    49c0:	00 d0       	rcall	.+0      	; 0x49c2 <set_pattern+0x5a>
    49c2:	ed b7       	in	r30, 0x3d	; 61
    49c4:	fe b7       	in	r31, 0x3e	; 62
    49c6:	31 96       	adiw	r30, 0x01	; 1
    49c8:	ad b7       	in	r26, 0x3d	; 61
    49ca:	be b7       	in	r27, 0x3e	; 62
    49cc:	11 96       	adiw	r26, 0x01	; 1
    49ce:	8d 93       	st	X+, r24
    49d0:	9c 93       	st	X, r25
    49d2:	12 97       	sbiw	r26, 0x02	; 2
    49d4:	80 e9       	ldi	r24, 0x90	; 144
    49d6:	90 e2       	ldi	r25, 0x20	; 32
    49d8:	82 83       	std	Z+2, r24	; 0x02
    49da:	93 83       	std	Z+3, r25	; 0x03
    49dc:	14 83       	std	Z+4, r17	; 0x04
    49de:	15 82       	std	Z+5, r1	; 0x05
    49e0:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <sprintf>
    49e4:	8d b7       	in	r24, 0x3d	; 61
    49e6:	9e b7       	in	r25, 0x3e	; 62
    49e8:	06 96       	adiw	r24, 0x06	; 6
    49ea:	8d bf       	out	0x3d, r24	; 61
    49ec:	9e bf       	out	0x3e, r25	; 62
    else
        if (quiet_mode_on == 0)
            xputs(PSTR("pat_num is too big.\n"));
   
	
    res = f_close(&file1);
    49ee:	83 e7       	ldi	r24, 0x73	; 115
    49f0:	98 e2       	ldi	r25, 0x28	; 40
    49f2:	0e 94 e9 3e 	call	0x7dd2	; 0x7dd2 <f_close>
    
    res = f_open(&file1, str, FA_OPEN_EXISTING | FA_READ);
    49f6:	83 e7       	ldi	r24, 0x73	; 115
    49f8:	98 e2       	ldi	r25, 0x28	; 40
    49fa:	60 e2       	ldi	r22, 0x20	; 32
    49fc:	74 e2       	ldi	r23, 0x24	; 36
    49fe:	41 e0       	ldi	r20, 0x01	; 1
    4a00:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
    if (res == FR_OK) {
    4a04:	88 23       	and	r24, r24
    4a06:	09 f0       	breq	.+2      	; 0x4a0a <set_pattern+0xa2>
    4a08:	af c0       	rjmp	.+350    	; 0x4b68 <set_pattern+0x200>
        res = f_read(&file1, pattDataBuff, 512, &cnt); // read the 10 byte test header info block
    4a0a:	83 e7       	ldi	r24, 0x73	; 115
    4a0c:	98 e2       	ldi	r25, 0x28	; 40
    4a0e:	be 01       	movw	r22, r28
    4a10:	6d 5f       	subi	r22, 0xFD	; 253
    4a12:	7f 4f       	sbci	r23, 0xFF	; 255
    4a14:	40 e0       	ldi	r20, 0x00	; 0
    4a16:	52 e0       	ldi	r21, 0x02	; 2
    4a18:	9e 01       	movw	r18, r28
    4a1a:	2f 5f       	subi	r18, 0xFF	; 255
    4a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a1e:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
        if ((res == FR_OK) && (cnt == 512)) {
    4a22:	88 23       	and	r24, r24
    4a24:	09 f0       	breq	.+2      	; 0x4a28 <set_pattern+0xc0>
    4a26:	99 c0       	rjmp	.+306    	; 0x4b5a <set_pattern+0x1f2>
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a2c:	80 50       	subi	r24, 0x00	; 0
    4a2e:	92 40       	sbci	r25, 0x02	; 2
    4a30:	09 f0       	breq	.+2      	; 0x4a34 <set_pattern+0xcc>
    4a32:	93 c0       	rjmp	.+294    	; 0x4b5a <set_pattern+0x1f2>

            // get the test header info
            ((uint8_t*)&x_num)[0] = pattDataBuff[0];
    4a34:	8b 81       	ldd	r24, Y+3	; 0x03
    4a36:	80 93 26 27 	sts	0x2726, r24
            ((uint8_t*)&x_num)[1] = pattDataBuff[1];
    4a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3c:	80 93 27 27 	sts	0x2727, r24
            ((uint8_t*)&y_num)[0] = pattDataBuff[2];
    4a40:	8d 81       	ldd	r24, Y+5	; 0x05
    4a42:	80 93 c5 24 	sts	0x24C5, r24
            ((uint8_t*)&y_num)[1] = pattDataBuff[3];
    4a46:	8e 81       	ldd	r24, Y+6	; 0x06
    4a48:	80 93 c6 24 	sts	0x24C6, r24
            num_panels = pattDataBuff[4];
    4a4c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a4e:	80 93 00 24 	sts	0x2400, r24
            gs_value = pattDataBuff[5];   //11, 12, 13, or 14 means use row compression
    4a52:	98 85       	ldd	r25, Y+8	; 0x08
    4a54:	90 93 49 26 	sts	0x2649, r25
            
            
            num_frames = x_num * y_num;
            if ((gs_value >= 11) & (gs_value <= 14)) {
    4a58:	89 2f       	mov	r24, r25
    4a5a:	8b 50       	subi	r24, 0x0B	; 11
    4a5c:	84 30       	cpi	r24, 0x04	; 4
    4a5e:	48 f4       	brcc	.+18     	; 0x4a72 <set_pattern+0x10a>
                gs_value = gs_value - 10;
    4a60:	9a 50       	subi	r25, 0x0A	; 10
    4a62:	90 93 49 26 	sts	0x2649, r25
                row_compress = 1;
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	80 93 c7 24 	sts	0x24C7, r24
                bytes_per_panel_frame = gs_value;
    4a6c:	90 93 cc 26 	sts	0x26CC, r25
    4a70:	0b c0       	rjmp	.+22     	; 0x4a88 <set_pattern+0x120>
            }
            else {
                row_compress = 0;
    4a72:	10 92 c7 24 	sts	0x24C7, r1
                bytes_per_panel_frame = gs_value * 8;
    4a76:	89 2f       	mov	r24, r25
    4a78:	90 e0       	ldi	r25, 0x00	; 0
    4a7a:	f3 e0       	ldi	r31, 0x03	; 3
    4a7c:	88 0f       	add	r24, r24
    4a7e:	99 1f       	adc	r25, r25
    4a80:	fa 95       	dec	r31
    4a82:	e1 f7       	brne	.-8      	; 0x4a7c <set_pattern+0x114>
    4a84:	80 93 cc 26 	sts	0x26CC, r24
            }
            index_x = index_y = 0;
    4a88:	10 92 71 28 	sts	0x2871, r1
    4a8c:	10 92 72 28 	sts	0x2872, r1
    4a90:	80 91 71 28 	lds	r24, 0x2871
    4a94:	90 91 72 28 	lds	r25, 0x2872
    4a98:	80 93 cd 26 	sts	0x26CD, r24
    4a9c:	90 93 ce 26 	sts	0x26CE, r25
            frame_num = 0;
    4aa0:	10 92 01 24 	sts	0x2401, r1
    4aa4:	10 92 02 24 	sts	0x2402, r1
            Stop = 1;
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	80 93 9c 20 	sts	0x209C, r24
            display_flag = 0;  //clear the display flag
    4aae:	10 92 fa 23 	sts	0x23FA, r1
            if (quiet_mode_on == 0){
    4ab2:	80 91 0b 24 	lds	r24, 0x240B
    4ab6:	88 23       	and	r24, r24
    4ab8:	09 f0       	breq	.+2      	; 0x4abc <set_pattern+0x154>
    4aba:	40 c0       	rjmp	.+128    	; 0x4b3c <set_pattern+0x1d4>
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    4abc:	00 d0       	rcall	.+0      	; 0x4abe <set_pattern+0x156>
    4abe:	0f 92       	push	r0
    4ac0:	ed b7       	in	r30, 0x3d	; 61
    4ac2:	fe b7       	in	r31, 0x3e	; 62
    4ac4:	31 96       	adiw	r30, 0x01	; 1
    4ac6:	8a e0       	ldi	r24, 0x0A	; 10
    4ac8:	9b e0       	ldi	r25, 0x0B	; 11
    4aca:	ad b7       	in	r26, 0x3d	; 61
    4acc:	be b7       	in	r27, 0x3e	; 62
    4ace:	11 96       	adiw	r26, 0x01	; 1
    4ad0:	8d 93       	st	X+, r24
    4ad2:	9c 93       	st	X, r25
    4ad4:	12 97       	sbiw	r26, 0x02	; 2
    4ad6:	12 83       	std	Z+2, r17	; 0x02
    4ad8:	13 82       	std	Z+3, r1	; 0x03
    4ada:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                xprintf(PSTR("  x_num = %u\n  y_num = %u\n  num_panels = %u\n  gs_value = %u\n row_compression = %u\n"),
    4ade:	8d b7       	in	r24, 0x3d	; 61
    4ae0:	9e b7       	in	r25, 0x3e	; 62
    4ae2:	08 97       	sbiw	r24, 0x08	; 8
    4ae4:	8d bf       	out	0x3d, r24	; 61
    4ae6:	9e bf       	out	0x3e, r25	; 62
    4ae8:	ed b7       	in	r30, 0x3d	; 61
    4aea:	fe b7       	in	r31, 0x3e	; 62
    4aec:	31 96       	adiw	r30, 0x01	; 1
    4aee:	87 eb       	ldi	r24, 0xB7	; 183
    4af0:	9a e0       	ldi	r25, 0x0A	; 10
    4af2:	ad b7       	in	r26, 0x3d	; 61
    4af4:	be b7       	in	r27, 0x3e	; 62
    4af6:	11 96       	adiw	r26, 0x01	; 1
    4af8:	8d 93       	st	X+, r24
    4afa:	9c 93       	st	X, r25
    4afc:	12 97       	sbiw	r26, 0x02	; 2
    4afe:	80 91 26 27 	lds	r24, 0x2726
    4b02:	90 91 27 27 	lds	r25, 0x2727
    4b06:	82 83       	std	Z+2, r24	; 0x02
    4b08:	93 83       	std	Z+3, r25	; 0x03
    4b0a:	80 91 c5 24 	lds	r24, 0x24C5
    4b0e:	90 91 c6 24 	lds	r25, 0x24C6
    4b12:	84 83       	std	Z+4, r24	; 0x04
    4b14:	95 83       	std	Z+5, r25	; 0x05
    4b16:	80 91 00 24 	lds	r24, 0x2400
    4b1a:	86 83       	std	Z+6, r24	; 0x06
    4b1c:	17 82       	std	Z+7, r1	; 0x07
    4b1e:	80 91 49 26 	lds	r24, 0x2649
    4b22:	80 87       	std	Z+8, r24	; 0x08
    4b24:	11 86       	std	Z+9, r1	; 0x09
    4b26:	80 91 c7 24 	lds	r24, 0x24C7
    4b2a:	82 87       	std	Z+10, r24	; 0x0a
    4b2c:	13 86       	std	Z+11, r1	; 0x0b
    4b2e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    4b32:	8d b7       	in	r24, 0x3d	; 61
    4b34:	9e b7       	in	r25, 0x3e	; 62
    4b36:	0c 96       	adiw	r24, 0x0c	; 12
    4b38:	8d bf       	out	0x3d, r24	; 61
    4b3a:	9e bf       	out	0x3e, r25	; 62
                        x_num, y_num, num_panels, gs_value, row_compress);
            }
            fetch_display_frame(frame_num, index_x, index_y);
    4b3c:	80 91 01 24 	lds	r24, 0x2401
    4b40:	90 91 02 24 	lds	r25, 0x2402
    4b44:	60 91 cd 26 	lds	r22, 0x26CD
    4b48:	70 91 ce 26 	lds	r23, 0x26CE
    4b4c:	40 91 71 28 	lds	r20, 0x2871
    4b50:	50 91 72 28 	lds	r21, 0x2872
    4b54:	0e 94 69 21 	call	0x42d2	; 0x42d2 <fetch_display_frame>
    4b58:	0f c0       	rjmp	.+30     	; 0x4b78 <set_pattern+0x210>
        } else {
            if (quiet_mode_on == 0)
    4b5a:	80 91 0b 24 	lds	r24, 0x240B
    4b5e:	88 23       	and	r24, r24
    4b60:	59 f4       	brne	.+22     	; 0x4b78 <set_pattern+0x210>
                xputs(PSTR("Error reading in pattern file\n"));
    4b62:	88 e9       	ldi	r24, 0x98	; 152
    4b64:	9a e0       	ldi	r25, 0x0A	; 10
    4b66:	06 c0       	rjmp	.+12     	; 0x4b74 <set_pattern+0x20c>
        }
    } else {
        if (quiet_mode_on == 0)
    4b68:	80 91 0b 24 	lds	r24, 0x240B
    4b6c:	88 23       	and	r24, r24
    4b6e:	21 f4       	brne	.+8      	; 0x4b78 <set_pattern+0x210>
            xputs(PSTR("Error opening pattern file\n"));
    4b70:	8c e7       	ldi	r24, 0x7C	; 124
    4b72:	9a e0       	ldi	r25, 0x0A	; 10
    4b74:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    }
	usePreloadedPattern = 0;
    4b78:	10 92 fe 23 	sts	0x23FE, r1
}
    4b7c:	ce 5f       	subi	r28, 0xFE	; 254
    4b7e:	dd 4f       	sbci	r29, 0xFD	; 253
    4b80:	e3 e0       	ldi	r30, 0x03	; 3
    4b82:	0c 94 b9 51 	jmp	0xa372	; 0xa372 <__epilogue_restores__+0x1e>

00004b86 <handle_message_length_5>:
        default:   
			i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    }
}

void handle_message_length_5(uint8_t *msg_buffer) {
    4b86:	fc 01       	movw	r30, r24
    switch(msg_buffer[0]) {
    4b88:	80 81       	ld	r24, Z
    4b8a:	80 37       	cpi	r24, 0x70	; 112
    4b8c:	09 f0       	breq	.+2      	; 0x4b90 <handle_message_length_5+0xa>
    4b8e:	7b c0       	rjmp	.+246    	; 0x4c86 <handle_message_length_5+0x100>
        case 0x70:   //put in a bunch of type casts, because of mysterious error dealling with frame index above 128.
            //'set_position'
            index_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    4b90:	92 81       	ldd	r25, Z+2	; 0x02
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	21 81       	ldd	r18, Z+1	; 0x01
    4b96:	82 0f       	add	r24, r18
    4b98:	91 1d       	adc	r25, r1
    4b9a:	80 93 cd 26 	sts	0x26CD, r24
    4b9e:	90 93 ce 26 	sts	0x26CE, r25
            index_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    4ba2:	94 81       	ldd	r25, Z+4	; 0x04
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	23 81       	ldd	r18, Z+3	; 0x03
    4ba8:	82 0f       	add	r24, r18
    4baa:	91 1d       	adc	r25, r1
    4bac:	80 93 71 28 	sts	0x2871, r24
    4bb0:	90 93 72 28 	sts	0x2872, r25
            
            X_pos_index = index_x; // these only used during position func. control mode, but
    4bb4:	80 91 cd 26 	lds	r24, 0x26CD
    4bb8:	90 91 ce 26 	lds	r25, 0x26CE
    4bbc:	80 93 1e 26 	sts	0x261E, r24
    4bc0:	90 93 1f 26 	sts	0x261F, r25
            Y_pos_index = index_y; //update here should not slow things down much and no need for sep. function.
    4bc4:	80 91 71 28 	lds	r24, 0x2871
    4bc8:	90 91 72 28 	lds	r25, 0x2872
    4bcc:	80 93 90 25 	sts	0x2590, r24
    4bd0:	90 93 91 25 	sts	0x2591, r25
            frame_num = index_y* x_num + index_x;
    4bd4:	20 91 71 28 	lds	r18, 0x2871
    4bd8:	30 91 72 28 	lds	r19, 0x2872
    4bdc:	40 91 cd 26 	lds	r20, 0x26CD
    4be0:	50 91 ce 26 	lds	r21, 0x26CE
    4be4:	80 91 26 27 	lds	r24, 0x2726
    4be8:	90 91 27 27 	lds	r25, 0x2727
    4bec:	bc 01       	movw	r22, r24
    4bee:	26 9f       	mul	r18, r22
    4bf0:	c0 01       	movw	r24, r0
    4bf2:	27 9f       	mul	r18, r23
    4bf4:	90 0d       	add	r25, r0
    4bf6:	36 9f       	mul	r19, r22
    4bf8:	90 0d       	add	r25, r0
    4bfa:	11 24       	eor	r1, r1
    4bfc:	84 0f       	add	r24, r20
    4bfe:	95 1f       	adc	r25, r21
    4c00:	80 93 01 24 	sts	0x2401, r24
    4c04:	90 93 02 24 	sts	0x2402, r25
            display_flag = 0;  //clear the display flag
    4c08:	10 92 fa 23 	sts	0x23FA, r1
            if (quiet_mode_on == 0)
    4c0c:	80 91 0b 24 	lds	r24, 0x240B
    4c10:	88 23       	and	r24, r24
    4c12:	51 f5       	brne	.+84     	; 0x4c68 <handle_message_length_5+0xe2>
                xprintf(PSTR("set_position: index_x= %u,  index_y= %u, and frame_num= %u\n"), index_x, index_y, frame_num);
    4c14:	20 91 cd 26 	lds	r18, 0x26CD
    4c18:	30 91 ce 26 	lds	r19, 0x26CE
    4c1c:	40 91 71 28 	lds	r20, 0x2871
    4c20:	50 91 72 28 	lds	r21, 0x2872
    4c24:	60 91 01 24 	lds	r22, 0x2401
    4c28:	70 91 02 24 	lds	r23, 0x2402
    4c2c:	8d b7       	in	r24, 0x3d	; 61
    4c2e:	9e b7       	in	r25, 0x3e	; 62
    4c30:	08 97       	sbiw	r24, 0x08	; 8
    4c32:	8d bf       	out	0x3d, r24	; 61
    4c34:	9e bf       	out	0x3e, r25	; 62
    4c36:	ed b7       	in	r30, 0x3d	; 61
    4c38:	fe b7       	in	r31, 0x3e	; 62
    4c3a:	31 96       	adiw	r30, 0x01	; 1
    4c3c:	81 e2       	ldi	r24, 0x21	; 33
    4c3e:	9e e0       	ldi	r25, 0x0E	; 14
    4c40:	ad b7       	in	r26, 0x3d	; 61
    4c42:	be b7       	in	r27, 0x3e	; 62
    4c44:	11 96       	adiw	r26, 0x01	; 1
    4c46:	8d 93       	st	X+, r24
    4c48:	9c 93       	st	X, r25
    4c4a:	12 97       	sbiw	r26, 0x02	; 2
    4c4c:	22 83       	std	Z+2, r18	; 0x02
    4c4e:	33 83       	std	Z+3, r19	; 0x03
    4c50:	44 83       	std	Z+4, r20	; 0x04
    4c52:	55 83       	std	Z+5, r21	; 0x05
    4c54:	66 83       	std	Z+6, r22	; 0x06
    4c56:	77 83       	std	Z+7, r23	; 0x07
    4c58:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    4c5c:	6d b7       	in	r22, 0x3d	; 61
    4c5e:	7e b7       	in	r23, 0x3e	; 62
    4c60:	68 5f       	subi	r22, 0xF8	; 248
    4c62:	7f 4f       	sbci	r23, 0xFF	; 255
    4c64:	6d bf       	out	0x3d, r22	; 61
    4c66:	7e bf       	out	0x3e, r23	; 62
            fetch_display_frame(frame_num, index_x, index_y);
    4c68:	80 91 01 24 	lds	r24, 0x2401
    4c6c:	90 91 02 24 	lds	r25, 0x2402
    4c70:	60 91 cd 26 	lds	r22, 0x26CD
    4c74:	70 91 ce 26 	lds	r23, 0x26CE
    4c78:	40 91 71 28 	lds	r20, 0x2871
    4c7c:	50 91 72 28 	lds	r21, 0x2872
    4c80:	0e 94 69 21 	call	0x42d2	; 0x42d2 <fetch_display_frame>
    4c84:	08 95       	ret
            break;
            
            
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	68 e0       	ldi	r22, 0x08	; 8
    4c8a:	45 ee       	ldi	r20, 0xE5	; 229
    4c8c:	50 e2       	ldi	r21, 0x20	; 32
    4c8e:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    4c92:	08 95       	ret

00004c94 <handle_message_length_2>:
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    }
}

void handle_message_length_2(uint8_t *msg_buffer) {
    4c94:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    4c96:	21 81       	ldd	r18, Z+1	; 0x01
    switch(msg_buffer[0]) {
    4c98:	80 81       	ld	r24, Z
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	31 97       	sbiw	r30, 0x01	; 1
    4ca0:	e1 31       	cpi	r30, 0x11	; 17
    4ca2:	f1 05       	cpc	r31, r1
    4ca4:	08 f0       	brcs	.+2      	; 0x4ca8 <handle_message_length_2+0x14>
    4ca6:	48 c0       	rjmp	.+144    	; 0x4d38 <handle_message_length_2+0xa4>
    4ca8:	e6 50       	subi	r30, 0x06	; 6
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
        case 0x01: //sends a reset command out to panel at taget address
            i2cMasterSend(argument_byte, 2, RESET);
    4cb0:	82 2f       	mov	r24, r18
    4cb2:	62 e0       	ldi	r22, 0x02	; 2
    4cb4:	4d ef       	ldi	r20, 0xFD	; 253
    4cb6:	50 e2       	ldi	r21, 0x20	; 32
    4cb8:	43 c0       	rjmp	.+134    	; 0x4d40 <handle_message_length_2+0xac>
            break;
            
        case 0x02: //sends a display command out to panel at taget address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    4cba:	82 2f       	mov	r24, r18
    4cbc:	62 e0       	ldi	r22, 0x02	; 2
    4cbe:	4f ef       	ldi	r20, 0xFF	; 255
    4cc0:	50 e2       	ldi	r21, 0x20	; 32
    4cc2:	3e c0       	rjmp	.+124    	; 0x4d40 <handle_message_length_2+0xac>
            break;
            
        case 0x03:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    4cc4:	82 2f       	mov	r24, r18
    4cc6:	0e 94 b4 24 	call	0x4968	; 0x4968 <set_pattern>
    4cca:	08 95       	ret
            break;
            
        case 0x04: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    4ccc:	82 2f       	mov	r24, r18
    4cce:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <test_ADC>
    4cd2:	08 95       	ret
            break;
            
        case 0x05: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is actually a channel, 0-7 to test ADC/DAC system
    4cd4:	82 2f       	mov	r24, r18
    4cd6:	0e 94 50 2f 	call	0x5ea0	; 0x5ea0 <test_DIO>
    4cda:	08 95       	ret
            break;
            
        case 0x06: // this is a trigger rate set command
            trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    4cdc:	82 2f       	mov	r24, r18
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	88 0f       	add	r24, r24
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	80 93 a7 20 	sts	0x20A7, r24
    4ce8:	90 93 a8 20 	sts	0x20A8, r25
    4cec:	08 95       	ret
            break;
            
        case 0x07:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is actually a panel number
    4cee:	82 2f       	mov	r24, r18
    4cf0:	0e 94 28 36 	call	0x6c50	; 0x6c50 <flash_panel>
    4cf4:	08 95       	ret
            break;
            
        case 0x08:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is actually a panel number
    4cf6:	82 2f       	mov	r24, r18
    4cf8:	0e 94 18 33 	call	0x6630	; 0x6630 <eeprom_panel>
    4cfc:	08 95       	ret
            break;
			
        case 0x09:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    4cfe:	82 2f       	mov	r24, r18
    4d00:	0e 94 ff 19 	call	0x33fe	; 0x33fe <set_hwConfig>
    4d04:	08 95       	ret
            break;	
			
		case 0x10:  // get ADC value from a ADC channel (1-4)
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(argument_byte - 1));
    4d06:	82 2f       	mov	r24, r18
    4d08:	81 50       	subi	r24, 0x01	; 1
    4d0a:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
    4d0e:	00 d0       	rcall	.+0      	; 0x4d10 <handle_message_length_2+0x7c>
    4d10:	0f 92       	push	r0
    4d12:	23 ea       	ldi	r18, 0xA3	; 163
    4d14:	3e e0       	ldi	r19, 0x0E	; 14
    4d16:	ed b7       	in	r30, 0x3d	; 61
    4d18:	fe b7       	in	r31, 0x3e	; 62
    4d1a:	21 83       	std	Z+1, r18	; 0x01
    4d1c:	32 83       	std	Z+2, r19	; 0x02
    4d1e:	83 83       	std	Z+3, r24	; 0x03
    4d20:	94 83       	std	Z+4, r25	; 0x04
    4d22:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    4d26:	0f 90       	pop	r0
    4d28:	0f 90       	pop	r0
    4d2a:	0f 90       	pop	r0
    4d2c:	0f 90       	pop	r0
    4d2e:	08 95       	ret
            break;	
		case 0x11 : 
			loadPattern2Panels(argument_byte);
    4d30:	82 2f       	mov	r24, r18
    4d32:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <loadPattern2Panels>
    4d36:	08 95       	ret
			break;
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	68 e0       	ldi	r22, 0x08	; 8
    4d3c:	4d ec       	ldi	r20, 0xCD	; 205
    4d3e:	50 e2       	ldi	r21, 0x20	; 32
    4d40:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    4d44:	08 95       	ret

00004d46 <handle_message_length_1>:
	TWI_MasterReleaseBuff(&twi3);
	TWI_MasterReleaseBuff(&twi4);
	releaseRxBuff();
}

void handle_message_length_1(uint8_t *msg_buffer) {
    4d46:	6f 92       	push	r6
    4d48:	7f 92       	push	r7
    4d4a:	9f 92       	push	r9
    4d4c:	af 92       	push	r10
    4d4e:	bf 92       	push	r11
    4d50:	cf 92       	push	r12
    4d52:	df 92       	push	r13
    4d54:	ef 92       	push	r14
    4d56:	ff 92       	push	r15
    4d58:	0f 93       	push	r16
    4d5a:	1f 93       	push	r17
    4d5c:	df 93       	push	r29
    4d5e:	cf 93       	push	r28
    4d60:	0f 92       	push	r0
    4d62:	0f 92       	push	r0
    4d64:	cd b7       	in	r28, 0x3d	; 61
    4d66:	de b7       	in	r29, 0x3e	; 62
    4d68:	fc 01       	movw	r30, r24
    uint8_t i;
	uint32_t tmp_x=0;
	uint32_t tmp_y=0;
	uint8_t n_sample=100;
    
    switch(msg_buffer[0]) {
    4d6a:	e0 81       	ld	r30, Z
    4d6c:	e3 34       	cpi	r30, 0x43	; 67
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <handle_message_length_1+0x2c>
    4d70:	1b c2       	rjmp	.+1078   	; 0x51a8 <handle_message_length_1+0x462>
    4d72:	e4 34       	cpi	r30, 0x44	; 68
    4d74:	08 f0       	brcs	.+2      	; 0x4d78 <handle_message_length_1+0x32>
    4d76:	5b c0       	rjmp	.+182    	; 0x4e2e <handle_message_length_1+0xe8>
    4d78:	e0 32       	cpi	r30, 0x20	; 32
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <handle_message_length_1+0x38>
    4d7c:	b6 c0       	rjmp	.+364    	; 0x4eea <handle_message_length_1+0x1a4>
    4d7e:	e1 32       	cpi	r30, 0x21	; 33
    4d80:	58 f5       	brcc	.+86     	; 0x4dd8 <handle_message_length_1+0x92>
    4d82:	e4 31       	cpi	r30, 0x14	; 20
    4d84:	09 f4       	brne	.+2      	; 0x4d88 <handle_message_length_1+0x42>
    4d86:	99 c2       	rjmp	.+1330   	; 0x52ba <handle_message_length_1+0x574>
    4d88:	e5 31       	cpi	r30, 0x15	; 21
    4d8a:	98 f4       	brcc	.+38     	; 0x4db2 <handle_message_length_1+0x6c>
    4d8c:	e1 31       	cpi	r30, 0x11	; 17
    4d8e:	09 f4       	brne	.+2      	; 0x4d92 <handle_message_length_1+0x4c>
    4d90:	86 c2       	rjmp	.+1292   	; 0x529e <handle_message_length_1+0x558>
    4d92:	e2 31       	cpi	r30, 0x12	; 18
    4d94:	38 f4       	brcc	.+14     	; 0x4da4 <handle_message_length_1+0x5e>
    4d96:	ee 23       	and	r30, r30
    4d98:	09 f4       	brne	.+2      	; 0x4d9c <handle_message_length_1+0x56>
    4d9a:	f2 c1       	rjmp	.+996    	; 0x5180 <handle_message_length_1+0x43a>
    4d9c:	e0 31       	cpi	r30, 0x10	; 16
    4d9e:	09 f0       	breq	.+2      	; 0x4da2 <handle_message_length_1+0x5c>
    4da0:	9d c3       	rjmp	.+1850   	; 0x54dc <handle_message_length_1+0x796>
    4da2:	79 c2       	rjmp	.+1266   	; 0x5296 <handle_message_length_1+0x550>
    4da4:	e2 31       	cpi	r30, 0x12	; 18
    4da6:	09 f4       	brne	.+2      	; 0x4daa <handle_message_length_1+0x64>
    4da8:	81 c2       	rjmp	.+1282   	; 0x52ac <handle_message_length_1+0x566>
    4daa:	e3 31       	cpi	r30, 0x13	; 19
    4dac:	09 f0       	breq	.+2      	; 0x4db0 <handle_message_length_1+0x6a>
    4dae:	96 c3       	rjmp	.+1836   	; 0x54dc <handle_message_length_1+0x796>
    4db0:	81 c2       	rjmp	.+1282   	; 0x52b4 <handle_message_length_1+0x56e>
    4db2:	e7 31       	cpi	r30, 0x17	; 23
    4db4:	09 f4       	brne	.+2      	; 0x4db8 <handle_message_length_1+0x72>
    4db6:	ad c2       	rjmp	.+1370   	; 0x5312 <handle_message_length_1+0x5cc>
    4db8:	e8 31       	cpi	r30, 0x18	; 24
    4dba:	38 f4       	brcc	.+14     	; 0x4dca <handle_message_length_1+0x84>
    4dbc:	e5 31       	cpi	r30, 0x15	; 21
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <handle_message_length_1+0x7c>
    4dc0:	7f c2       	rjmp	.+1278   	; 0x52c0 <handle_message_length_1+0x57a>
    4dc2:	e6 31       	cpi	r30, 0x16	; 22
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <handle_message_length_1+0x82>
    4dc6:	8a c3       	rjmp	.+1812   	; 0x54dc <handle_message_length_1+0x796>
    4dc8:	8c c2       	rjmp	.+1304   	; 0x52e2 <handle_message_length_1+0x59c>
    4dca:	e8 31       	cpi	r30, 0x18	; 24
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <handle_message_length_1+0x8a>
    4dce:	a5 c2       	rjmp	.+1354   	; 0x531a <handle_message_length_1+0x5d4>
    4dd0:	e9 31       	cpi	r30, 0x19	; 25
    4dd2:	09 f0       	breq	.+2      	; 0x4dd6 <handle_message_length_1+0x90>
    4dd4:	83 c3       	rjmp	.+1798   	; 0x54dc <handle_message_length_1+0x796>
    4dd6:	a4 c2       	rjmp	.+1352   	; 0x5320 <handle_message_length_1+0x5da>
    4dd8:	e6 32       	cpi	r30, 0x26	; 38
    4dda:	09 f4       	brne	.+2      	; 0x4dde <handle_message_length_1+0x98>
    4ddc:	18 c3       	rjmp	.+1584   	; 0x540e <handle_message_length_1+0x6c8>
    4dde:	e7 32       	cpi	r30, 0x27	; 39
    4de0:	98 f4       	brcc	.+38     	; 0x4e08 <handle_message_length_1+0xc2>
    4de2:	e3 32       	cpi	r30, 0x23	; 35
    4de4:	09 f4       	brne	.+2      	; 0x4de8 <handle_message_length_1+0xa2>
    4de6:	f4 c2       	rjmp	.+1512   	; 0x53d0 <handle_message_length_1+0x68a>
    4de8:	e4 32       	cpi	r30, 0x24	; 36
    4dea:	38 f4       	brcc	.+14     	; 0x4dfa <handle_message_length_1+0xb4>
    4dec:	e1 32       	cpi	r30, 0x21	; 33
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <handle_message_length_1+0xac>
    4df0:	db c2       	rjmp	.+1462   	; 0x53a8 <handle_message_length_1+0x662>
    4df2:	e2 32       	cpi	r30, 0x22	; 34
    4df4:	09 f0       	breq	.+2      	; 0x4df8 <handle_message_length_1+0xb2>
    4df6:	72 c3       	rjmp	.+1764   	; 0x54dc <handle_message_length_1+0x796>
    4df8:	e1 c2       	rjmp	.+1474   	; 0x53bc <handle_message_length_1+0x676>
    4dfa:	e4 32       	cpi	r30, 0x24	; 36
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <handle_message_length_1+0xba>
    4dfe:	f7 c2       	rjmp	.+1518   	; 0x53ee <handle_message_length_1+0x6a8>
    4e00:	e5 32       	cpi	r30, 0x25	; 37
    4e02:	09 f0       	breq	.+2      	; 0x4e06 <handle_message_length_1+0xc0>
    4e04:	6b c3       	rjmp	.+1750   	; 0x54dc <handle_message_length_1+0x796>
    4e06:	11 c1       	rjmp	.+546    	; 0x502a <handle_message_length_1+0x2e4>
    4e08:	e0 34       	cpi	r30, 0x40	; 64
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <handle_message_length_1+0xc8>
    4e0c:	be c1       	rjmp	.+892    	; 0x518a <handle_message_length_1+0x444>
    4e0e:	e1 34       	cpi	r30, 0x41	; 65
    4e10:	38 f4       	brcc	.+14     	; 0x4e20 <handle_message_length_1+0xda>
    4e12:	e0 33       	cpi	r30, 0x30	; 48
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <handle_message_length_1+0xd2>
    4e16:	bc c0       	rjmp	.+376    	; 0x4f90 <handle_message_length_1+0x24a>
    4e18:	e5 33       	cpi	r30, 0x35	; 53
    4e1a:	09 f0       	breq	.+2      	; 0x4e1e <handle_message_length_1+0xd8>
    4e1c:	5f c3       	rjmp	.+1726   	; 0x54dc <handle_message_length_1+0x796>
    4e1e:	66 c1       	rjmp	.+716    	; 0x50ec <handle_message_length_1+0x3a6>
    4e20:	e1 34       	cpi	r30, 0x41	; 65
    4e22:	09 f4       	brne	.+2      	; 0x4e26 <handle_message_length_1+0xe0>
    4e24:	b7 c1       	rjmp	.+878    	; 0x5194 <handle_message_length_1+0x44e>
    4e26:	e2 34       	cpi	r30, 0x42	; 66
    4e28:	09 f0       	breq	.+2      	; 0x4e2c <handle_message_length_1+0xe6>
    4e2a:	58 c3       	rjmp	.+1712   	; 0x54dc <handle_message_length_1+0x796>
    4e2c:	b8 c1       	rjmp	.+880    	; 0x519e <handle_message_length_1+0x458>
    4e2e:	e4 39       	cpi	r30, 0x94	; 148
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <handle_message_length_1+0xee>
    4e32:	f5 c1       	rjmp	.+1002   	; 0x521e <handle_message_length_1+0x4d8>
    4e34:	e5 39       	cpi	r30, 0x95	; 149
    4e36:	58 f5       	brcc	.+86     	; 0x4e8e <handle_message_length_1+0x148>
    4e38:	e0 36       	cpi	r30, 0x60	; 96
    4e3a:	09 f4       	brne	.+2      	; 0x4e3e <handle_message_length_1+0xf8>
    4e3c:	d6 c1       	rjmp	.+940    	; 0x51ea <handle_message_length_1+0x4a4>
    4e3e:	e1 36       	cpi	r30, 0x61	; 97
    4e40:	98 f4       	brcc	.+38     	; 0x4e68 <handle_message_length_1+0x122>
    4e42:	e6 34       	cpi	r30, 0x46	; 70
    4e44:	09 f4       	brne	.+2      	; 0x4e48 <handle_message_length_1+0x102>
    4e46:	bf c1       	rjmp	.+894    	; 0x51c6 <handle_message_length_1+0x480>
    4e48:	e7 34       	cpi	r30, 0x47	; 71
    4e4a:	38 f4       	brcc	.+14     	; 0x4e5a <handle_message_length_1+0x114>
    4e4c:	e4 34       	cpi	r30, 0x44	; 68
    4e4e:	09 f4       	brne	.+2      	; 0x4e52 <handle_message_length_1+0x10c>
    4e50:	b0 c1       	rjmp	.+864    	; 0x51b2 <handle_message_length_1+0x46c>
    4e52:	e5 34       	cpi	r30, 0x45	; 69
    4e54:	09 f0       	breq	.+2      	; 0x4e58 <handle_message_length_1+0x112>
    4e56:	42 c3       	rjmp	.+1668   	; 0x54dc <handle_message_length_1+0x796>
    4e58:	b1 c1       	rjmp	.+866    	; 0x51bc <handle_message_length_1+0x476>
    4e5a:	e7 34       	cpi	r30, 0x47	; 71
    4e5c:	09 f4       	brne	.+2      	; 0x4e60 <handle_message_length_1+0x11a>
    4e5e:	b8 c1       	rjmp	.+880    	; 0x51d0 <handle_message_length_1+0x48a>
    4e60:	e0 35       	cpi	r30, 0x50	; 80
    4e62:	09 f0       	breq	.+2      	; 0x4e66 <handle_message_length_1+0x120>
    4e64:	3b c3       	rjmp	.+1654   	; 0x54dc <handle_message_length_1+0x796>
    4e66:	be c1       	rjmp	.+892    	; 0x51e4 <handle_message_length_1+0x49e>
    4e68:	e1 39       	cpi	r30, 0x91	; 145
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <handle_message_length_1+0x128>
    4e6c:	c9 c1       	rjmp	.+914    	; 0x5200 <handle_message_length_1+0x4ba>
    4e6e:	e2 39       	cpi	r30, 0x92	; 146
    4e70:	38 f4       	brcc	.+14     	; 0x4e80 <handle_message_length_1+0x13a>
    4e72:	e0 37       	cpi	r30, 0x70	; 112
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <handle_message_length_1+0x132>
    4e76:	bc c1       	rjmp	.+888    	; 0x51f0 <handle_message_length_1+0x4aa>
    4e78:	e0 39       	cpi	r30, 0x90	; 144
    4e7a:	09 f0       	breq	.+2      	; 0x4e7e <handle_message_length_1+0x138>
    4e7c:	2f c3       	rjmp	.+1630   	; 0x54dc <handle_message_length_1+0x796>
    4e7e:	bb c1       	rjmp	.+886    	; 0x51f6 <handle_message_length_1+0x4b0>
    4e80:	e2 39       	cpi	r30, 0x92	; 146
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <handle_message_length_1+0x140>
    4e84:	c2 c1       	rjmp	.+900    	; 0x520a <handle_message_length_1+0x4c4>
    4e86:	e3 39       	cpi	r30, 0x93	; 147
    4e88:	09 f0       	breq	.+2      	; 0x4e8c <handle_message_length_1+0x146>
    4e8a:	28 c3       	rjmp	.+1616   	; 0x54dc <handle_message_length_1+0x796>
    4e8c:	c3 c1       	rjmp	.+902    	; 0x5214 <handle_message_length_1+0x4ce>
    4e8e:	ea 39       	cpi	r30, 0x9A	; 154
    4e90:	09 f4       	brne	.+2      	; 0x4e94 <handle_message_length_1+0x14e>
    4e92:	e3 c1       	rjmp	.+966    	; 0x525a <handle_message_length_1+0x514>
    4e94:	eb 39       	cpi	r30, 0x9B	; 155
    4e96:	98 f4       	brcc	.+38     	; 0x4ebe <handle_message_length_1+0x178>
    4e98:	e7 39       	cpi	r30, 0x97	; 151
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <handle_message_length_1+0x158>
    4e9c:	cf c1       	rjmp	.+926    	; 0x523c <handle_message_length_1+0x4f6>
    4e9e:	e8 39       	cpi	r30, 0x98	; 152
    4ea0:	38 f4       	brcc	.+14     	; 0x4eb0 <handle_message_length_1+0x16a>
    4ea2:	e5 39       	cpi	r30, 0x95	; 149
    4ea4:	09 f4       	brne	.+2      	; 0x4ea8 <handle_message_length_1+0x162>
    4ea6:	c0 c1       	rjmp	.+896    	; 0x5228 <handle_message_length_1+0x4e2>
    4ea8:	e6 39       	cpi	r30, 0x96	; 150
    4eaa:	09 f0       	breq	.+2      	; 0x4eae <handle_message_length_1+0x168>
    4eac:	17 c3       	rjmp	.+1582   	; 0x54dc <handle_message_length_1+0x796>
    4eae:	c1 c1       	rjmp	.+898    	; 0x5232 <handle_message_length_1+0x4ec>
    4eb0:	e8 39       	cpi	r30, 0x98	; 152
    4eb2:	09 f4       	brne	.+2      	; 0x4eb6 <handle_message_length_1+0x170>
    4eb4:	c8 c1       	rjmp	.+912    	; 0x5246 <handle_message_length_1+0x500>
    4eb6:	e9 39       	cpi	r30, 0x99	; 153
    4eb8:	09 f0       	breq	.+2      	; 0x4ebc <handle_message_length_1+0x176>
    4eba:	10 c3       	rjmp	.+1568   	; 0x54dc <handle_message_length_1+0x796>
    4ebc:	c9 c1       	rjmp	.+914    	; 0x5250 <handle_message_length_1+0x50a>
    4ebe:	ed 39       	cpi	r30, 0x9D	; 157
    4ec0:	09 f4       	brne	.+2      	; 0x4ec4 <handle_message_length_1+0x17e>
    4ec2:	da c1       	rjmp	.+948    	; 0x5278 <handle_message_length_1+0x532>
    4ec4:	ee 39       	cpi	r30, 0x9E	; 158
    4ec6:	38 f4       	brcc	.+14     	; 0x4ed6 <handle_message_length_1+0x190>
    4ec8:	eb 39       	cpi	r30, 0x9B	; 155
    4eca:	09 f4       	brne	.+2      	; 0x4ece <handle_message_length_1+0x188>
    4ecc:	cb c1       	rjmp	.+918    	; 0x5264 <handle_message_length_1+0x51e>
    4ece:	ec 39       	cpi	r30, 0x9C	; 156
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <handle_message_length_1+0x18e>
    4ed2:	04 c3       	rjmp	.+1544   	; 0x54dc <handle_message_length_1+0x796>
    4ed4:	cc c1       	rjmp	.+920    	; 0x526e <handle_message_length_1+0x528>
    4ed6:	ef 39       	cpi	r30, 0x9F	; 159
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <handle_message_length_1+0x196>
    4eda:	d8 c1       	rjmp	.+944    	; 0x528c <handle_message_length_1+0x546>
    4edc:	ef 39       	cpi	r30, 0x9F	; 159
    4ede:	08 f4       	brcc	.+2      	; 0x4ee2 <handle_message_length_1+0x19c>
    4ee0:	d0 c1       	rjmp	.+928    	; 0x5282 <handle_message_length_1+0x53c>
    4ee2:	ef 3f       	cpi	r30, 0xFF	; 255
    4ee4:	09 f0       	breq	.+2      	; 0x4ee8 <handle_message_length_1+0x1a2>
    4ee6:	fa c2       	rjmp	.+1524   	; 0x54dc <handle_message_length_1+0x796>
    4ee8:	78 c1       	rjmp	.+752    	; 0x51da <handle_message_length_1+0x494>
        case 0x20:  //Start display: 0x20
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    4eea:	10 92 03 24 	sts	0x2403, r1
			func_read_index_y = 0;
    4eee:	10 92 04 24 	sts	0x2404, r1
            Stop = 0;
    4ef2:	10 92 9c 20 	sts	0x209C, r1
			//next_block_x = 1;
			//next_block_y = 1;
            display_flag = 0;  //clear the display flag
    4ef6:	10 92 fa 23 	sts	0x23FA, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    4efa:	8f eb       	ldi	r24, 0xBF	; 191
    4efc:	9f e1       	ldi	r25, 0x1F	; 31
    4efe:	4e e3       	ldi	r20, 0x3E	; 62
    4f00:	50 e0       	ldi	r21, 0x00	; 0
    4f02:	60 e0       	ldi	r22, 0x00	; 0
    4f04:	70 e0       	ldi	r23, 0x00	; 0
    4f06:	21 e0       	ldi	r18, 0x01	; 1
    4f08:	01 e0       	ldi	r16, 0x01	; 1
    4f0a:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0); //initilize the 2 and 3 priority interupts to a fast rate so that
    4f0e:	83 eb       	ldi	r24, 0xB3	; 179
    4f10:	9b e0       	ldi	r25, 0x0B	; 11
    4f12:	4e e3       	ldi	r20, 0x3E	; 62
    4f14:	50 e0       	ldi	r21, 0x00	; 0
    4f16:	60 e0       	ldi	r22, 0x00	; 0
    4f18:	70 e0       	ldi	r23, 0x00	; 0
    4f1a:	22 e0       	ldi	r18, 0x02	; 2
    4f1c:	00 e0       	ldi	r16, 0x00	; 0
    4f1e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0); // the countdown is fast until the setting of the next rate
    4f22:	8b ee       	ldi	r24, 0xEB	; 235
    4f24:	9b e0       	ldi	r25, 0x0B	; 11
    4f26:	4e e3       	ldi	r20, 0x3E	; 62
    4f28:	50 e0       	ldi	r21, 0x00	; 0
    4f2a:	60 e0       	ldi	r22, 0x00	; 0
    4f2c:	70 e0       	ldi	r23, 0x00	; 0
    4f2e:	23 e0       	ldi	r18, 0x03	; 3
    4f30:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
                                                                //by the Update_display interupt.
			if (default_func_x)
    4f34:	80 91 a1 20 	lds	r24, 0x20A1
    4f38:	40 91 a3 20 	lds	r20, 0x20A3
    4f3c:	50 91 a4 20 	lds	r21, 0x20A4
    4f40:	88 23       	and	r24, r24
    4f42:	31 f0       	breq	.+12     	; 0x4f50 <handle_message_length_1+0x20a>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    4f44:	60 e0       	ldi	r22, 0x00	; 0
    4f46:	70 e0       	ldi	r23, 0x00	; 0
    4f48:	83 e0       	ldi	r24, 0x03	; 3
    4f4a:	90 e1       	ldi	r25, 0x10	; 16
    4f4c:	24 e0       	ldi	r18, 0x04	; 4
    4f4e:	06 c0       	rjmp	.+12     	; 0x4f5c <handle_message_length_1+0x216>
			else
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    4f50:	60 e0       	ldi	r22, 0x00	; 0
    4f52:	70 e0       	ldi	r23, 0x00	; 0
    4f54:	83 e0       	ldi	r24, 0x03	; 3
    4f56:	90 e1       	ldi	r25, 0x10	; 16
    4f58:	24 e0       	ldi	r18, 0x04	; 4
    4f5a:	01 e0       	ldi	r16, 0x01	; 1
    4f5c:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			if (default_func_y)
    4f60:	80 91 a2 20 	lds	r24, 0x20A2
    4f64:	40 91 a5 20 	lds	r20, 0x20A5
    4f68:	50 91 a6 20 	lds	r21, 0x20A6
    4f6c:	88 23       	and	r24, r24
    4f6e:	39 f0       	breq	.+14     	; 0x4f7e <handle_message_length_1+0x238>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    4f70:	60 e0       	ldi	r22, 0x00	; 0
    4f72:	70 e0       	ldi	r23, 0x00	; 0
    4f74:	83 e3       	ldi	r24, 0x33	; 51
    4f76:	9f e0       	ldi	r25, 0x0F	; 15
    4f78:	25 e0       	ldi	r18, 0x05	; 5
    4f7a:	00 e0       	ldi	r16, 0x00	; 0
    4f7c:	06 c0       	rjmp	.+12     	; 0x4f8a <handle_message_length_1+0x244>
			else
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    4f7e:	60 e0       	ldi	r22, 0x00	; 0
    4f80:	70 e0       	ldi	r23, 0x00	; 0
    4f82:	83 e3       	ldi	r24, 0x33	; 51
    4f84:	9f e0       	ldi	r25, 0x0F	; 15
    4f86:	25 e0       	ldi	r18, 0x05	; 5
    4f88:	01 e0       	ldi	r16, 0x01	; 1
    4f8a:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
    4f8e:	ac c2       	rjmp	.+1368   	; 0x54e8 <handle_message_length_1+0x7a2>
			break;
            
        case 0x30: //stop display
            Stop = 1;
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    4f96:	8f eb       	ldi	r24, 0xBF	; 191
    4f98:	9f e1       	ldi	r25, 0x1F	; 31
    4f9a:	4e e3       	ldi	r20, 0x3E	; 62
    4f9c:	50 e0       	ldi	r21, 0x00	; 0
    4f9e:	60 e0       	ldi	r22, 0x00	; 0
    4fa0:	70 e0       	ldi	r23, 0x00	; 0
    4fa2:	21 e0       	ldi	r18, 0x01	; 1
    4fa4:	00 e0       	ldi	r16, 0x00	; 0
    4fa6:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    4faa:	83 eb       	ldi	r24, 0xB3	; 179
    4fac:	9b e0       	ldi	r25, 0x0B	; 11
    4fae:	4e e3       	ldi	r20, 0x3E	; 62
    4fb0:	50 e0       	ldi	r21, 0x00	; 0
    4fb2:	60 e0       	ldi	r22, 0x00	; 0
    4fb4:	70 e0       	ldi	r23, 0x00	; 0
    4fb6:	22 e0       	ldi	r18, 0x02	; 2
    4fb8:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    4fbc:	8b ee       	ldi	r24, 0xEB	; 235
    4fbe:	9b e0       	ldi	r25, 0x0B	; 11
    4fc0:	4e e3       	ldi	r20, 0x3E	; 62
    4fc2:	50 e0       	ldi	r21, 0x00	; 0
    4fc4:	60 e0       	ldi	r22, 0x00	; 0
    4fc6:	70 e0       	ldi	r23, 0x00	; 0
    4fc8:	23 e0       	ldi	r18, 0x03	; 3
    4fca:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    4fce:	40 91 a3 20 	lds	r20, 0x20A3
    4fd2:	50 91 a4 20 	lds	r21, 0x20A4
    4fd6:	60 e0       	ldi	r22, 0x00	; 0
    4fd8:	70 e0       	ldi	r23, 0x00	; 0
    4fda:	83 e0       	ldi	r24, 0x03	; 3
    4fdc:	90 e1       	ldi	r25, 0x10	; 16
    4fde:	24 e0       	ldi	r18, 0x04	; 4
    4fe0:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    4fe4:	40 91 a5 20 	lds	r20, 0x20A5
    4fe8:	50 91 a6 20 	lds	r21, 0x20A6
    4fec:	60 e0       	ldi	r22, 0x00	; 0
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	83 e3       	ldi	r24, 0x33	; 51
    4ff2:	9f e0       	ldi	r25, 0x0F	; 15
    4ff4:	25 e0       	ldi	r18, 0x05	; 5
    4ff6:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			next_block_x = 0;
    4ffa:	10 92 09 24 	sts	0x2409, r1
			next_block_y = 0;				
    4ffe:	10 92 0a 24 	sts	0x240A, r1
			if (default_func_x == 0)
    5002:	80 91 a1 20 	lds	r24, 0x20A1
    5006:	88 23       	and	r24, r24
    5008:	29 f4       	brne	.+10     	; 0x5014 <handle_message_length_1+0x2ce>
				fetch_update_funcX(1,next_block_x);
    500a:	60 91 09 24 	lds	r22, 0x2409
    500e:	81 e0       	ldi	r24, 0x01	; 1
    5010:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fetch_update_funcX>
			if (default_func_y == 0)	
    5014:	80 91 a2 20 	lds	r24, 0x20A2
    5018:	88 23       	and	r24, r24
    501a:	09 f0       	breq	.+2      	; 0x501e <handle_message_length_1+0x2d8>
    501c:	65 c2       	rjmp	.+1226   	; 0x54e8 <handle_message_length_1+0x7a2>
				fetch_update_funcY(1,next_block_x);
    501e:	60 91 09 24 	lds	r22, 0x2409
    5022:	81 e0       	ldi	r24, 0x01	; 1
    5024:	0e 94 67 0e 	call	0x1cce	; 0x1cce <fetch_update_funcY>
    5028:	5f c2       	rjmp	.+1214   	; 0x54e8 <handle_message_length_1+0x7a2>
		
            break;
            
        case 0x25:  //Start display & trigger - same as regular, but this also does trigger
            //set these to zero so that start at beginning of function - useful for putting in a set amount of expansion
			func_read_index_x = 0;
    502a:	10 92 03 24 	sts	0x2403, r1
			func_read_index_y = 0;
    502e:	10 92 04 24 	sts	0x2404, r1
            Stop = 0;
    5032:	10 92 9c 20 	sts	0x209C, r1
            display_flag = 0;  //clear the display flag
    5036:	10 92 fa 23 	sts	0x23FA, r1
            Reg_Handler(Update_display, UPDATE_RATE, 1, 1);
    503a:	8f eb       	ldi	r24, 0xBF	; 191
    503c:	9f e1       	ldi	r25, 0x1F	; 31
    503e:	4e e3       	ldi	r20, 0x3E	; 62
    5040:	50 e0       	ldi	r21, 0x00	; 0
    5042:	60 e0       	ldi	r22, 0x00	; 0
    5044:	70 e0       	ldi	r23, 0x00	; 0
    5046:	21 e0       	ldi	r18, 0x01	; 1
    5048:	01 e0       	ldi	r16, 0x01	; 1
    504a:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    504e:	83 eb       	ldi	r24, 0xB3	; 179
    5050:	9b e0       	ldi	r25, 0x0B	; 11
    5052:	4e e3       	ldi	r20, 0x3E	; 62
    5054:	50 e0       	ldi	r21, 0x00	; 0
    5056:	60 e0       	ldi	r22, 0x00	; 0
    5058:	70 e0       	ldi	r23, 0x00	; 0
    505a:	22 e0       	ldi	r18, 0x02	; 2
    505c:	00 e0       	ldi	r16, 0x00	; 0
    505e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    5062:	8b ee       	ldi	r24, 0xEB	; 235
    5064:	9b e0       	ldi	r25, 0x0B	; 11
    5066:	4e e3       	ldi	r20, 0x3E	; 62
    5068:	50 e0       	ldi	r21, 0x00	; 0
    506a:	60 e0       	ldi	r22, 0x00	; 0
    506c:	70 e0       	ldi	r23, 0x00	; 0
    506e:	23 e0       	ldi	r18, 0x03	; 3
    5070:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			if (default_func_x)
    5074:	80 91 a1 20 	lds	r24, 0x20A1
    5078:	40 91 a3 20 	lds	r20, 0x20A3
    507c:	50 91 a4 20 	lds	r21, 0x20A4
    5080:	88 23       	and	r24, r24
    5082:	31 f0       	breq	.+12     	; 0x5090 <handle_message_length_1+0x34a>
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    5084:	60 e0       	ldi	r22, 0x00	; 0
    5086:	70 e0       	ldi	r23, 0x00	; 0
    5088:	83 e0       	ldi	r24, 0x03	; 3
    508a:	90 e1       	ldi	r25, 0x10	; 16
    508c:	24 e0       	ldi	r18, 0x04	; 4
    508e:	06 c0       	rjmp	.+12     	; 0x509c <handle_message_length_1+0x356>
			else
				Reg_Handler(update_funcCnt_x, functionX_rate, 4, 1);
    5090:	60 e0       	ldi	r22, 0x00	; 0
    5092:	70 e0       	ldi	r23, 0x00	; 0
    5094:	83 e0       	ldi	r24, 0x03	; 3
    5096:	90 e1       	ldi	r25, 0x10	; 16
    5098:	24 e0       	ldi	r18, 0x04	; 4
    509a:	01 e0       	ldi	r16, 0x01	; 1
    509c:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			if (default_func_y)
    50a0:	80 91 a2 20 	lds	r24, 0x20A2
    50a4:	40 91 a5 20 	lds	r20, 0x20A5
    50a8:	50 91 a6 20 	lds	r21, 0x20A6
    50ac:	88 23       	and	r24, r24
    50ae:	39 f0       	breq	.+14     	; 0x50be <handle_message_length_1+0x378>
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    50b0:	60 e0       	ldi	r22, 0x00	; 0
    50b2:	70 e0       	ldi	r23, 0x00	; 0
    50b4:	83 e3       	ldi	r24, 0x33	; 51
    50b6:	9f e0       	ldi	r25, 0x0F	; 15
    50b8:	25 e0       	ldi	r18, 0x05	; 5
    50ba:	00 e0       	ldi	r16, 0x00	; 0
    50bc:	06 c0       	rjmp	.+12     	; 0x50ca <handle_message_length_1+0x384>
			else
				Reg_Handler(update_funcCnt_y, functionY_rate, 5, 1); 			
    50be:	60 e0       	ldi	r22, 0x00	; 0
    50c0:	70 e0       	ldi	r23, 0x00	; 0
    50c2:	83 e3       	ldi	r24, 0x33	; 51
    50c4:	9f e0       	ldi	r25, 0x0F	; 15
    50c6:	25 e0       	ldi	r18, 0x05	; 5
    50c8:	01 e0       	ldi	r16, 0x01	; 1
    50ca:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
				
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_RATE/trigger_rate, 0, 1); //turn on the trigger toggle
    50ce:	60 91 a7 20 	lds	r22, 0x20A7
    50d2:	70 91 a8 20 	lds	r23, 0x20A8
    50d6:	82 e1       	ldi	r24, 0x12	; 18
    50d8:	9a e7       	ldi	r25, 0x7A	; 122
    50da:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    50de:	ab 01       	movw	r20, r22
    50e0:	60 e0       	ldi	r22, 0x00	; 0
    50e2:	70 e0       	ldi	r23, 0x00	; 0
    50e4:	8b eb       	ldi	r24, 0xBB	; 187
    50e6:	9f e1       	ldi	r25, 0x1F	; 31
    50e8:	20 e0       	ldi	r18, 0x00	; 0
    50ea:	4e cf       	rjmp	.-356    	; 0x4f88 <handle_message_length_1+0x242>
            break;
            
        case 0x35: //stop display & trigger - same as regular, but this also does trigger
            Stop = 1;
    50ec:	81 e0       	ldi	r24, 0x01	; 1
    50ee:	80 93 9c 20 	sts	0x209C, r24
            //turn off the interupts
            Reg_Handler(Update_display, UPDATE_RATE, 1, 0);
    50f2:	8f eb       	ldi	r24, 0xBF	; 191
    50f4:	9f e1       	ldi	r25, 0x1F	; 31
    50f6:	4e e3       	ldi	r20, 0x3E	; 62
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	60 e0       	ldi	r22, 0x00	; 0
    50fc:	70 e0       	ldi	r23, 0x00	; 0
    50fe:	21 e0       	ldi	r18, 0x01	; 1
    5100:	00 e0       	ldi	r16, 0x00	; 0
    5102:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_x, UPDATE_RATE, 2, 0);
    5106:	83 eb       	ldi	r24, 0xB3	; 179
    5108:	9b e0       	ldi	r25, 0x0B	; 11
    510a:	4e e3       	ldi	r20, 0x3E	; 62
    510c:	50 e0       	ldi	r21, 0x00	; 0
    510e:	60 e0       	ldi	r22, 0x00	; 0
    5110:	70 e0       	ldi	r23, 0x00	; 0
    5112:	22 e0       	ldi	r18, 0x02	; 2
    5114:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(increment_index_y, UPDATE_RATE, 3, 0);
    5118:	8b ee       	ldi	r24, 0xEB	; 235
    511a:	9b e0       	ldi	r25, 0x0B	; 11
    511c:	4e e3       	ldi	r20, 0x3E	; 62
    511e:	50 e0       	ldi	r21, 0x00	; 0
    5120:	60 e0       	ldi	r22, 0x00	; 0
    5122:	70 e0       	ldi	r23, 0x00	; 0
    5124:	23 e0       	ldi	r18, 0x03	; 3
    5126:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			Reg_Handler(update_funcCnt_x, functionX_rate, 4, 0);
    512a:	40 91 a3 20 	lds	r20, 0x20A3
    512e:	50 91 a4 20 	lds	r21, 0x20A4
    5132:	60 e0       	ldi	r22, 0x00	; 0
    5134:	70 e0       	ldi	r23, 0x00	; 0
    5136:	83 e0       	ldi	r24, 0x03	; 3
    5138:	90 e1       	ldi	r25, 0x10	; 16
    513a:	24 e0       	ldi	r18, 0x04	; 4
    513c:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			Reg_Handler(update_funcCnt_y, functionY_rate, 5, 0); 
    5140:	40 91 a5 20 	lds	r20, 0x20A5
    5144:	50 91 a6 20 	lds	r21, 0x20A6
    5148:	60 e0       	ldi	r22, 0x00	; 0
    514a:	70 e0       	ldi	r23, 0x00	; 0
    514c:	83 e3       	ldi	r24, 0x33	; 51
    514e:	9f e0       	ldi	r25, 0x0F	; 15
    5150:	25 e0       	ldi	r18, 0x05	; 5
    5152:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
            Reg_Handler(toggle_trigger, OVERFLOW_RATE/trigger_rate, 0, 0); //turn off the trigger toggle
    5156:	20 91 a7 20 	lds	r18, 0x20A7
    515a:	30 91 a8 20 	lds	r19, 0x20A8
    515e:	40 e0       	ldi	r20, 0x00	; 0
    5160:	50 e0       	ldi	r21, 0x00	; 0
    5162:	62 e1       	ldi	r22, 0x12	; 18
    5164:	7a e7       	ldi	r23, 0x7A	; 122
    5166:	80 e0       	ldi	r24, 0x00	; 0
    5168:	90 e0       	ldi	r25, 0x00	; 0
    516a:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <__divmodsi4>
    516e:	8b eb       	ldi	r24, 0xBB	; 187
    5170:	9f e1       	ldi	r25, 0x1F	; 31
    5172:	ba 01       	movw	r22, r20
    5174:	a9 01       	movw	r20, r18
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	0e 94 aa 3c 	call	0x7954	; 0x7954 <Reg_Handler>
			digitalWrite(2,LOW);    //set the output to low
    517c:	82 e0       	ldi	r24, 0x02	; 2
    517e:	92 c0       	rjmp	.+292    	; 0x52a4 <handle_message_length_1+0x55e>
            break;
            
        case 0x00:  i2cMasterSend(0x00, 8, ALL_OFF); break;
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	68 e0       	ldi	r22, 0x08	; 8
    5184:	48 e3       	ldi	r20, 0x38	; 56
    5186:	54 e2       	ldi	r21, 0x24	; 36
    5188:	ad c1       	rjmp	.+858    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x40:  i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    518a:	80 e0       	ldi	r24, 0x00	; 0
    518c:	68 e1       	ldi	r22, 0x18	; 24
    518e:	41 e0       	ldi	r20, 0x01	; 1
    5190:	51 e2       	ldi	r21, 0x21	; 33
    5192:	a8 c1       	rjmp	.+848    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x41:  i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    5194:	80 e0       	ldi	r24, 0x00	; 0
    5196:	68 e1       	ldi	r22, 0x18	; 24
    5198:	49 e1       	ldi	r20, 0x19	; 25
    519a:	51 e2       	ldi	r21, 0x21	; 33
    519c:	a3 c1       	rjmp	.+838    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x42:  i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    519e:	80 e0       	ldi	r24, 0x00	; 0
    51a0:	68 e1       	ldi	r22, 0x18	; 24
    51a2:	41 e3       	ldi	r20, 0x31	; 49
    51a4:	51 e2       	ldi	r21, 0x21	; 33
    51a6:	9e c1       	rjmp	.+828    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x43:  i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	68 e1       	ldi	r22, 0x18	; 24
    51ac:	49 e4       	ldi	r20, 0x49	; 73
    51ae:	51 e2       	ldi	r21, 0x21	; 33
    51b0:	99 c1       	rjmp	.+818    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x44:  i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    51b2:	80 e0       	ldi	r24, 0x00	; 0
    51b4:	68 e1       	ldi	r22, 0x18	; 24
    51b6:	41 e6       	ldi	r20, 0x61	; 97
    51b8:	51 e2       	ldi	r21, 0x21	; 33
    51ba:	94 c1       	rjmp	.+808    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x45:  i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    51bc:	80 e0       	ldi	r24, 0x00	; 0
    51be:	68 e1       	ldi	r22, 0x18	; 24
    51c0:	49 e7       	ldi	r20, 0x79	; 121
    51c2:	51 e2       	ldi	r21, 0x21	; 33
    51c4:	8f c1       	rjmp	.+798    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x46:  i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    51c6:	80 e0       	ldi	r24, 0x00	; 0
    51c8:	68 e1       	ldi	r22, 0x18	; 24
    51ca:	41 e9       	ldi	r20, 0x91	; 145
    51cc:	51 e2       	ldi	r21, 0x21	; 33
    51ce:	8a c1       	rjmp	.+788    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x47:  i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    51d0:	80 e0       	ldi	r24, 0x00	; 0
    51d2:	68 e1       	ldi	r22, 0x18	; 24
    51d4:	49 ea       	ldi	r20, 0xA9	; 169
    51d6:	51 e2       	ldi	r21, 0x21	; 33
    51d8:	85 c1       	rjmp	.+778    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0xFF:  i2cMasterSend(0x00, 8, ALL_ON); break;
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	68 e0       	ldi	r22, 0x08	; 8
    51de:	41 ec       	ldi	r20, 0xC1	; 193
    51e0:	51 e2       	ldi	r21, 0x21	; 33
    51e2:	80 c1       	rjmp	.+768    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x50:  ledBlink(); break;
    51e4:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <ledBlink>
    51e8:	7f c1       	rjmp	.+766    	; 0x54e8 <handle_message_length_1+0x7a2>
        case 0x60:  SystemReset();  break;
    51ea:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <SystemReset>
    51ee:	7c c1       	rjmp	.+760    	; 0x54e8 <handle_message_length_1+0x7a2>
        case 0x70:  benchmark_pattern(); break;
    51f0:	0e 94 53 24 	call	0x48a6	; 0x48a6 <benchmark_pattern>
    51f4:	79 c1       	rjmp	.+754    	; 0x54e8 <handle_message_length_1+0x7a2>
        case 0x90:  i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    51f6:	80 e0       	ldi	r24, 0x00	; 0
    51f8:	60 e2       	ldi	r22, 0x20	; 32
    51fa:	49 ec       	ldi	r20, 0xC9	; 201
    51fc:	51 e2       	ldi	r21, 0x21	; 33
    51fe:	72 c1       	rjmp	.+740    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x91:  i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	60 e2       	ldi	r22, 0x20	; 32
    5204:	49 ee       	ldi	r20, 0xE9	; 233
    5206:	51 e2       	ldi	r21, 0x21	; 33
    5208:	6d c1       	rjmp	.+730    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x92:  i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    520a:	80 e0       	ldi	r24, 0x00	; 0
    520c:	60 e2       	ldi	r22, 0x20	; 32
    520e:	49 e0       	ldi	r20, 0x09	; 9
    5210:	52 e2       	ldi	r21, 0x22	; 34
    5212:	68 c1       	rjmp	.+720    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x93:  i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	60 e2       	ldi	r22, 0x20	; 32
    5218:	49 e2       	ldi	r20, 0x29	; 41
    521a:	52 e2       	ldi	r21, 0x22	; 34
    521c:	63 c1       	rjmp	.+710    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x94:  i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	60 e2       	ldi	r22, 0x20	; 32
    5222:	49 e4       	ldi	r20, 0x49	; 73
    5224:	52 e2       	ldi	r21, 0x22	; 34
    5226:	5e c1       	rjmp	.+700    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x95:  i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    5228:	80 e0       	ldi	r24, 0x00	; 0
    522a:	60 e2       	ldi	r22, 0x20	; 32
    522c:	49 e6       	ldi	r20, 0x69	; 105
    522e:	52 e2       	ldi	r21, 0x22	; 34
    5230:	59 c1       	rjmp	.+690    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x96:  i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    5232:	80 e0       	ldi	r24, 0x00	; 0
    5234:	60 e2       	ldi	r22, 0x20	; 32
    5236:	49 e8       	ldi	r20, 0x89	; 137
    5238:	52 e2       	ldi	r21, 0x22	; 34
    523a:	54 c1       	rjmp	.+680    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x97:  i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    523c:	80 e0       	ldi	r24, 0x00	; 0
    523e:	60 e2       	ldi	r22, 0x20	; 32
    5240:	49 ea       	ldi	r20, 0xA9	; 169
    5242:	52 e2       	ldi	r21, 0x22	; 34
    5244:	4f c1       	rjmp	.+670    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x98:  i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    5246:	80 e0       	ldi	r24, 0x00	; 0
    5248:	60 e2       	ldi	r22, 0x20	; 32
    524a:	49 ec       	ldi	r20, 0xC9	; 201
    524c:	52 e2       	ldi	r21, 0x22	; 34
    524e:	4a c1       	rjmp	.+660    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x99:  i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    5250:	80 e0       	ldi	r24, 0x00	; 0
    5252:	60 e2       	ldi	r22, 0x20	; 32
    5254:	49 ee       	ldi	r20, 0xE9	; 233
    5256:	52 e2       	ldi	r21, 0x22	; 34
    5258:	45 c1       	rjmp	.+650    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x9A:  i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	60 e2       	ldi	r22, 0x20	; 32
    525e:	49 e0       	ldi	r20, 0x09	; 9
    5260:	53 e2       	ldi	r21, 0x23	; 35
    5262:	40 c1       	rjmp	.+640    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x9B:  i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	60 e2       	ldi	r22, 0x20	; 32
    5268:	49 e2       	ldi	r20, 0x29	; 41
    526a:	53 e2       	ldi	r21, 0x23	; 35
    526c:	3b c1       	rjmp	.+630    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x9C:  i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    526e:	80 e0       	ldi	r24, 0x00	; 0
    5270:	60 e2       	ldi	r22, 0x20	; 32
    5272:	49 e4       	ldi	r20, 0x49	; 73
    5274:	53 e2       	ldi	r21, 0x23	; 35
    5276:	36 c1       	rjmp	.+620    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x9D:  i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	60 e2       	ldi	r22, 0x20	; 32
    527c:	49 e6       	ldi	r20, 0x69	; 105
    527e:	53 e2       	ldi	r21, 0x23	; 35
    5280:	31 c1       	rjmp	.+610    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x9E:  i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	60 e2       	ldi	r22, 0x20	; 32
    5286:	49 e8       	ldi	r20, 0x89	; 137
    5288:	53 e2       	ldi	r21, 0x23	; 35
    528a:	2c c1       	rjmp	.+600    	; 0x54e4 <handle_message_length_1+0x79e>
        case 0x9F:  i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	60 e2       	ldi	r22, 0x20	; 32
    5290:	49 ea       	ldi	r20, 0xA9	; 169
    5292:	53 e2       	ldi	r21, 0x23	; 35
    5294:	27 c1       	rjmp	.+590    	; 0x54e4 <handle_message_length_1+0x79e>
        
        case 0x10:  // turn laser on
            Laser_active = 1;
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	80 93 fc 23 	sts	0x23FC, r24
    529c:	25 c1       	rjmp	.+586    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
            
        case 0x11:  // turn laser off
            Laser_active = 0;
    529e:	10 92 fc 23 	sts	0x23FC, r1
            // turn off the lines that may be connected
            digitalWrite(0, LOW);
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	60 e0       	ldi	r22, 0x00	; 0
    52a6:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <digitalWrite>
    52aa:	1e c1       	rjmp	.+572    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
            
        case 0x12:  // turn on compression for identical elements
            ident_compress = 1;
    52ac:	81 e0       	ldi	r24, 0x01	; 1
    52ae:	80 93 9c 28 	sts	0x289C, r24
    52b2:	1a c1       	rjmp	.+564    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
            
        case 0x13:  // turn off compression for identical elements
            ident_compress = 0;
    52b4:	10 92 9c 28 	sts	0x289C, r1
    52b8:	17 c1       	rjmp	.+558    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
            
        case 0x14:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    52ba:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <dump_mat>
    52be:	14 c1       	rjmp	.+552    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
            
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    52c0:	00 d0       	rcall	.+0      	; 0x52c2 <handle_message_length_1+0x57c>
    52c2:	0f 92       	push	r0
    52c4:	86 eb       	ldi	r24, 0xB6	; 182
    52c6:	9f e0       	ldi	r25, 0x0F	; 15
    52c8:	ad b7       	in	r26, 0x3d	; 61
    52ca:	be b7       	in	r27, 0x3e	; 62
    52cc:	11 96       	adiw	r26, 0x01	; 1
    52ce:	8d 93       	st	X+, r24
    52d0:	9c 93       	st	X, r25
    52d2:	12 97       	sbiw	r26, 0x02	; 2
    52d4:	89 ec       	ldi	r24, 0xC9	; 201
    52d6:	93 e2       	ldi	r25, 0x23	; 35
    52d8:	13 96       	adiw	r26, 0x03	; 3
    52da:	8d 93       	st	X+, r24
    52dc:	9c 93       	st	X, r25
    52de:	14 97       	sbiw	r26, 0x04	; 4
    52e0:	f6 c0       	rjmp	.+492    	; 0x54ce <handle_message_length_1+0x788>
            break;
    52e2:	1b e4       	ldi	r17, 0x4B	; 75
    52e4:	e1 2e       	mov	r14, r17
    52e6:	16 e2       	ldi	r17, 0x26	; 38
    52e8:	f1 2e       	mov	r15, r17
    52ea:	11 e0       	ldi	r17, 0x01	; 1
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    52ec:	0e ef       	ldi	r16, 0xFE	; 254
                i2cMasterSend(i, 2, CMD);
    52ee:	6e 01       	movw	r12, r28
    52f0:	08 94       	sec
    52f2:	c1 1c       	adc	r12, r1
    52f4:	d1 1c       	adc	r13, r1
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
                CMD[0] = 0xFE; CMD[1] = chMap[i];
    52f6:	09 83       	std	Y+1, r16	; 0x01
    52f8:	f7 01       	movw	r30, r14
    52fa:	81 91       	ld	r24, Z+
    52fc:	7f 01       	movw	r14, r30
    52fe:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    5300:	81 2f       	mov	r24, r17
    5302:	62 e0       	ldi	r22, 0x02	; 2
    5304:	a6 01       	movw	r20, r12
    5306:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
        case 0x15:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case 0x16:   //show the bus number
            for (i = 1; i <= 128; i++) {
    530a:	1f 5f       	subi	r17, 0xFF	; 255
    530c:	11 38       	cpi	r17, 0x81	; 129
    530e:	99 f7       	brne	.-26     	; 0x52f6 <handle_message_length_1+0x5b0>
    5310:	eb c0       	rjmp	.+470    	; 0x54e8 <handle_message_length_1+0x7a2>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case 0x17:  // turn on quiet_mode, no message sent out
            quiet_mode_on = 1;
    5312:	81 e0       	ldi	r24, 0x01	; 1
    5314:	80 93 0b 24 	sts	0x240B, r24
    5318:	e7 c0       	rjmp	.+462    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
            
        case 0x18:  // turn off quiet_mode, essage sent out
            quiet_mode_on = 0;
    531a:	10 92 0b 24 	sts	0x240B, r1
    531e:	e4 c0       	rjmp	.+456    	; 0x54e8 <handle_message_length_1+0x7a2>
            break;
			  
        case 0x19:  // update GUI information
            xprintf(PSTR("update: %d %d %d %d %d %d %d %d:\n"), gain_x, bias_x, X_pos_index, x_mode, gain_y, bias_y, Y_pos_index, y_mode);
    5320:	8d b7       	in	r24, 0x3d	; 61
    5322:	9e b7       	in	r25, 0x3e	; 62
    5324:	42 97       	sbiw	r24, 0x12	; 18
    5326:	8d bf       	out	0x3d, r24	; 61
    5328:	9e bf       	out	0x3e, r25	; 62
    532a:	ed b7       	in	r30, 0x3d	; 61
    532c:	fe b7       	in	r31, 0x3e	; 62
    532e:	31 96       	adiw	r30, 0x01	; 1
    5330:	84 e9       	ldi	r24, 0x94	; 148
    5332:	9f e0       	ldi	r25, 0x0F	; 15
    5334:	ad b7       	in	r26, 0x3d	; 61
    5336:	be b7       	in	r27, 0x3e	; 62
    5338:	11 96       	adiw	r26, 0x01	; 1
    533a:	8d 93       	st	X+, r24
    533c:	9c 93       	st	X, r25
    533e:	12 97       	sbiw	r26, 0x02	; 2
    5340:	80 91 0a 27 	lds	r24, 0x270A
    5344:	90 91 0b 27 	lds	r25, 0x270B
    5348:	82 83       	std	Z+2, r24	; 0x02
    534a:	93 83       	std	Z+3, r25	; 0x03
    534c:	80 91 b4 24 	lds	r24, 0x24B4
    5350:	90 91 b5 24 	lds	r25, 0x24B5
    5354:	84 83       	std	Z+4, r24	; 0x04
    5356:	95 83       	std	Z+5, r25	; 0x05
    5358:	80 91 1e 26 	lds	r24, 0x261E
    535c:	90 91 1f 26 	lds	r25, 0x261F
    5360:	86 83       	std	Z+6, r24	; 0x06
    5362:	97 83       	std	Z+7, r25	; 0x07
    5364:	80 91 cb 26 	lds	r24, 0x26CB
    5368:	80 87       	std	Z+8, r24	; 0x08
    536a:	11 86       	std	Z+9, r1	; 0x09
    536c:	80 91 cf 26 	lds	r24, 0x26CF
    5370:	90 91 d0 26 	lds	r25, 0x26D0
    5374:	82 87       	std	Z+10, r24	; 0x0a
    5376:	93 87       	std	Z+11, r25	; 0x0b
    5378:	80 91 bf 2a 	lds	r24, 0x2ABF
    537c:	90 91 c0 2a 	lds	r25, 0x2AC0
    5380:	84 87       	std	Z+12, r24	; 0x0c
    5382:	95 87       	std	Z+13, r25	; 0x0d
    5384:	80 91 90 25 	lds	r24, 0x2590
    5388:	90 91 91 25 	lds	r25, 0x2591
    538c:	86 87       	std	Z+14, r24	; 0x0e
    538e:	97 87       	std	Z+15, r25	; 0x0f
    5390:	80 91 09 27 	lds	r24, 0x2709
    5394:	80 8b       	std	Z+16, r24	; 0x10
    5396:	11 8a       	std	Z+17, r1	; 0x11
    5398:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    539c:	ed b7       	in	r30, 0x3d	; 61
    539e:	fe b7       	in	r31, 0x3e	; 62
    53a0:	72 96       	adiw	r30, 0x12	; 18
    53a2:	ed bf       	out	0x3d, r30	; 61
    53a4:	fe bf       	out	0x3e, r31	; 62
    53a6:	a0 c0       	rjmp	.+320    	; 0x54e8 <handle_message_length_1+0x7a2>
          break;
			
		case 0x21:	// working mode 1 = default mode = controller mode
			eeprom_write_byte(work_mode,0xff);
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	6f ef       	ldi	r22, 0xFF	; 255
    53ae:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    53b2:	0f 92       	push	r0
    53b4:	0f 92       	push	r0
    53b6:	82 e6       	ldi	r24, 0x62	; 98
    53b8:	9f e0       	ldi	r25, 0x0F	; 15
    53ba:	12 c0       	rjmp	.+36     	; 0x53e0 <handle_message_length_1+0x69a>
			break;

		case 0x22:
		    eeprom_write_byte(work_mode,0x00);
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	60 e0       	ldi	r22, 0x00	; 0
    53c2:	0e 94 29 56 	call	0xac52	; 0xac52 <__eewr_byte_x128a1>
			xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    53c6:	0f 92       	push	r0
    53c8:	0f 92       	push	r0
    53ca:	80 e3       	ldi	r24, 0x30	; 48
    53cc:	9f e0       	ldi	r25, 0x0F	; 15
    53ce:	16 c0       	rjmp	.+44     	; 0x53fc <handle_message_length_1+0x6b6>
			break;
            
			
		case 0x23: //using Int3 external trigger mode
			PORTK.INT0MASK = 0x08;      //Int3 is used as source for port interrupt 0
    53d0:	88 e0       	ldi	r24, 0x08	; 8
    53d2:	e0 e2       	ldi	r30, 0x20	; 32
    53d4:	f7 e0       	ldi	r31, 0x07	; 7
    53d6:	82 87       	std	Z+10, r24	; 0x0a
			xprintf(PSTR("Enabled Int3 external trigger mode is on!\n"));
    53d8:	0f 92       	push	r0
    53da:	0f 92       	push	r0
    53dc:	85 e0       	ldi	r24, 0x05	; 5
    53de:	9f e0       	ldi	r25, 0x0F	; 15
    53e0:	ad b7       	in	r26, 0x3d	; 61
    53e2:	be b7       	in	r27, 0x3e	; 62
    53e4:	11 96       	adiw	r26, 0x01	; 1
    53e6:	8d 93       	st	X+, r24
    53e8:	9c 93       	st	X, r25
    53ea:	12 97       	sbiw	r26, 0x02	; 2
    53ec:	0b c0       	rjmp	.+22     	; 0x5404 <handle_message_length_1+0x6be>
			break;
			
		case 0x24: //disable int3 external trigger mode
			PORTK.INT0MASK = 0x00;      //Int3 is used as source for port interrupt 0
    53ee:	e0 e2       	ldi	r30, 0x20	; 32
    53f0:	f7 e0       	ldi	r31, 0x07	; 7
    53f2:	12 86       	std	Z+10, r1	; 0x0a
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
    53f4:	0f 92       	push	r0
    53f6:	0f 92       	push	r0
    53f8:	8f ed       	ldi	r24, 0xDF	; 223
    53fa:	9e e0       	ldi	r25, 0x0E	; 14
    53fc:	ed b7       	in	r30, 0x3d	; 61
    53fe:	fe b7       	in	r31, 0x3e	; 62
    5400:	81 83       	std	Z+1, r24	; 0x01
    5402:	92 83       	std	Z+2, r25	; 0x02
    5404:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    5408:	0f 90       	pop	r0
    540a:	0f 90       	pop	r0
    540c:	6d c0       	rjmp	.+218    	; 0x54e8 <handle_message_length_1+0x7a2>
			break;		
    540e:	ee 24       	eor	r14, r14
    5410:	ff 24       	eor	r15, r15
    5412:	87 01       	movw	r16, r14
    5414:	aa 24       	eor	r10, r10
    5416:	bb 24       	eor	r11, r11
    5418:	65 01       	movw	r12, r10
    541a:	99 24       	eor	r9, r9
    541c:	b0 e4       	ldi	r27, 0x40	; 64
    541e:	6b 2e       	mov	r6, r27
    5420:	bc e9       	ldi	r27, 0x9C	; 156
    5422:	7b 2e       	mov	r7, r27

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
			   tmp_x += analogRead(2);
    5424:	82 e0       	ldi	r24, 0x02	; 2
    5426:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
    542a:	aa 27       	eor	r26, r26
    542c:	97 fd       	sbrc	r25, 7
    542e:	a0 95       	com	r26
    5430:	ba 2f       	mov	r27, r26
    5432:	e8 0e       	add	r14, r24
    5434:	f9 1e       	adc	r15, r25
    5436:	0a 1f       	adc	r16, r26
    5438:	1b 1f       	adc	r17, r27
			   tmp_y += analogRead(3);
    543a:	83 e0       	ldi	r24, 0x03	; 3
    543c:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
    5440:	aa 27       	eor	r26, r26
    5442:	97 fd       	sbrc	r25, 7
    5444:	a0 95       	com	r26
    5446:	ba 2f       	mov	r27, r26
    5448:	a8 0e       	add	r10, r24
    544a:	b9 1e       	adc	r11, r25
    544c:	ca 1e       	adc	r12, r26
    544e:	db 1e       	adc	r13, r27
    5450:	c3 01       	movw	r24, r6
    5452:	01 97       	sbiw	r24, 0x01	; 1
    5454:	f1 f7       	brne	.-4      	; 0x5452 <handle_message_length_1+0x70c>
			xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
			break;		

		case 0x26: //read and set resolution for x and y

			for (i=0; i<n_sample; i++){
    5456:	93 94       	inc	r9
    5458:	f4 e6       	ldi	r31, 0x64	; 100
    545a:	9f 16       	cp	r9, r31
    545c:	19 f7       	brne	.-58     	; 0x5424 <handle_message_length_1+0x6de>
			   tmp_x += analogRead(2);
			   tmp_y += analogRead(3);
			   _delay_ms(5);
			};
			resolution_x  =  tmp_x / n_sample;
    545e:	c8 01       	movw	r24, r16
    5460:	b7 01       	movw	r22, r14
    5462:	24 e6       	ldi	r18, 0x64	; 100
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	40 e0       	ldi	r20, 0x00	; 0
    5468:	50 e0       	ldi	r21, 0x00	; 0
    546a:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    546e:	20 93 9d 20 	sts	0x209D, r18
    5472:	30 93 9e 20 	sts	0x209E, r19
			resolution_y  =  tmp_y / n_sample;
    5476:	c6 01       	movw	r24, r12
    5478:	b5 01       	movw	r22, r10
    547a:	24 e6       	ldi	r18, 0x64	; 100
    547c:	30 e0       	ldi	r19, 0x00	; 0
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    5486:	20 93 9f 20 	sts	0x209F, r18
    548a:	30 93 a0 20 	sts	0x20A0, r19
			xprintf(PSTR("resolution_x =  %d:\n"), resolution_x);
    548e:	00 d0       	rcall	.+0      	; 0x5490 <handle_message_length_1+0x74a>
    5490:	0f 92       	push	r0
    5492:	8a ec       	ldi	r24, 0xCA	; 202
    5494:	9e e0       	ldi	r25, 0x0E	; 14
    5496:	ad b7       	in	r26, 0x3d	; 61
    5498:	be b7       	in	r27, 0x3e	; 62
    549a:	11 96       	adiw	r26, 0x01	; 1
    549c:	8d 93       	st	X+, r24
    549e:	9c 93       	st	X, r25
    54a0:	12 97       	sbiw	r26, 0x02	; 2
    54a2:	80 91 9d 20 	lds	r24, 0x209D
    54a6:	90 91 9e 20 	lds	r25, 0x209E
    54aa:	13 96       	adiw	r26, 0x03	; 3
    54ac:	8d 93       	st	X+, r24
    54ae:	9c 93       	st	X, r25
    54b0:	14 97       	sbiw	r26, 0x04	; 4
    54b2:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
			xprintf(PSTR("resolution_y =  %d:\n"), resolution_y);
    54b6:	85 eb       	ldi	r24, 0xB5	; 181
    54b8:	9e e0       	ldi	r25, 0x0E	; 14
    54ba:	ed b7       	in	r30, 0x3d	; 61
    54bc:	fe b7       	in	r31, 0x3e	; 62
    54be:	81 83       	std	Z+1, r24	; 0x01
    54c0:	92 83       	std	Z+2, r25	; 0x02
    54c2:	80 91 9f 20 	lds	r24, 0x209F
    54c6:	90 91 a0 20 	lds	r25, 0x20A0
    54ca:	83 83       	std	Z+3, r24	; 0x03
    54cc:	94 83       	std	Z+4, r25	; 0x04
    54ce:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    54d2:	0f 90       	pop	r0
    54d4:	0f 90       	pop	r0
    54d6:	0f 90       	pop	r0
    54d8:	0f 90       	pop	r0
    54da:	06 c0       	rjmp	.+12     	; 0x54e8 <handle_message_length_1+0x7a2>
			break;
	
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    54dc:	80 e0       	ldi	r24, 0x00	; 0
    54de:	68 e0       	ldi	r22, 0x08	; 8
    54e0:	45 ec       	ldi	r20, 0xC5	; 197
    54e2:	50 e2       	ldi	r21, 0x20	; 32
    54e4:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    }
}
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	cf 91       	pop	r28
    54ee:	df 91       	pop	r29
    54f0:	1f 91       	pop	r17
    54f2:	0f 91       	pop	r16
    54f4:	ff 90       	pop	r15
    54f6:	ef 90       	pop	r14
    54f8:	df 90       	pop	r13
    54fa:	cf 90       	pop	r12
    54fc:	bf 90       	pop	r11
    54fe:	af 90       	pop	r10
    5500:	9f 90       	pop	r9
    5502:	7f 90       	pop	r7
    5504:	6f 90       	pop	r6
    5506:	08 95       	ret

00005508 <main>:
}




int main(void) {
    5508:	a0 e5       	ldi	r26, 0x50	; 80
    550a:	b6 e0       	ldi	r27, 0x06	; 6
    550c:	ea e8       	ldi	r30, 0x8A	; 138
    550e:	fa e2       	ldi	r31, 0x2A	; 42
    5510:	0c 94 94 51 	jmp	0xa328	; 0xa328 <__prologue_saves__+0xc>
	uint8_t rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t frame_num_old = 999;  //just chosen at random
	uint8_t func_idx_x_old = 199;
	uint8_t func_idx_y_old = 199;
	
	workingModes = eeprom_read_byte(work_mode);
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	0e 94 19 56 	call	0xac32	; 0xac32 <__eerd_byte_x128a1>
    551c:	e8 2e       	mov	r14, r24
	
    TWI_MasterCreateBuff(&twi1,workingModes);
    551e:	82 e9       	ldi	r24, 0x92	; 146
    5520:	95 e2       	ldi	r25, 0x25	; 37
    5522:	6e 2d       	mov	r22, r14
    5524:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi2,workingModes);
    5528:	8d e8       	ldi	r24, 0x8D	; 141
    552a:	98 e2       	ldi	r25, 0x28	; 40
    552c:	6e 2d       	mov	r22, r14
    552e:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi3,workingModes);
    5532:	8a e3       	ldi	r24, 0x3A	; 58
    5534:	96 e2       	ldi	r25, 0x26	; 38
    5536:	6e 2d       	mov	r22, r14
    5538:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <TWI_MasterCreateBuff>
	TWI_MasterCreateBuff(&twi4,workingModes);
    553c:	86 eb       	ldi	r24, 0xB6	; 182
    553e:	94 e2       	ldi	r25, 0x24	; 36
    5540:	6e 2d       	mov	r22, r14
    5542:	0e 94 4e 3e 	call	0x7c9c	; 0x7c9c <TWI_MasterCreateBuff>
    
// Initialize TWI master #1
    TWI_MasterInit(&twi1,
    5546:	82 e9       	ldi	r24, 0x92	; 146
    5548:	95 e2       	ldi	r25, 0x25	; 37
    554a:	60 e8       	ldi	r22, 0x80	; 128
    554c:	74 e0       	ldi	r23, 0x04	; 4
    554e:	40 e4       	ldi	r20, 0x40	; 64
    5550:	50 e0       	ldi	r21, 0x00	; 0
    5552:	23 e2       	ldi	r18, 0x23	; 35
    5554:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #2
    TWI_MasterInit(&twi2,
    5558:	8d e8       	ldi	r24, 0x8D	; 141
    555a:	98 e2       	ldi	r25, 0x28	; 40
    555c:	60 e9       	ldi	r22, 0x90	; 144
    555e:	74 e0       	ldi	r23, 0x04	; 4
    5560:	40 e4       	ldi	r20, 0x40	; 64
    5562:	50 e0       	ldi	r21, 0x00	; 0
    5564:	23 e2       	ldi	r18, 0x23	; 35
    5566:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #3
    TWI_MasterInit(&twi3,
    556a:	8a e3       	ldi	r24, 0x3A	; 58
    556c:	96 e2       	ldi	r25, 0x26	; 38
    556e:	60 ea       	ldi	r22, 0xA0	; 160
    5570:	74 e0       	ldi	r23, 0x04	; 4
    5572:	40 e4       	ldi	r20, 0x40	; 64
    5574:	50 e0       	ldi	r21, 0x00	; 0
    5576:	23 e2       	ldi	r18, 0x23	; 35
    5578:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize TWI master #4
    TWI_MasterInit(&twi4,
    557c:	86 eb       	ldi	r24, 0xB6	; 182
    557e:	94 e2       	ldi	r25, 0x24	; 36
    5580:	60 eb       	ldi	r22, 0xB0	; 176
    5582:	74 e0       	ldi	r23, 0x04	; 4
    5584:	40 e4       	ldi	r20, 0x40	; 64
    5586:	50 e0       	ldi	r21, 0x00	; 0
    5588:	23 e2       	ldi	r18, 0x23	; 35
    558a:	0e 94 ff 3c 	call	0x79fe	; 0x79fe <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
// Initialize the rest of the system
	createRxBuff(workingModes);
    558e:	8e 2d       	mov	r24, r14
    5590:	0e 94 f6 3b 	call	0x77ec	; 0x77ec <createRxBuff>
    init_all();
    5594:	0e 94 4c 39 	call	0x7298	; 0x7298 <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    5598:	8f eb       	ldi	r24, 0xBF	; 191
    559a:	9a e3       	ldi	r25, 0x3A	; 58
    559c:	80 93 98 24 	sts	0x2498, r24
    55a0:	90 93 99 24 	sts	0x2499, r25
    55a4:	80 e0       	ldi	r24, 0x00	; 0
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
    55a8:	2a e0       	ldi	r18, 0x0A	; 10
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	fc 01       	movw	r30, r24
    55ae:	e8 53       	subi	r30, 0x38	; 56
    55b0:	fb 4d       	sbci	r31, 0xDB	; 219
    55b2:	20 83       	st	Z, r18
    55b4:	31 83       	std	Z+1, r19	; 0x01
    55b6:	fc 01       	movw	r30, r24
    55b8:	e8 5d       	subi	r30, 0xD8	; 216
    55ba:	f8 4d       	sbci	r31, 0xD8	; 216
    55bc:	20 83       	st	Z, r18
    55be:	31 83       	std	Z+1, r19	; 0x01
    55c0:	02 96       	adiw	r24, 0x02	; 2

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    55c2:	88 3c       	cpi	r24, 0xC8	; 200
    55c4:	91 05       	cpc	r25, r1
    55c6:	91 f7       	brne	.-28     	; 0x55ac <main+0xa4>
    55c8:	e1 ea       	ldi	r30, 0xA1	; 161
    55ca:	f5 e2       	ldi	r31, 0x25	; 37
    55cc:	20 e0       	ldi	r18, 0x00	; 0
    55ce:	30 e0       	ldi	r19, 0x00	; 0
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
	        laserPattern[lcv] = 255;
    55d0:	4f ef       	ldi	r20, 0xFF	; 255
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
	{ 
		if (((lcv >=0) && (lcv <= 2)) || ((lcv >= 6)&&(lcv <= 8)))
    55d2:	23 30       	cpi	r18, 0x03	; 3
    55d4:	31 05       	cpc	r19, r1
    55d6:	20 f0       	brcs	.+8      	; 0x55e0 <main+0xd8>
    55d8:	c9 01       	movw	r24, r18
    55da:	06 97       	sbiw	r24, 0x06	; 6
    55dc:	03 97       	sbiw	r24, 0x03	; 3
    55de:	10 f4       	brcc	.+4      	; 0x55e4 <main+0xdc>
	        laserPattern[lcv] = 255;
    55e0:	40 83       	st	Z, r20
    55e2:	01 c0       	rjmp	.+2      	; 0x55e6 <main+0xde>
		else
			laserPattern[lcv] = 0;
    55e4:	10 82       	st	Z, r1
    for (lcv = 0; lcv < FUNCTION_LENGTH; lcv++)
    { function_X[lcv] = function_Y[lcv] = 10;  }// here we use 10 as the equivalent for 1 V.
	
	
	//initialize laser pattern
	for (lcv = 0; lcv < 125; lcv++)
    55e6:	2f 5f       	subi	r18, 0xFF	; 255
    55e8:	3f 4f       	sbci	r19, 0xFF	; 255
    55ea:	31 96       	adiw	r30, 0x01	; 1
    55ec:	2d 37       	cpi	r18, 0x7D	; 125
    55ee:	31 05       	cpc	r19, r1
    55f0:	81 f7       	brne	.-32     	; 0x55d2 <main+0xca>
			laserPattern[lcv] = 0;
	}
	
    
    //initilializations
    X_pos_index = Y_pos_index = index_x = index_y = 0;
    55f2:	10 92 71 28 	sts	0x2871, r1
    55f6:	10 92 72 28 	sts	0x2872, r1
    55fa:	80 91 71 28 	lds	r24, 0x2871
    55fe:	90 91 72 28 	lds	r25, 0x2872
    5602:	80 93 cd 26 	sts	0x26CD, r24
    5606:	90 93 ce 26 	sts	0x26CE, r25
    560a:	80 91 cd 26 	lds	r24, 0x26CD
    560e:	90 91 ce 26 	lds	r25, 0x26CE
    5612:	80 93 90 25 	sts	0x2590, r24
    5616:	90 93 91 25 	sts	0x2591, r25
    561a:	80 93 1e 26 	sts	0x261E, r24
    561e:	90 93 1f 26 	sts	0x261F, r25
    bias_x = bias_y = 0;
    5622:	10 92 bf 2a 	sts	0x2ABF, r1
    5626:	10 92 c0 2a 	sts	0x2AC0, r1
    562a:	10 92 b4 24 	sts	0x24B4, r1
    562e:	10 92 b5 24 	sts	0x24B5, r1
    gain_x = gain_y = 0;
    5632:	10 92 cf 26 	sts	0x26CF, r1
    5636:	10 92 d0 26 	sts	0x26D0, r1
    563a:	10 92 0a 27 	sts	0x270A, r1
    563e:	10 92 0b 27 	sts	0x270B, r1
    x_mode = y_mode = 0;
    5642:	10 92 09 27 	sts	0x2709, r1
    5646:	10 92 cb 26 	sts	0x26CB, r1
    gs_value = 1;
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	80 93 49 26 	sts	0x2649, r24
    row_compress = 0;
    5650:	10 92 c7 24 	sts	0x24C7, r1
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    5654:	10 92 9c 28 	sts	0x289C, r1
    
    temp = eeprom_read_byte(arena_config);
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	0e 94 19 56 	call	0xac32	; 0xac32 <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    5660:	8f 3f       	cpi	r24, 0xFF	; 255
    5662:	d9 f4       	brne	.+54     	; 0x569a <main+0x192>
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    5664:	19 82       	std	Y+1, r1	; 0x01
			chMap[b1] = b1 % 4;
			if (b1 && (chMap[b1] == 0))
				chMap[b1] = 4;
    5666:	24 e0       	ldi	r18, 0x04	; 4
    5668:	14 c0       	rjmp	.+40     	; 0x5692 <main+0x18a>
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
			chMap[b1] = b1 % 4;
    566a:	e8 2f       	mov	r30, r24
    566c:	f0 e0       	ldi	r31, 0x00	; 0
    566e:	e6 5b       	subi	r30, 0xB6	; 182
    5670:	f9 4d       	sbci	r31, 0xD9	; 217
    5672:	98 2f       	mov	r25, r24
    5674:	93 70       	andi	r25, 0x03	; 3
    5676:	90 83       	st	Z, r25
			if (b1 && (chMap[b1] == 0))
    5678:	88 23       	and	r24, r24
    567a:	19 f0       	breq	.+6      	; 0x5682 <main+0x17a>
    567c:	99 23       	and	r25, r25
    567e:	09 f4       	brne	.+2      	; 0x5682 <main+0x17a>
				chMap[b1] = 4;
    5680:	20 83       	st	Z, r18
			adrMap[b1] = b1; // panel address identity mapping
    5682:	89 81       	ldd	r24, Y+1	; 0x01
    5684:	e8 2f       	mov	r30, r24
    5686:	f0 e0       	ldi	r31, 0x00	; 0
    5688:	e0 51       	subi	r30, 0x10	; 16
    568a:	f8 4d       	sbci	r31, 0xD8	; 216
    568c:	80 83       	st	Z, r24
    ident_compress = 0; // enable this to substitute simpler panael pattern for uniform pattern patches
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
	{// create default panel mapping
		for (b1 = 0; b1 <= 128; b1++) {
    568e:	8f 5f       	subi	r24, 0xFF	; 255
    5690:	89 83       	std	Y+1, r24	; 0x01
    5692:	89 81       	ldd	r24, Y+1	; 0x01
    5694:	81 38       	cpi	r24, 0x81	; 129
    5696:	48 f3       	brcs	.-46     	; 0x566a <main+0x162>
    5698:	17 c0       	rjmp	.+46     	; 0x56c8 <main+0x1c0>
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    569a:	19 82       	std	Y+1, r1	; 0x01
    569c:	11 c0       	rjmp	.+34     	; 0x56c0 <main+0x1b8>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
    569e:	0f 2d       	mov	r16, r15
    56a0:	10 e0       	ldi	r17, 0x00	; 0
    56a2:	c8 01       	movw	r24, r16
    56a4:	8f 5f       	subi	r24, 0xFF	; 255
    56a6:	9f 4f       	sbci	r25, 0xFF	; 255
    56a8:	0e 94 19 56 	call	0xac32	; 0xac32 <__eerd_byte_x128a1>
    56ac:	f8 01       	movw	r30, r16
    56ae:	e6 5b       	subi	r30, 0xB6	; 182
    56b0:	f9 4d       	sbci	r31, 0xD9	; 217
    56b2:	80 83       	st	Z, r24
			adrMap[b1] = b1; // panel address identity mapping
    56b4:	00 51       	subi	r16, 0x10	; 16
    56b6:	18 4d       	sbci	r17, 0xD8	; 216
    56b8:	f8 01       	movw	r30, r16
    56ba:	f0 82       	st	Z, r15
				chMap[b1] = 4;
			adrMap[b1] = b1; // panel address identity mapping
		}
	} else
	{//load panel mapping from EEPROM	
		for (b1 = 0; b1 <= 128; b1++) {
    56bc:	f3 94       	inc	r15
    56be:	f9 82       	std	Y+1, r15	; 0x01
    56c0:	f9 80       	ldd	r15, Y+1	; 0x01
    56c2:	f0 e8       	ldi	r31, 0x80	; 128
    56c4:	ff 15       	cp	r31, r15
    56c6:	58 f7       	brcc	.-42     	; 0x569e <main+0x196>
			chMap[b1] = eeprom_read_byte(arena_config + b1);
			adrMap[b1] = b1; // panel address identity mapping
		}
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    56c8:	8f e0       	ldi	r24, 0x0F	; 15
    56ca:	91 e1       	ldi	r25, 0x11	; 17
    56cc:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    56d0:	81 e0       	ldi	r24, 0x01	; 1
    56d2:	61 e0       	ldi	r22, 0x01	; 1
    56d4:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <ledWrite>
    56d8:	01 e0       	ldi	r16, 0x01	; 1
    56da:	30 e2       	ldi	r19, 0x20	; 32
    56dc:	c3 2e       	mov	r12, r19
    56de:	33 e0       	ldi	r19, 0x03	; 3
    56e0:	d3 2e       	mov	r13, r19
    56e2:	3a c0       	rjmp	.+116    	; 0x5758 <main+0x250>
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
    56e4:	80 e0       	ldi	r24, 0x00	; 0
    56e6:	0e 94 cf 4b 	call	0x979e	; 0x979e <disk_status>
    56ea:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK) {
    56ec:	81 ff       	sbrs	r24, 1
    56ee:	0d c0       	rjmp	.+26     	; 0x570a <main+0x202>
            xputs(PSTR("Insert SD card"));
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	91 e1       	ldi	r25, 0x11	; 17
    56f4:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            uart_crlf();
    56f8:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <uart_crlf>
    56fc:	04 c0       	rjmp	.+8      	; 0x5706 <main+0x1fe>
            while (sta & STA_NODISK) {
                sta = disk_status(0);
    56fe:	80 e0       	ldi	r24, 0x00	; 0
    5700:	0e 94 cf 4b 	call	0x979e	; 0x979e <disk_status>
    5704:	08 2f       	mov	r16, r24
    while (sta & STA_NOINIT) {
        sta = disk_status(0);
        if(sta & STA_NODISK) {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK) {
    5706:	01 fd       	sbrc	r16, 1
    5708:	fa cf       	rjmp	.-12     	; 0x56fe <main+0x1f6>
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT) {
    570a:	02 ff       	sbrs	r16, 2
    570c:	04 c0       	rjmp	.+8      	; 0x5716 <main+0x20e>
            xputs(PSTR("SD card is Write Protected!\n"));
    570e:	83 ee       	ldi	r24, 0xE3	; 227
    5710:	90 e1       	ldi	r25, 0x10	; 16
    5712:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    5716:	19 82       	std	Y+1, r1	; 0x01
    5718:	10 c0       	rjmp	.+32     	; 0x573a <main+0x232>
            sta = disk_initialize(0);
    571a:	80 e0       	ldi	r24, 0x00	; 0
    571c:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <disk_initialize>
    5720:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) b1++;
    5722:	80 ff       	sbrs	r24, 0
    5724:	0d c0       	rjmp	.+26     	; 0x5740 <main+0x238>
    5726:	89 81       	ldd	r24, Y+1	; 0x01
    5728:	8f 5f       	subi	r24, 0xFF	; 255
    572a:	89 83       	std	Y+1, r24	; 0x01
    572c:	84 ef       	ldi	r24, 0xF4	; 244
    572e:	91 e0       	ldi	r25, 0x01	; 1
    5730:	f6 01       	movw	r30, r12
    5732:	31 97       	sbiw	r30, 0x01	; 1
    5734:	f1 f7       	brne	.-4      	; 0x5732 <main+0x22a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5736:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5738:	d9 f7       	brne	.-10     	; 0x5730 <main+0x228>
        }
        if(sta & STA_PROTECT) {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; ) {
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	84 30       	cpi	r24, 0x04	; 4
    573e:	68 f3       	brcs	.-38     	; 0x571a <main+0x212>
            sta = disk_initialize(0);
            if(sta & STA_NOINIT) b1++;
            else break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
    5740:	00 ff       	sbrs	r16, 0
    5742:	0a c0       	rjmp	.+20     	; 0x5758 <main+0x250>
            xputs(PSTR("Initialization failed!!!\n"));
    5744:	89 ec       	ldi	r24, 0xC9	; 201
    5746:	90 e1       	ldi	r25, 0x10	; 16
    5748:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
    574c:	80 e0       	ldi	r24, 0x00	; 0
    574e:	0e 94 cf 4b 	call	0x979e	; 0x979e <disk_status>
    5752:	08 2f       	mov	r16, r24
            _delay_ms(50);
        }
        if(sta & STA_NOINIT) {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK)) {
    5754:	81 ff       	sbrs	r24, 1
    5756:	fa cf       	rjmp	.-12     	; 0x574c <main+0x244>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT) {
    5758:	00 fd       	sbrc	r16, 0
    575a:	c4 cf       	rjmp	.-120    	; 0x56e4 <main+0x1dc>
            while (!(sta & STA_NODISK)) {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    575c:	81 eb       	ldi	r24, 0xB1	; 177
    575e:	90 e1       	ldi	r25, 0x10	; 16
    5760:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK) {
    5764:	80 e0       	ldi	r24, 0x00	; 0
    5766:	6a e0       	ldi	r22, 0x0A	; 10
    5768:	ae 01       	movw	r20, r28
    576a:	4f 5f       	subi	r20, 0xFF	; 255
    576c:	5f 4f       	sbci	r21, 0xFF	; 255
    576e:	0e 94 3b 4c 	call	0x9876	; 0x9876 <disk_ioctl>
    5772:	89 2b       	or	r24, r25
    5774:	59 f5       	brne	.+86     	; 0x57cc <main+0x2c4>
        xputs(PSTR("Card type: "));
    5776:	85 ea       	ldi	r24, 0xA5	; 165
    5778:	90 e1       	ldi	r25, 0x10	; 16
    577a:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
        switch(b1) {
    577e:	89 81       	ldd	r24, Y+1	; 0x01
    5780:	84 30       	cpi	r24, 0x04	; 4
    5782:	a1 f0       	breq	.+40     	; 0x57ac <main+0x2a4>
    5784:	85 30       	cpi	r24, 0x05	; 5
    5786:	28 f4       	brcc	.+10     	; 0x5792 <main+0x28a>
    5788:	81 30       	cpi	r24, 0x01	; 1
    578a:	51 f0       	breq	.+20     	; 0x57a0 <main+0x298>
    578c:	82 30       	cpi	r24, 0x02	; 2
    578e:	d1 f4       	brne	.+52     	; 0x57c4 <main+0x2bc>
    5790:	0a c0       	rjmp	.+20     	; 0x57a6 <main+0x29e>
    5792:	88 30       	cpi	r24, 0x08	; 8
    5794:	89 f0       	breq	.+34     	; 0x57b8 <main+0x2b0>
    5796:	8c 30       	cpi	r24, 0x0C	; 12
    5798:	91 f0       	breq	.+36     	; 0x57be <main+0x2b6>
    579a:	86 30       	cpi	r24, 0x06	; 6
    579c:	99 f4       	brne	.+38     	; 0x57c4 <main+0x2bc>
    579e:	09 c0       	rjmp	.+18     	; 0x57b2 <main+0x2aa>
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    57a0:	80 ea       	ldi	r24, 0xA0	; 160
    57a2:	90 e1       	ldi	r25, 0x10	; 16
    57a4:	11 c0       	rjmp	.+34     	; 0x57c8 <main+0x2c0>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    57a6:	8c e9       	ldi	r24, 0x9C	; 156
    57a8:	90 e1       	ldi	r25, 0x10	; 16
    57aa:	0e c0       	rjmp	.+28     	; 0x57c8 <main+0x2c0>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    57ac:	87 e9       	ldi	r24, 0x97	; 151
    57ae:	90 e1       	ldi	r25, 0x10	; 16
    57b0:	0b c0       	rjmp	.+22     	; 0x57c8 <main+0x2c0>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    57b2:	82 e9       	ldi	r24, 0x92	; 146
    57b4:	90 e1       	ldi	r25, 0x10	; 16
    57b6:	08 c0       	rjmp	.+16     	; 0x57c8 <main+0x2c0>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    57b8:	8d e8       	ldi	r24, 0x8D	; 141
    57ba:	90 e1       	ldi	r25, 0x10	; 16
    57bc:	05 c0       	rjmp	.+10     	; 0x57c8 <main+0x2c0>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    57be:	87 e8       	ldi	r24, 0x87	; 135
    57c0:	90 e1       	ldi	r25, 0x10	; 16
    57c2:	02 c0       	rjmp	.+4      	; 0x57c8 <main+0x2c0>
            default: xputs(PSTR("???\n"));
    57c4:	82 e8       	ldi	r24, 0x82	; 130
    57c6:	90 e1       	ldi	r25, 0x10	; 16
    57c8:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    57cc:	89 e6       	ldi	r24, 0x69	; 105
    57ce:	90 e1       	ldi	r25, 0x10	; 16
    57d0:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    res = f_mount(0, &fatfs);
    57d4:	80 e0       	ldi	r24, 0x00	; 0
    57d6:	6d e9       	ldi	r22, 0x9D	; 157
    57d8:	78 e2       	ldi	r23, 0x28	; 40
    57da:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <f_mount>
    switch(res) {
    57de:	81 30       	cpi	r24, 0x01	; 1
    57e0:	51 f0       	breq	.+20     	; 0x57f6 <main+0x2ee>
    57e2:	81 30       	cpi	r24, 0x01	; 1
    57e4:	28 f0       	brcs	.+10     	; 0x57f0 <main+0x2e8>
    57e6:	82 30       	cpi	r24, 0x02	; 2
    57e8:	49 f0       	breq	.+18     	; 0x57fc <main+0x2f4>
    57ea:	83 30       	cpi	r24, 0x03	; 3
    57ec:	69 f4       	brne	.+26     	; 0x5808 <main+0x300>
    57ee:	09 c0       	rjmp	.+18     	; 0x5802 <main+0x2fa>
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    57f0:	8f e5       	ldi	r24, 0x5F	; 95
    57f2:	90 e1       	ldi	r25, 0x10	; 16
    57f4:	0b c0       	rjmp	.+22     	; 0x580c <main+0x304>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    57f6:	86 e5       	ldi	r24, 0x56	; 86
    57f8:	90 e1       	ldi	r25, 0x10	; 16
    57fa:	08 c0       	rjmp	.+16     	; 0x580c <main+0x304>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    57fc:	83 e4       	ldi	r24, 0x43	; 67
    57fe:	90 e1       	ldi	r25, 0x10	; 16
    5800:	05 c0       	rjmp	.+10     	; 0x580c <main+0x304>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    5802:	86 e3       	ldi	r24, 0x36	; 54
    5804:	90 e1       	ldi	r25, 0x10	; 16
    5806:	02 c0       	rjmp	.+4      	; 0x580c <main+0x304>
        default: xputs(PSTR("???\n"));
    5808:	81 e3       	ldi	r24, 0x31	; 49
    580a:	90 e1       	ldi	r25, 0x10	; 16
    580c:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    5810:	80 e0       	ldi	r24, 0x00	; 0
    5812:	68 e0       	ldi	r22, 0x08	; 8
    5814:	48 e3       	ldi	r20, 0x38	; 56
    5816:	54 e2       	ldi	r21, 0x24	; 36
    5818:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    ledWrite(LED1, OFF);
    581c:	81 e0       	ldi	r24, 0x01	; 1
    581e:	60 e0       	ldi	r22, 0x00	; 0
    5820:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <ledWrite>
    ledBlink();
    5824:	0e 94 29 2e 	call	0x5c52	; 0x5c52 <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
    5828:	8f ef       	ldi	r24, 0xFF	; 255
    582a:	e8 16       	cp	r14, r24
    582c:	09 f0       	breq	.+2      	; 0x5830 <main+0x328>
    582e:	cf c0       	rjmp	.+414    	; 0x59ce <main+0x4c6>
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    5830:	83 e0       	ldi	r24, 0x03	; 3
    5832:	90 e1       	ldi	r25, 0x10	; 16
    5834:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    5838:	27 ee       	ldi	r18, 0xE7	; 231
    583a:	82 2e       	mov	r8, r18
    583c:	23 e0       	ldi	r18, 0x03	; 3
    583e:	92 2e       	mov	r9, r18
    5840:	97 ec       	ldi	r25, 0xC7	; 199
    5842:	b9 2e       	mov	r11, r25
    5844:	87 ec       	ldi	r24, 0xC7	; 199
    5846:	a8 2e       	mov	r10, r24
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    5848:	02 e0       	ldi	r16, 0x02	; 2
    584a:	c0 2e       	mov	r12, r16
    584c:	d1 2c       	mov	r13, r1
    584e:	cc 0e       	add	r12, r28
    5850:	dd 1e       	adc	r13, r29
    5852:	03 c0       	rjmp	.+6      	; 0x585a <main+0x352>
    ledBlink();
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == 0xff) {
        uint8_t msg_buffer[65];
		xputs(PSTR("Current working mode is the Controller mode!\n"));
    5854:	0a 2d       	mov	r16, r10
    5856:	47 01       	movw	r8, r14
    5858:	58 01       	movw	r10, r16
		
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    585a:	0e 94 8c 3a 	call	0x7518	; 0x7518 <uart_test>
    585e:	89 2b       	or	r24, r25
    5860:	09 f4       	brne	.+2      	; 0x5864 <main+0x35c>
    5862:	53 c0       	rjmp	.+166    	; 0x590a <main+0x402>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    5864:	c6 01       	movw	r24, r12
    5866:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <fill_Rx_buffer>
                switch(message_length) {
    586a:	84 30       	cpi	r24, 0x04	; 4
    586c:	91 05       	cpc	r25, r1
    586e:	39 f1       	breq	.+78     	; 0x58be <main+0x3b6>
    5870:	85 30       	cpi	r24, 0x05	; 5
    5872:	91 05       	cpc	r25, r1
    5874:	48 f4       	brcc	.+18     	; 0x5888 <main+0x380>
    5876:	82 30       	cpi	r24, 0x02	; 2
    5878:	91 05       	cpc	r25, r1
    587a:	c9 f0       	breq	.+50     	; 0x58ae <main+0x3a6>
    587c:	83 30       	cpi	r24, 0x03	; 3
    587e:	91 05       	cpc	r25, r1
    5880:	d0 f4       	brcc	.+52     	; 0x58b6 <main+0x3ae>
    5882:	01 97       	sbiw	r24, 0x01	; 1
    5884:	e1 f5       	brne	.+120    	; 0x58fe <main+0x3f6>
    5886:	0f c0       	rjmp	.+30     	; 0x58a6 <main+0x39e>
    5888:	89 30       	cpi	r24, 0x09	; 9
    588a:	91 05       	cpc	r25, r1
    588c:	01 f1       	breq	.+64     	; 0x58ce <main+0x3c6>
    588e:	8a 30       	cpi	r24, 0x0A	; 10
    5890:	91 05       	cpc	r25, r1
    5892:	18 f4       	brcc	.+6      	; 0x589a <main+0x392>
    5894:	05 97       	sbiw	r24, 0x05	; 5
    5896:	99 f5       	brne	.+102    	; 0x58fe <main+0x3f6>
    5898:	16 c0       	rjmp	.+44     	; 0x58c6 <main+0x3be>
    589a:	8e 33       	cpi	r24, 0x3E	; 62
    589c:	91 05       	cpc	r25, r1
    589e:	d9 f0       	breq	.+54     	; 0x58d6 <main+0x3ce>
    58a0:	cf 97       	sbiw	r24, 0x3f	; 63
    58a2:	69 f5       	brne	.+90     	; 0x58fe <main+0x3f6>
    58a4:	28 c0       	rjmp	.+80     	; 0x58f6 <main+0x3ee>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    58a6:	c6 01       	movw	r24, r12
    58a8:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <handle_message_length_1>
    58ac:	2e c0       	rjmp	.+92     	; 0x590a <main+0x402>
                        break;
                    case 2: // if length 2, then decode, could be reset, display num, or change pat
                        handle_message_length_2(&msg_buffer[0]);
    58ae:	c6 01       	movw	r24, r12
    58b0:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <handle_message_length_2>
    58b4:	2a c0       	rjmp	.+84     	; 0x590a <main+0x402>
                        break;
                    case 3: // if length 3, then decode...address change or ...
                        handle_message_length_3(&msg_buffer[0]);
    58b6:	c6 01       	movw	r24, r12
    58b8:	0e 94 b8 1b 	call	0x3770	; 0x3770 <handle_message_length_3>
    58bc:	26 c0       	rjmp	.+76     	; 0x590a <main+0x402>
                        break;
					case 4:
						handle_message_length_4(&msg_buffer[0]);
    58be:	c6 01       	movw	r24, r12
    58c0:	0e 94 96 1b 	call	0x372c	; 0x372c <handle_message_length_4>
    58c4:	22 c0       	rjmp	.+68     	; 0x590a <main+0x402>
						break;
                    case 5: // if length 5, then decode
                        handle_message_length_5(&msg_buffer[0]);
    58c6:	c6 01       	movw	r24, r12
    58c8:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <handle_message_length_5>
    58cc:	1e c0       	rjmp	.+60     	; 0x590a <main+0x402>
                        break;
					case 9: // if length 9, then decode, set x,y index, or set gain, bias
                        handle_message_length_9(&msg_buffer[0]);
    58ce:	c6 01       	movw	r24, r12
    58d0:	0e 94 3d 1b 	call	0x367a	; 0x367a <handle_message_length_9>
    58d4:	1a c0       	rjmp	.+52     	; 0x590a <main+0x402>
                        break;
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	30 e0       	ldi	r19, 0x00	; 0
{   
	uint8_t i;

	for (i = 0; i<62; i++)
	{
		laserPattern[i] = msg_buffer[i];
    58da:	f9 01       	movw	r30, r18
    58dc:	ef 55       	subi	r30, 0x5F	; 95
    58de:	fa 4d       	sbci	r31, 0xDA	; 218
    58e0:	d6 01       	movw	r26, r12
    58e2:	a2 0f       	add	r26, r18
    58e4:	b3 1f       	adc	r27, r19
    58e6:	8c 91       	ld	r24, X
    58e8:	80 83       	st	Z, r24
    58ea:	2f 5f       	subi	r18, 0xFF	; 255
    58ec:	3f 4f       	sbci	r19, 0xFF	; 255
			
void handle_message_length_62(uint8_t *msg_buffer)
{   
	uint8_t i;

	for (i = 0; i<62; i++)
    58ee:	2e 33       	cpi	r18, 0x3E	; 62
    58f0:	31 05       	cpc	r19, r1
    58f2:	99 f7       	brne	.-26     	; 0x58da <main+0x3d2>
    58f4:	0a c0       	rjmp	.+20     	; 0x590a <main+0x402>
                        break;
                    case 62: //if length 62, then set laser trigger pattern first 62 byte
                        handle_message_length_62(&msg_buffer[0]);
                        break;
					case 63: //if length 63, then set laser trigger pattern second 63 byte
                        handle_message_length_63(&msg_buffer[0]);
    58f6:	c6 01       	movw	r24, r12
    58f8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <handle_message_length_63>
    58fc:	06 c0       	rjmp	.+12     	; 0x590a <main+0x402>
                        break;	
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[7]);
    58fe:	80 e0       	ldi	r24, 0x00	; 0
    5900:	68 e0       	ldi	r22, 0x08	; 8
    5902:	45 ef       	ldi	r20, 0xF5	; 245
    5904:	50 e2       	ldi	r21, 0x20	; 32
    5906:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
                } //end of switch
            }// end of if, goes to top if nothing received on UART
            
            // at bottom of while(1) loop, check to see if stop is 0, then unpdate display if the frame has changed.
            if (Stop == 0){  //only send out new pattern if the pattern index has change
    590a:	80 91 9c 20 	lds	r24, 0x209C
    590e:	88 23       	and	r24, r24
    5910:	09 f0       	breq	.+2      	; 0x5914 <main+0x40c>
    5912:	a3 cf       	rjmp	.-186    	; 0x585a <main+0x352>
			
                if (frame_num != frame_num_old) {
    5914:	e0 90 01 24 	lds	r14, 0x2401
    5918:	f0 90 02 24 	lds	r15, 0x2402
    591c:	e8 14       	cp	r14, r8
    591e:	f9 04       	cpc	r15, r9
    5920:	91 f0       	breq	.+36     	; 0x5946 <main+0x43e>
                    frame_num_old = frame_num; //update the 'old' frame number
    5922:	e0 90 01 24 	lds	r14, 0x2401
    5926:	f0 90 02 24 	lds	r15, 0x2402
                    fetch_display_frame(frame_num, index_x, index_y);
    592a:	80 91 01 24 	lds	r24, 0x2401
    592e:	90 91 02 24 	lds	r25, 0x2402
    5932:	60 91 cd 26 	lds	r22, 0x26CD
    5936:	70 91 ce 26 	lds	r23, 0x26CE
    593a:	40 91 71 28 	lds	r20, 0x2871
    593e:	50 91 72 28 	lds	r21, 0x2872
    5942:	0e 94 69 21 	call	0x42d2	; 0x42d2 <fetch_display_frame>
                }
				
				//func_buffer_size_x in word, 2 bytes.
				if ((default_func_x == 0) && (func_buffer_size_x <= FUNCTION_LENGTH/4) && (func_read_index_x != func_idx_x_old))
    5946:	80 91 a1 20 	lds	r24, 0x20A1
    594a:	88 23       	and	r24, r24
    594c:	e1 f4       	brne	.+56     	; 0x5986 <main+0x47e>
    594e:	80 91 07 24 	lds	r24, 0x2407
    5952:	8a 31       	cpi	r24, 0x1A	; 26
    5954:	c0 f4       	brcc	.+48     	; 0x5986 <main+0x47e>
    5956:	10 91 03 24 	lds	r17, 0x2403
    595a:	1b 15       	cp	r17, r11
    595c:	a9 f0       	breq	.+42     	; 0x5988 <main+0x480>
				{					
					func_idx_x_old = func_read_index_x;
    595e:	10 91 03 24 	lds	r17, 0x2403
					next_block_x = (next_block_x + 1)%num_buffer_load_x; 					
    5962:	80 91 09 24 	lds	r24, 0x2409
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	60 91 b1 20 	lds	r22, 0x20B1
    596c:	70 91 b2 20 	lds	r23, 0x20B2
    5970:	01 96       	adiw	r24, 0x01	; 1
    5972:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    5976:	80 93 09 24 	sts	0x2409, r24
					fetch_update_funcX(0, next_block_x);  
    597a:	60 91 09 24 	lds	r22, 0x2409
    597e:	80 e0       	ldi	r24, 0x00	; 0
    5980:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <fetch_update_funcX>
    5984:	01 c0       	rjmp	.+2      	; 0x5988 <main+0x480>
    5986:	1b 2d       	mov	r17, r11
//xprintf(PSTR("func_buffer_size_x=%u, func_read_index_x=%u\n"), func_buffer_size_x, func_read_index_x);
				}

				if ((default_func_y == 0) && (func_buffer_size_y <= FUNCTION_LENGTH/4) && (func_read_index_y != func_idx_y_old))
    5988:	80 91 a2 20 	lds	r24, 0x20A2
    598c:	88 23       	and	r24, r24
    598e:	09 f0       	breq	.+2      	; 0x5992 <main+0x48a>
    5990:	61 cf       	rjmp	.-318    	; 0x5854 <main+0x34c>
    5992:	80 91 08 24 	lds	r24, 0x2408
    5996:	8a 31       	cpi	r24, 0x1A	; 26
    5998:	08 f0       	brcs	.+2      	; 0x599c <main+0x494>
    599a:	5c cf       	rjmp	.-328    	; 0x5854 <main+0x34c>
    599c:	00 91 04 24 	lds	r16, 0x2404
    59a0:	0a 15       	cp	r16, r10
    59a2:	09 f4       	brne	.+2      	; 0x59a6 <main+0x49e>
    59a4:	58 cf       	rjmp	.-336    	; 0x5856 <main+0x34e>
				{					
					func_idx_y_old = func_read_index_y;
    59a6:	00 91 04 24 	lds	r16, 0x2404
					fetch_update_funcY(0, next_block_y);	
    59aa:	60 91 0a 24 	lds	r22, 0x240A
    59ae:	80 e0       	ldi	r24, 0x00	; 0
    59b0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <fetch_update_funcY>
					next_block_y = (next_block_y + 1)%num_buffer_load_y; 
    59b4:	80 91 0a 24 	lds	r24, 0x240A
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	60 91 b3 20 	lds	r22, 0x20B3
    59be:	70 91 b4 20 	lds	r23, 0x20B4
    59c2:	01 96       	adiw	r24, 0x01	; 1
    59c4:	0e 94 2a 51 	call	0xa254	; 0xa254 <__udivmodhi4>
    59c8:	80 93 0a 24 	sts	0x240A, r24
    59cc:	44 cf       	rjmp	.-376    	; 0x5856 <main+0x34e>

			}
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    59ce:	85 ed       	ldi	r24, 0xD5	; 213
    59d0:	9f e0       	ldi	r25, 0x0F	; 15
    59d2:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    59d6:	8e 01       	movw	r16, r28
    59d8:	0d 5b       	subi	r16, 0xBD	; 189
    59da:	1f 4f       	sbci	r17, 0xFF	; 255
		}
    } else {
        uint8_t msg_buffer[1550];
		xputs(PSTR("Current working mode is the PC dumping mode!\n"));
        while(1) {  // this is the main loop, here we wait for communication from PC over UART
            if (uart_test()) {
    59dc:	0e 94 8c 3a 	call	0x7518	; 0x7518 <uart_test>
    59e0:	89 2b       	or	r24, r25
    59e2:	e1 f3       	breq	.-8      	; 0x59dc <main+0x4d4>
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    59e4:	c8 01       	movw	r24, r16
    59e6:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <fill_Rx_buffer>
                switch(message_length) {
    59ea:	81 30       	cpi	r24, 0x01	; 1
    59ec:	91 05       	cpc	r25, r1
    59ee:	19 f0       	breq	.+6      	; 0x59f6 <main+0x4ee>
    59f0:	c2 97       	sbiw	r24, 0x32	; 50
    59f2:	49 f4       	brne	.+18     	; 0x5a06 <main+0x4fe>
    59f4:	04 c0       	rjmp	.+8      	; 0x59fe <main+0x4f6>
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    59f6:	c8 01       	movw	r24, r16
    59f8:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <handle_message_length_1>
    59fc:	ef cf       	rjmp	.-34     	; 0x59dc <main+0x4d4>
                        break;
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    59fe:	c8 01       	movw	r24, r16
    5a00:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <display_dumped_frame>
    5a04:	eb cf       	rjmp	.-42     	; 0x59dc <main+0x4d4>
                        break;
                    default:			
                        i2cMasterSend(0x00, 8, ERROR_CODES[8]);
    5a06:	80 e0       	ldi	r24, 0x00	; 0
    5a08:	68 e0       	ldi	r22, 0x08	; 8
    5a0a:	4d ef       	ldi	r20, 0xFD	; 253
    5a0c:	50 e2       	ldi	r21, 0x20	; 32
    5a0e:	0e 94 8d 1a 	call	0x351a	; 0x351a <i2cMasterSend>
    5a12:	e4 cf       	rjmp	.-56     	; 0x59dc <main+0x4d4>

00005a14 <__vector_107>:

/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect) {
    5a14:	1f 92       	push	r1
    5a16:	0f 92       	push	r0
    5a18:	0f b6       	in	r0, 0x3f	; 63
    5a1a:	0f 92       	push	r0
    5a1c:	08 b6       	in	r0, 0x38	; 56
    5a1e:	0f 92       	push	r0
    5a20:	09 b6       	in	r0, 0x39	; 57
    5a22:	0f 92       	push	r0
    5a24:	0b b6       	in	r0, 0x3b	; 59
    5a26:	0f 92       	push	r0
    5a28:	11 24       	eor	r1, r1
    5a2a:	18 be       	out	0x38, r1	; 56
    5a2c:	19 be       	out	0x39, r1	; 57
    5a2e:	1b be       	out	0x3b, r1	; 59
    5a30:	2f 93       	push	r18
    5a32:	3f 93       	push	r19
    5a34:	4f 93       	push	r20
    5a36:	5f 93       	push	r21
    5a38:	6f 93       	push	r22
    5a3a:	7f 93       	push	r23
    5a3c:	8f 93       	push	r24
    5a3e:	9f 93       	push	r25
    5a40:	af 93       	push	r26
    5a42:	bf 93       	push	r27
    5a44:	ef 93       	push	r30
    5a46:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    5a48:	86 eb       	ldi	r24, 0xB6	; 182
    5a4a:	94 e2       	ldi	r25, 0x24	; 36
    5a4c:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <TWI_MasterInterruptHandler>
}
    5a50:	ff 91       	pop	r31
    5a52:	ef 91       	pop	r30
    5a54:	bf 91       	pop	r27
    5a56:	af 91       	pop	r26
    5a58:	9f 91       	pop	r25
    5a5a:	8f 91       	pop	r24
    5a5c:	7f 91       	pop	r23
    5a5e:	6f 91       	pop	r22
    5a60:	5f 91       	pop	r21
    5a62:	4f 91       	pop	r20
    5a64:	3f 91       	pop	r19
    5a66:	2f 91       	pop	r18
    5a68:	0f 90       	pop	r0
    5a6a:	0b be       	out	0x3b, r0	; 59
    5a6c:	0f 90       	pop	r0
    5a6e:	09 be       	out	0x39, r0	; 57
    5a70:	0f 90       	pop	r0
    5a72:	08 be       	out	0x38, r0	; 56
    5a74:	0f 90       	pop	r0
    5a76:	0f be       	out	0x3f, r0	; 63
    5a78:	0f 90       	pop	r0
    5a7a:	1f 90       	pop	r1
    5a7c:	18 95       	reti

00005a7e <__vector_46>:

/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect) {
    5a7e:	1f 92       	push	r1
    5a80:	0f 92       	push	r0
    5a82:	0f b6       	in	r0, 0x3f	; 63
    5a84:	0f 92       	push	r0
    5a86:	08 b6       	in	r0, 0x38	; 56
    5a88:	0f 92       	push	r0
    5a8a:	09 b6       	in	r0, 0x39	; 57
    5a8c:	0f 92       	push	r0
    5a8e:	0b b6       	in	r0, 0x3b	; 59
    5a90:	0f 92       	push	r0
    5a92:	11 24       	eor	r1, r1
    5a94:	18 be       	out	0x38, r1	; 56
    5a96:	19 be       	out	0x39, r1	; 57
    5a98:	1b be       	out	0x3b, r1	; 59
    5a9a:	2f 93       	push	r18
    5a9c:	3f 93       	push	r19
    5a9e:	4f 93       	push	r20
    5aa0:	5f 93       	push	r21
    5aa2:	6f 93       	push	r22
    5aa4:	7f 93       	push	r23
    5aa6:	8f 93       	push	r24
    5aa8:	9f 93       	push	r25
    5aaa:	af 93       	push	r26
    5aac:	bf 93       	push	r27
    5aae:	ef 93       	push	r30
    5ab0:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    5ab2:	8a e3       	ldi	r24, 0x3A	; 58
    5ab4:	96 e2       	ldi	r25, 0x26	; 38
    5ab6:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <TWI_MasterInterruptHandler>
}
    5aba:	ff 91       	pop	r31
    5abc:	ef 91       	pop	r30
    5abe:	bf 91       	pop	r27
    5ac0:	af 91       	pop	r26
    5ac2:	9f 91       	pop	r25
    5ac4:	8f 91       	pop	r24
    5ac6:	7f 91       	pop	r23
    5ac8:	6f 91       	pop	r22
    5aca:	5f 91       	pop	r21
    5acc:	4f 91       	pop	r20
    5ace:	3f 91       	pop	r19
    5ad0:	2f 91       	pop	r18
    5ad2:	0f 90       	pop	r0
    5ad4:	0b be       	out	0x3b, r0	; 59
    5ad6:	0f 90       	pop	r0
    5ad8:	09 be       	out	0x39, r0	; 57
    5ada:	0f 90       	pop	r0
    5adc:	08 be       	out	0x38, r0	; 56
    5ade:	0f 90       	pop	r0
    5ae0:	0f be       	out	0x3f, r0	; 63
    5ae2:	0f 90       	pop	r0
    5ae4:	1f 90       	pop	r1
    5ae6:	18 95       	reti

00005ae8 <__vector_76>:

/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect) {
    5ae8:	1f 92       	push	r1
    5aea:	0f 92       	push	r0
    5aec:	0f b6       	in	r0, 0x3f	; 63
    5aee:	0f 92       	push	r0
    5af0:	08 b6       	in	r0, 0x38	; 56
    5af2:	0f 92       	push	r0
    5af4:	09 b6       	in	r0, 0x39	; 57
    5af6:	0f 92       	push	r0
    5af8:	0b b6       	in	r0, 0x3b	; 59
    5afa:	0f 92       	push	r0
    5afc:	11 24       	eor	r1, r1
    5afe:	18 be       	out	0x38, r1	; 56
    5b00:	19 be       	out	0x39, r1	; 57
    5b02:	1b be       	out	0x3b, r1	; 59
    5b04:	2f 93       	push	r18
    5b06:	3f 93       	push	r19
    5b08:	4f 93       	push	r20
    5b0a:	5f 93       	push	r21
    5b0c:	6f 93       	push	r22
    5b0e:	7f 93       	push	r23
    5b10:	8f 93       	push	r24
    5b12:	9f 93       	push	r25
    5b14:	af 93       	push	r26
    5b16:	bf 93       	push	r27
    5b18:	ef 93       	push	r30
    5b1a:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    5b1c:	8d e8       	ldi	r24, 0x8D	; 141
    5b1e:	98 e2       	ldi	r25, 0x28	; 40
    5b20:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <TWI_MasterInterruptHandler>
}
    5b24:	ff 91       	pop	r31
    5b26:	ef 91       	pop	r30
    5b28:	bf 91       	pop	r27
    5b2a:	af 91       	pop	r26
    5b2c:	9f 91       	pop	r25
    5b2e:	8f 91       	pop	r24
    5b30:	7f 91       	pop	r23
    5b32:	6f 91       	pop	r22
    5b34:	5f 91       	pop	r21
    5b36:	4f 91       	pop	r20
    5b38:	3f 91       	pop	r19
    5b3a:	2f 91       	pop	r18
    5b3c:	0f 90       	pop	r0
    5b3e:	0b be       	out	0x3b, r0	; 59
    5b40:	0f 90       	pop	r0
    5b42:	09 be       	out	0x39, r0	; 57
    5b44:	0f 90       	pop	r0
    5b46:	08 be       	out	0x38, r0	; 56
    5b48:	0f 90       	pop	r0
    5b4a:	0f be       	out	0x3f, r0	; 63
    5b4c:	0f 90       	pop	r0
    5b4e:	1f 90       	pop	r1
    5b50:	18 95       	reti

00005b52 <__vector_13>:

/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect) {
    5b52:	1f 92       	push	r1
    5b54:	0f 92       	push	r0
    5b56:	0f b6       	in	r0, 0x3f	; 63
    5b58:	0f 92       	push	r0
    5b5a:	08 b6       	in	r0, 0x38	; 56
    5b5c:	0f 92       	push	r0
    5b5e:	09 b6       	in	r0, 0x39	; 57
    5b60:	0f 92       	push	r0
    5b62:	0b b6       	in	r0, 0x3b	; 59
    5b64:	0f 92       	push	r0
    5b66:	11 24       	eor	r1, r1
    5b68:	18 be       	out	0x38, r1	; 56
    5b6a:	19 be       	out	0x39, r1	; 57
    5b6c:	1b be       	out	0x3b, r1	; 59
    5b6e:	2f 93       	push	r18
    5b70:	3f 93       	push	r19
    5b72:	4f 93       	push	r20
    5b74:	5f 93       	push	r21
    5b76:	6f 93       	push	r22
    5b78:	7f 93       	push	r23
    5b7a:	8f 93       	push	r24
    5b7c:	9f 93       	push	r25
    5b7e:	af 93       	push	r26
    5b80:	bf 93       	push	r27
    5b82:	ef 93       	push	r30
    5b84:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    5b86:	82 e9       	ldi	r24, 0x92	; 146
    5b88:	95 e2       	ldi	r25, 0x25	; 37
    5b8a:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <TWI_MasterInterruptHandler>
}
    5b8e:	ff 91       	pop	r31
    5b90:	ef 91       	pop	r30
    5b92:	bf 91       	pop	r27
    5b94:	af 91       	pop	r26
    5b96:	9f 91       	pop	r25
    5b98:	8f 91       	pop	r24
    5b9a:	7f 91       	pop	r23
    5b9c:	6f 91       	pop	r22
    5b9e:	5f 91       	pop	r21
    5ba0:	4f 91       	pop	r20
    5ba2:	3f 91       	pop	r19
    5ba4:	2f 91       	pop	r18
    5ba6:	0f 90       	pop	r0
    5ba8:	0b be       	out	0x3b, r0	; 59
    5baa:	0f 90       	pop	r0
    5bac:	09 be       	out	0x39, r0	; 57
    5bae:	0f 90       	pop	r0
    5bb0:	08 be       	out	0x38, r0	; 56
    5bb2:	0f 90       	pop	r0
    5bb4:	0f be       	out	0x3f, r0	; 63
    5bb6:	0f 90       	pop	r0
    5bb8:	1f 90       	pop	r1
    5bba:	18 95       	reti

00005bbc <CCPWrite>:
  sei();
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
    5bbc:	0f 93       	push	r16
    5bbe:	df 93       	push	r29
    5bc0:	cf 93       	push	r28
    5bc2:	0f 92       	push	r0
    5bc4:	cd b7       	in	r28, 0x3d	; 61
    5bc6:	de b7       	in	r29, 0x3e	; 62
  uint8_t volatile saved_sreg = SREG;
    5bc8:	2f b7       	in	r18, 0x3f	; 63
    5bca:	29 83       	std	Y+1, r18	; 0x01
  cli();
    5bcc:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    5bce:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    5bd0:	fc 01       	movw	r30, r24
    5bd2:	08 ed       	ldi	r16, 0xD8	; 216
    5bd4:	04 bf       	out	0x34, r16	; 52
    5bd6:	60 83       	st	Z, r22
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
    5bda:	8f bf       	out	0x3f, r24	; 63
}
    5bdc:	0f 90       	pop	r0
    5bde:	cf 91       	pop	r28
    5be0:	df 91       	pop	r29
    5be2:	0f 91       	pop	r16
    5be4:	08 95       	ret

00005be6 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((led & ~3) || (value & ~1))) {
    5be6:	28 2f       	mov	r18, r24
    5be8:	30 e0       	ldi	r19, 0x00	; 0
    5bea:	c9 01       	movw	r24, r18
    5bec:	8c 7f       	andi	r24, 0xFC	; 252
    5bee:	89 2b       	or	r24, r25
    5bf0:	e1 f4       	brne	.+56     	; 0x5c2a <ledWrite+0x44>
    5bf2:	86 2f       	mov	r24, r22
    5bf4:	8e 7f       	andi	r24, 0xFE	; 254
    5bf6:	c9 f4       	brne	.+50     	; 0x5c2a <ledWrite+0x44>
    5bf8:	2c 5f       	subi	r18, 0xFC	; 252
    5bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    if (value == 1) {
    5bfc:	61 30       	cpi	r22, 0x01	; 1
    5bfe:	59 f4       	brne	.+22     	; 0x5c16 <ledWrite+0x30>
      // turn the led ON
      PORTJ.OUTCLR = 1 << 4 + led;
    5c00:	81 e0       	ldi	r24, 0x01	; 1
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	02 c0       	rjmp	.+4      	; 0x5c0a <ledWrite+0x24>
    5c06:	88 0f       	add	r24, r24
    5c08:	99 1f       	adc	r25, r25
    5c0a:	2a 95       	dec	r18
    5c0c:	e2 f7       	brpl	.-8      	; 0x5c06 <ledWrite+0x20>
    5c0e:	e0 e0       	ldi	r30, 0x00	; 0
    5c10:	f7 e0       	ldi	r31, 0x07	; 7
    5c12:	86 83       	std	Z+6, r24	; 0x06
    5c14:	08 95       	ret
    } else {
      // turn the led OFF
      PORTJ.OUTSET = 1 << 4 + led;
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	02 c0       	rjmp	.+4      	; 0x5c20 <ledWrite+0x3a>
    5c1c:	88 0f       	add	r24, r24
    5c1e:	99 1f       	adc	r25, r25
    5c20:	2a 95       	dec	r18
    5c22:	e2 f7       	brpl	.-8      	; 0x5c1c <ledWrite+0x36>
    5c24:	e0 e0       	ldi	r30, 0x00	; 0
    5c26:	f7 e0       	ldi	r31, 0x07	; 7
    5c28:	85 83       	std	Z+5, r24	; 0x05
    5c2a:	08 95       	ret

00005c2c <ledToggle>:
  }
}

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    5c2c:	28 2f       	mov	r18, r24
    5c2e:	30 e0       	ldi	r19, 0x00	; 0
    5c30:	c9 01       	movw	r24, r18
    5c32:	8c 7f       	andi	r24, 0xFC	; 252
    5c34:	89 2b       	or	r24, r25
    5c36:	61 f4       	brne	.+24     	; 0x5c50 <ledToggle+0x24>
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5c38:	2c 5f       	subi	r18, 0xFC	; 252
    5c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3c:	81 e0       	ldi	r24, 0x01	; 1
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	02 c0       	rjmp	.+4      	; 0x5c46 <ledToggle+0x1a>
    5c42:	88 0f       	add	r24, r24
    5c44:	99 1f       	adc	r25, r25
    5c46:	2a 95       	dec	r18
    5c48:	e2 f7       	brpl	.-8      	; 0x5c42 <ledToggle+0x16>
    5c4a:	e0 e0       	ldi	r30, 0x00	; 0
    5c4c:	f7 e0       	ldi	r31, 0x07	; 7
    5c4e:	87 83       	std	Z+7, r24	; 0x07
    5c50:	08 95       	ret

00005c52 <ledBlink>:
  }
}

void ledBlink(void)
{ 
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5c56:	a0 e0       	ldi	r26, 0x00	; 0
    5c58:	b7 e0       	ldi	r27, 0x07	; 7
    5c5a:	60 e2       	ldi	r22, 0x20	; 32
    5c5c:	40 e2       	ldi	r20, 0x20	; 32
    5c5e:	53 e0       	ldi	r21, 0x03	; 3
    5c60:	17 96       	adiw	r26, 0x07	; 7
    5c62:	6c 93       	st	X, r22
    5c64:	17 97       	sbiw	r26, 0x07	; 7
    5c66:	8c ea       	ldi	r24, 0xAC	; 172
    5c68:	9d e0       	ldi	r25, 0x0D	; 13
    5c6a:	fa 01       	movw	r30, r20
    5c6c:	31 97       	sbiw	r30, 0x01	; 1
    5c6e:	f1 f7       	brne	.-4      	; 0x5c6c <ledBlink+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c72:	d9 f7       	brne	.-10     	; 0x5c6a <ledBlink+0x18>
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    5c74:	2f 5f       	subi	r18, 0xFF	; 255
    5c76:	3f 4f       	sbci	r19, 0xFF	; 255
    5c78:	2a 30       	cpi	r18, 0x0A	; 10
    5c7a:	31 05       	cpc	r19, r1
    5c7c:	89 f7       	brne	.-30     	; 0x5c60 <ledBlink+0xe>
  {
    ledToggle(1);
    _delay_ms(350);
//Wait(350);		
  }
}
    5c7e:	08 95       	ret

00005c80 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode) {
  if (!(bit & ~3)) {
    5c80:	48 2f       	mov	r20, r24
    5c82:	50 e0       	ldi	r21, 0x00	; 0
    5c84:	ca 01       	movw	r24, r20
    5c86:	8c 7f       	andi	r24, 0xFC	; 252
    5c88:	89 2b       	or	r24, r25
    5c8a:	79 f5       	brne	.+94     	; 0x5cea <digitalMode+0x6a>
    if (mode == OUTPUT) {
    5c8c:	66 23       	and	r22, r22
    5c8e:	b9 f4       	brne	.+46     	; 0x5cbe <digitalMode+0x3e>
      /* set the port as output */
      PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    5c90:	4c 5f       	subi	r20, 0xFC	; 252
    5c92:	5f 4f       	sbci	r21, 0xFF	; 255
    5c94:	81 e0       	ldi	r24, 0x01	; 1
    5c96:	90 e0       	ldi	r25, 0x00	; 0
    5c98:	9c 01       	movw	r18, r24
    5c9a:	04 2e       	mov	r0, r20
    5c9c:	02 c0       	rjmp	.+4      	; 0x5ca2 <digitalMode+0x22>
    5c9e:	22 0f       	add	r18, r18
    5ca0:	33 1f       	adc	r19, r19
    5ca2:	0a 94       	dec	r0
    5ca4:	e2 f7       	brpl	.-8      	; 0x5c9e <digitalMode+0x1e>
    5ca6:	44 50       	subi	r20, 0x04	; 4
    5ca8:	50 40       	sbci	r21, 0x00	; 0
    5caa:	e0 e2       	ldi	r30, 0x20	; 32
    5cac:	f7 e0       	ldi	r31, 0x07	; 7
    5cae:	26 83       	std	Z+6, r18	; 0x06
      PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    5cb0:	02 c0       	rjmp	.+4      	; 0x5cb6 <digitalMode+0x36>
    5cb2:	88 0f       	add	r24, r24
    5cb4:	99 1f       	adc	r25, r25
    5cb6:	4a 95       	dec	r20
    5cb8:	e2 f7       	brpl	.-8      	; 0x5cb2 <digitalMode+0x32>
    5cba:	81 83       	std	Z+1, r24	; 0x01
    5cbc:	08 95       	ret
    } else if (mode == INPUT) {
    5cbe:	61 30       	cpi	r22, 0x01	; 1
    5cc0:	a1 f4       	brne	.+40     	; 0x5cea <digitalMode+0x6a>
      /* set the port as input */
      PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	9c 01       	movw	r18, r24
    5cc8:	04 2e       	mov	r0, r20
    5cca:	02 c0       	rjmp	.+4      	; 0x5cd0 <digitalMode+0x50>
    5ccc:	22 0f       	add	r18, r18
    5cce:	33 1f       	adc	r19, r19
    5cd0:	0a 94       	dec	r0
    5cd2:	e2 f7       	brpl	.-8      	; 0x5ccc <digitalMode+0x4c>
    5cd4:	e0 e2       	ldi	r30, 0x20	; 32
    5cd6:	f7 e0       	ldi	r31, 0x07	; 7
    5cd8:	22 83       	std	Z+2, r18	; 0x02
      PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    5cda:	4c 5f       	subi	r20, 0xFC	; 252
    5cdc:	5f 4f       	sbci	r21, 0xFF	; 255
    5cde:	02 c0       	rjmp	.+4      	; 0x5ce4 <digitalMode+0x64>
    5ce0:	88 0f       	add	r24, r24
    5ce2:	99 1f       	adc	r25, r25
    5ce4:	4a 95       	dec	r20
    5ce6:	e2 f7       	brpl	.-8      	; 0x5ce0 <digitalMode+0x60>
    5ce8:	85 83       	std	Z+5, r24	; 0x05
    5cea:	08 95       	ret

00005cec <digitalRead>:
}

uint8_t digitalRead( uint8_t bit ) {
  uint8_t res;
  // ignore read if out-ouf-bounds argument
  if (!(bit & ~3)) {
    5cec:	28 2f       	mov	r18, r24
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	c9 01       	movw	r24, r18
    5cf2:	8c 7f       	andi	r24, 0xFC	; 252
    5cf4:	89 2b       	or	r24, r25
    5cf6:	11 f0       	breq	.+4      	; 0x5cfc <digitalRead+0x10>
    5cf8:	80 e0       	ldi	r24, 0x00	; 0
    5cfa:	08 95       	ret
    res = (PORTK.IN >> bit) & 0x01;
    5cfc:	80 91 28 07 	lds	r24, 0x0728
    5d00:	90 e0       	ldi	r25, 0x00	; 0
    5d02:	02 c0       	rjmp	.+4      	; 0x5d08 <digitalRead+0x1c>
    5d04:	95 95       	asr	r25
    5d06:	87 95       	ror	r24
    5d08:	2a 95       	dec	r18
    5d0a:	e2 f7       	brpl	.-8      	; 0x5d04 <digitalRead+0x18>
    5d0c:	81 70       	andi	r24, 0x01	; 1
  } else {
    res = 0;
  }
  return(res);
}
    5d0e:	08 95       	ret

00005d10 <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value ) {
  // ignore write if out-ouf-bounds argument
  if (!((bit & ~3) || (value & ~1))) {
    5d10:	28 2f       	mov	r18, r24
    5d12:	30 e0       	ldi	r19, 0x00	; 0
    5d14:	c9 01       	movw	r24, r18
    5d16:	8c 7f       	andi	r24, 0xFC	; 252
    5d18:	89 2b       	or	r24, r25
    5d1a:	d1 f4       	brne	.+52     	; 0x5d50 <digitalWrite+0x40>
    5d1c:	86 2f       	mov	r24, r22
    5d1e:	8e 7f       	andi	r24, 0xFE	; 254
    5d20:	b9 f4       	brne	.+46     	; 0x5d50 <digitalWrite+0x40>
    if (value == 1) {
    5d22:	61 30       	cpi	r22, 0x01	; 1
    5d24:	59 f4       	brne	.+22     	; 0x5d3c <digitalWrite+0x2c>
      // set the bit HIGH
      PORTK.OUTSET = 1 << bit;
    5d26:	81 e0       	ldi	r24, 0x01	; 1
    5d28:	90 e0       	ldi	r25, 0x00	; 0
    5d2a:	02 c0       	rjmp	.+4      	; 0x5d30 <digitalWrite+0x20>
    5d2c:	88 0f       	add	r24, r24
    5d2e:	99 1f       	adc	r25, r25
    5d30:	2a 95       	dec	r18
    5d32:	e2 f7       	brpl	.-8      	; 0x5d2c <digitalWrite+0x1c>
    5d34:	e0 e2       	ldi	r30, 0x20	; 32
    5d36:	f7 e0       	ldi	r31, 0x07	; 7
    5d38:	85 83       	std	Z+5, r24	; 0x05
    5d3a:	08 95       	ret
    } else {
      // set the bit LOW
      PORTK.OUTCLR = 1 << bit;
    5d3c:	81 e0       	ldi	r24, 0x01	; 1
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	02 c0       	rjmp	.+4      	; 0x5d46 <digitalWrite+0x36>
    5d42:	88 0f       	add	r24, r24
    5d44:	99 1f       	adc	r25, r25
    5d46:	2a 95       	dec	r18
    5d48:	e2 f7       	brpl	.-8      	; 0x5d42 <digitalWrite+0x32>
    5d4a:	e0 e2       	ldi	r30, 0x20	; 32
    5d4c:	f7 e0       	ldi	r31, 0x07	; 7
    5d4e:	86 83       	std	Z+6, r24	; 0x06
    5d50:	08 95       	ret

00005d52 <digitalToggle>:
  }
}

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    5d52:	28 2f       	mov	r18, r24
    5d54:	30 e0       	ldi	r19, 0x00	; 0
    5d56:	c9 01       	movw	r24, r18
    5d58:	8c 7f       	andi	r24, 0xFC	; 252
    5d5a:	89 2b       	or	r24, r25
    5d5c:	51 f4       	brne	.+20     	; 0x5d72 <digitalToggle+0x20>
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    5d5e:	81 e0       	ldi	r24, 0x01	; 1
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	02 c0       	rjmp	.+4      	; 0x5d68 <digitalToggle+0x16>
    5d64:	88 0f       	add	r24, r24
    5d66:	99 1f       	adc	r25, r25
    5d68:	2a 95       	dec	r18
    5d6a:	e2 f7       	brpl	.-8      	; 0x5d64 <digitalToggle+0x12>
    5d6c:	e0 e2       	ldi	r30, 0x20	; 32
    5d6e:	f7 e0       	ldi	r31, 0x07	; 7
    5d70:	87 83       	std	Z+7, r24	; 0x07
    5d72:	08 95       	ret

00005d74 <analogRead>:
  }
}

int16_t analogRead( uint8_t ch ) {
    5d74:	a2 e0       	ldi	r26, 0x02	; 2
    5d76:	b0 e0       	ldi	r27, 0x00	; 0
    5d78:	e0 ec       	ldi	r30, 0xC0	; 192
    5d7a:	fe e2       	ldi	r31, 0x2E	; 46
    5d7c:	0c 94 9e 51 	jmp	0xa33c	; 0xa33c <__prologue_saves__+0x20>
  int16_t w1;
  if (!(ch & ~7)) {
    5d80:	28 2f       	mov	r18, r24
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	c9 01       	movw	r24, r18
    5d86:	88 7f       	andi	r24, 0xF8	; 248
    5d88:	89 2b       	or	r24, r25
    5d8a:	19 f0       	breq	.+6      	; 0x5d92 <analogRead+0x1e>
    5d8c:	20 e0       	ldi	r18, 0x00	; 0
    5d8e:	30 e0       	ldi	r19, 0x00	; 0
    5d90:	5c c0       	rjmp	.+184    	; 0x5e4a <analogRead+0xd6>
    // control register: ch = <ch>, mode = 00, pm = 00, code = 0, ref = 1, seq = 00
	//coding = 0,the output coding is twos complement
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    5d92:	80 e1       	ldi	r24, 0x10	; 16
    5d94:	e0 e4       	ldi	r30, 0x40	; 64
    5d96:	f6 e0       	ldi	r31, 0x06	; 6
    5d98:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x80 | ((ch & 0x7) << 2);
    5d9a:	c9 01       	movw	r24, r18
    5d9c:	87 70       	andi	r24, 0x07	; 7
    5d9e:	90 70       	andi	r25, 0x00	; 0
    5da0:	88 0f       	add	r24, r24
    5da2:	99 1f       	adc	r25, r25
    5da4:	88 0f       	add	r24, r24
    5da6:	99 1f       	adc	r25, r25
    5da8:	80 68       	ori	r24, 0x80	; 128
    5daa:	e0 ec       	ldi	r30, 0xC0	; 192
    5dac:	f8 e0       	ldi	r31, 0x08	; 8
    5dae:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    5db0:	80 91 c2 08 	lds	r24, 0x08C2
    5db4:	87 ff       	sbrs	r24, 7
    5db6:	fc cf       	rjmp	.-8      	; 0x5db0 <analogRead+0x3c>
    SPIC.DATA = 0x10;
    5db8:	80 e1       	ldi	r24, 0x10	; 16
    5dba:	e0 ec       	ldi	r30, 0xC0	; 192
    5dbc:	f8 e0       	ldi	r31, 0x08	; 8
    5dbe:	83 83       	std	Z+3, r24	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    5dc0:	80 91 c2 08 	lds	r24, 0x08C2
    5dc4:	87 ff       	sbrs	r24, 7
    5dc6:	fc cf       	rjmp	.-8      	; 0x5dc0 <analogRead+0x4c>
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    5dc8:	e0 e4       	ldi	r30, 0x40	; 64
    5dca:	f6 e0       	ldi	r31, 0x06	; 6
    5dcc:	80 e1       	ldi	r24, 0x10	; 16
    5dce:	85 83       	std	Z+5, r24	; 0x05

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    5dd0:	86 83       	std	Z+6, r24	; 0x06
    SPIC.DATA = 0x00;
    5dd2:	e0 ec       	ldi	r30, 0xC0	; 192
    5dd4:	f8 e0       	ldi	r31, 0x08	; 8
    5dd6:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    5dd8:	80 91 c2 08 	lds	r24, 0x08C2
    5ddc:	87 ff       	sbrs	r24, 7
    5dde:	fc cf       	rjmp	.-8      	; 0x5dd8 <analogRead+0x64>
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    5de0:	de 01       	movw	r26, r28
    5de2:	11 96       	adiw	r26, 0x01	; 1
    5de4:	90 91 c3 08 	lds	r25, 0x08C3
    SPIC.DATA = 0x00;
    5de8:	e0 ec       	ldi	r30, 0xC0	; 192
    5dea:	f8 e0       	ldi	r31, 0x08	; 8
    5dec:	13 82       	std	Z+3, r1	; 0x03
    loop_until_bit_is_set(SPIC.STATUS, 7);
    5dee:	80 91 c2 08 	lds	r24, 0x08C2
    5df2:	87 ff       	sbrs	r24, 7
    5df4:	fc cf       	rjmp	.-8      	; 0x5dee <analogRead+0x7a>
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    5df6:	80 91 c3 08 	lds	r24, 0x08C3

    // do a conversion on the selected channel (no register write)
    PORTC.OUTCLR = PIN4_bm;        // SPI SS = L
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[1] = SPIC.DATA;
    5dfa:	11 96       	adiw	r26, 0x01	; 1
    5dfc:	9c 93       	st	X, r25
    5dfe:	11 97       	sbiw	r26, 0x01	; 1
    SPIC.DATA = 0x00;
    loop_until_bit_is_set(SPIC.STATUS, 7);
    ((uint8_t*)&w1)[0] = SPIC.DATA;
    5e00:	8c 93       	st	X, r24
    PORTC.OUTSET = PIN4_bm;        // SPI SS = H
    5e02:	80 e1       	ldi	r24, 0x10	; 16
    5e04:	e0 e4       	ldi	r30, 0x40	; 64
    5e06:	f6 e0       	ldi	r31, 0x06	; 6
    5e08:	85 83       	std	Z+5, r24	; 0x05

	//ADC0-1 -5V-5V  //ADC2-7 0-10V
	if (!(ch& ~1))	
    5e0a:	2e 7f       	andi	r18, 0xFE	; 254
    5e0c:	89 81       	ldd	r24, Y+1	; 0x01
    5e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e10:	23 2b       	or	r18, r19
    5e12:	69 f4       	brne	.+26     	; 0x5e2e <analogRead+0xba>
    5e14:	9c 01       	movw	r18, r24
    5e16:	3f 70       	andi	r19, 0x0F	; 15
		//in this way, 0v ->0, -5V -> -2047, 5V->2047

		//-5V-0V
		if (w1 & 1 << 12) { 
    5e18:	94 ff       	sbrs	r25, 4
    5e1a:	04 c0       	rjmp	.+8      	; 0x5e24 <analogRead+0xb0>
		//input value is -5V-0v, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff)>>1;
    5e1c:	35 95       	asr	r19
    5e1e:	27 95       	ror	r18
		  w1 = w1 | 0xf800;
    5e20:	38 6f       	ori	r19, 0xF8	; 248
    5e22:	02 c0       	rjmp	.+4      	; 0x5e28 <analogRead+0xb4>
		} 
		else{   //0-5V
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is 0-5V, 12 ADC code from 0x0000 to 0x0fff
		 //remove the 3 channel id bits
		  w1 = (w1 & 0x0fff)>>1; 
    5e24:	35 95       	asr	r19
    5e26:	27 95       	ror	r18
    5e28:	29 83       	std	Y+1, r18	; 0x01
    5e2a:	3a 83       	std	Y+2, r19	; 0x02
    5e2c:	0c c0       	rjmp	.+24     	; 0x5e46 <analogRead+0xd2>
		  //output value is now 0x0000 to 0x07ff
		}
	else
		//in this way, 0v ->0, 5V -> 2047, 10V->4095
		if (w1 & 1 << 12) { 
    5e2e:	94 ff       	sbrs	r25, 4
    5e30:	04 c0       	rjmp	.+8      	; 0x5e3a <analogRead+0xc6>
		//input value is less than 5V, ADC code from 0x1000 to 0x1fff
		  w1 = (w1 & 0x0fff) >> 1;
    5e32:	9f 70       	andi	r25, 0x0F	; 15
    5e34:	95 95       	asr	r25
    5e36:	87 95       	ror	r24
    5e38:	04 c0       	rjmp	.+8      	; 0x5e42 <analogRead+0xce>
		  //output value now is from 0x0000 to 0x07ff
		} 
		else{   
		//since output data : 3 channel id bits + sign bit + 12 conversion result
		//input value is bigger than 5v, 12 ADC code from 0x0000 to 0x0fff
		  w1 = (w1 | 0x1000) >> 1;
    5e3a:	90 61       	ori	r25, 0x10	; 16
    5e3c:	95 95       	asr	r25
    5e3e:	87 95       	ror	r24
		 //remove the 3 channel id bits
		  w1 = w1 & 0x0fff; 
    5e40:	9f 70       	andi	r25, 0x0F	; 15
    5e42:	89 83       	std	Y+1, r24	; 0x01
    5e44:	9a 83       	std	Y+2, r25	; 0x02
		  //output value is now 0x0800 to 0x0fff
		}
    return w1;
    5e46:	29 81       	ldd	r18, Y+1	; 0x01
    5e48:	3a 81       	ldd	r19, Y+2	; 0x02
  }
  else
    return 0;
}
    5e4a:	c9 01       	movw	r24, r18
    5e4c:	22 96       	adiw	r28, 0x02	; 2
    5e4e:	e2 e0       	ldi	r30, 0x02	; 2
    5e50:	0c 94 ba 51 	jmp	0xa374	; 0xa374 <__epilogue_restores__+0x20>

00005e54 <analogWrite>:

void analogWrite(uint8_t ch, int16_t value) {
    5e54:	98 2f       	mov	r25, r24
//AD5754 16 bit DAC, it also works for AD5724 12 bit DAC
//chanel number should from 0 to 3 and value ranges from -32767 to 32767
  if (!((ch & ~3) || ((value > 32767) || (value < -32767)))) {
    5e56:	8c 7f       	andi	r24, 0xFC	; 252
    5e58:	11 f5       	brne	.+68     	; 0x5e9e <analogWrite+0x4a>
    5e5a:	80 e8       	ldi	r24, 0x80	; 128
    5e5c:	60 30       	cpi	r22, 0x00	; 0
    5e5e:	78 07       	cpc	r23, r24
    5e60:	f1 f0       	breq	.+60     	; 0x5e9e <analogWrite+0x4a>
    /* DAC register*/
    PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    5e62:	80 e1       	ldi	r24, 0x10	; 16
    5e64:	e0 e6       	ldi	r30, 0x60	; 96
    5e66:	f6 e0       	ldi	r31, 0x06	; 6
    5e68:	86 83       	std	Z+6, r24	; 0x06
    SPID.DATA = 0x00 | (ch & 0x7);
    5e6a:	97 70       	andi	r25, 0x07	; 7
    5e6c:	e0 ec       	ldi	r30, 0xC0	; 192
    5e6e:	f9 e0       	ldi	r31, 0x09	; 9
    5e70:	93 83       	std	Z+3, r25	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    5e72:	80 91 c2 09 	lds	r24, 0x09C2
    5e76:	87 ff       	sbrs	r24, 7
    5e78:	fc cf       	rjmp	.-8      	; 0x5e72 <analogWrite+0x1e>
	SPID.DATA = (uint8_t)((value & 0xff00) >> 8);
    5e7a:	e0 ec       	ldi	r30, 0xC0	; 192
    5e7c:	f9 e0       	ldi	r31, 0x09	; 9
    5e7e:	73 83       	std	Z+3, r23	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    5e80:	80 91 c2 09 	lds	r24, 0x09C2
    5e84:	87 ff       	sbrs	r24, 7
    5e86:	fc cf       	rjmp	.-8      	; 0x5e80 <analogWrite+0x2c>
	SPID.DATA = (uint8_t)(value & 0xff) ;
    5e88:	e0 ec       	ldi	r30, 0xC0	; 192
    5e8a:	f9 e0       	ldi	r31, 0x09	; 9
    5e8c:	63 83       	std	Z+3, r22	; 0x03
    loop_until_bit_is_set(SPID.STATUS, 7);
    5e8e:	80 91 c2 09 	lds	r24, 0x09C2
    5e92:	87 ff       	sbrs	r24, 7
    5e94:	fc cf       	rjmp	.-8      	; 0x5e8e <analogWrite+0x3a>
    PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    5e96:	80 e1       	ldi	r24, 0x10	; 16
    5e98:	e0 e6       	ldi	r30, 0x60	; 96
    5e9a:	f6 e0       	ldi	r31, 0x06	; 6
    5e9c:	85 83       	std	Z+5, r24	; 0x05
    5e9e:	08 95       	ret

00005ea0 <test_DIO>:
  }
}
 
void test_DIO(uint8_t ch)
{ 
    5ea0:	a0 e0       	ldi	r26, 0x00	; 0
    5ea2:	b0 e0       	ldi	r27, 0x00	; 0
    5ea4:	e6 e5       	ldi	r30, 0x56	; 86
    5ea6:	ff e2       	ldi	r31, 0x2F	; 47
    5ea8:	0c 94 92 51 	jmp	0xa324	; 0xa324 <__prologue_saves__+0x8>
    5eac:	b8 2e       	mov	r11, r24
    5eae:	c0 e0       	ldi	r28, 0x00	; 0
    5eb0:	d0 e0       	ldi	r29, 0x00	; 0

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    5eb2:	00 e2       	ldi	r16, 0x20	; 32
    5eb4:	17 e0       	ldi	r17, 0x07	; 7
    5eb6:	66 24       	eor	r6, r6
    5eb8:	63 94       	inc	r6
    5eba:	82 e0       	ldi	r24, 0x02	; 2
    5ebc:	78 2e       	mov	r7, r24
    5ebe:	b4 e0       	ldi	r27, 0x04	; 4
    5ec0:	8b 2e       	mov	r8, r27
    5ec2:	a8 e0       	ldi	r26, 0x08	; 8
    5ec4:	9a 2e       	mov	r9, r26
    5ec6:	f0 e2       	ldi	r31, 0x20	; 32
    5ec8:	ef 2e       	mov	r14, r31
    5eca:	f3 e0       	ldi	r31, 0x03	; 3
    5ecc:	ff 2e       	mov	r15, r31

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5ece:	c1 2c       	mov	r12, r1
    5ed0:	e7 e0       	ldi	r30, 0x07	; 7
    5ed2:	de 2e       	mov	r13, r30
    5ed4:	70 e2       	ldi	r23, 0x20	; 32
    5ed6:	a7 2e       	mov	r10, r23

void digitalToggle( uint8_t bit ) {
  // ignore write if out-ouf-bounds argument
  if (!(bit & ~3)) {
    // toggle the bit
    PORTK.OUTTGL = 1 << bit;
    5ed8:	f8 01       	movw	r30, r16
    5eda:	67 82       	std	Z+7, r6	; 0x07
    5edc:	77 82       	std	Z+7, r7	; 0x07
    5ede:	87 82       	std	Z+7, r8	; 0x07
    5ee0:	97 82       	std	Z+7, r9	; 0x07
    5ee2:	88 ee       	ldi	r24, 0xE8	; 232
    5ee4:	93 e0       	ldi	r25, 0x03	; 3
    5ee6:	f7 01       	movw	r30, r14
    5ee8:	31 97       	sbiw	r30, 0x01	; 1
    5eea:	f1 f7       	brne	.-4      	; 0x5ee8 <test_DIO+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5eec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5eee:	d9 f7       	brne	.-10     	; 0x5ee6 <test_DIO+0x46>
    digitalToggle(1);
    digitalToggle(2);
    digitalToggle(3);

		_delay_ms(100);			
    ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    5ef0:	8b 2d       	mov	r24, r11
    5ef2:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
    5ef6:	bc 01       	movw	r22, r24
    5ef8:	28 ee       	ldi	r18, 0xE8	; 232
    5efa:	33 e0       	ldi	r19, 0x03	; 3
    5efc:	f7 01       	movw	r30, r14
    5efe:	31 97       	sbiw	r30, 0x01	; 1
    5f00:	f1 f7       	brne	.-4      	; 0x5efe <test_DIO+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f02:	21 50       	subi	r18, 0x01	; 1
    5f04:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f06:	d1 f7       	brne	.-12     	; 0x5efc <test_DIO+0x5c>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    5f08:	81 e0       	ldi	r24, 0x01	; 1
    5f0a:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
    if (k % 2)
    5f0e:	c0 ff       	sbrs	r28, 0
    5f10:	02 c0       	rjmp	.+4      	; 0x5f16 <test_DIO+0x76>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5f12:	f6 01       	movw	r30, r12
    5f14:	a7 82       	std	Z+7, r10	; 0x07
    5f16:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
  int16_t ADC_val;
  uint8_t k;

  for (k = 0; k < 60; k++)
    5f18:	cc 33       	cpi	r28, 0x3C	; 60
    5f1a:	d1 05       	cpc	r29, r1
    5f1c:	e9 f6       	brne	.-70     	; 0x5ed8 <test_DIO+0x38>
		_delay_ms(100);			
    analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    if (k % 2)
    ledToggle(1);  //toggle LED, once per square wave pulse
  }
}
    5f1e:	cd b7       	in	r28, 0x3d	; 61
    5f20:	de b7       	in	r29, 0x3e	; 62
    5f22:	ee e0       	ldi	r30, 0x0E	; 14
    5f24:	0c 94 ae 51 	jmp	0xa35c	; 0xa35c <__epilogue_restores__+0x8>

00005f28 <SystemReset>:

void SystemReset(void) {
    5f28:	0f 93       	push	r16
    5f2a:	df 93       	push	r29
    5f2c:	cf 93       	push	r28
    5f2e:	0f 92       	push	r0
    5f30:	cd b7       	in	r28, 0x3d	; 61
    5f32:	de b7       	in	r29, 0x3e	; 62
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    5f34:	8f b7       	in	r24, 0x3f	; 63
    5f36:	89 83       	std	Y+1, r24	; 0x01
  cli();
    5f38:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    5f3a:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    5f3c:	21 e0       	ldi	r18, 0x01	; 1
    5f3e:	89 e7       	ldi	r24, 0x79	; 121
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	fc 01       	movw	r30, r24
    5f44:	08 ed       	ldi	r16, 0xD8	; 216
    5f46:	04 bf       	out	0x34, r16	; 52
    5f48:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    5f4a:	89 81       	ldd	r24, Y+1	; 0x01
    5f4c:	8f bf       	out	0x3f, r24	; 63
}

void SystemReset(void) {
  //issue software reset
  CCPWrite(&RST.CTRL, RST_SWRST_bm);
}
    5f4e:	0f 90       	pop	r0
    5f50:	cf 91       	pop	r28
    5f52:	df 91       	pop	r29
    5f54:	0f 91       	pop	r16
    5f56:	08 95       	ret

00005f58 <test_ADC>:

void test_ADC(uint8_t ch)
 { 
    5f58:	a0 e0       	ldi	r26, 0x00	; 0
    5f5a:	b0 e0       	ldi	r27, 0x00	; 0
    5f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    5f5e:	ff e2       	ldi	r31, 0x2F	; 47
    5f60:	0c 94 94 51 	jmp	0xa328	; 0xa328 <__prologue_saves__+0xc>
    5f64:	98 2e       	mov	r9, r24
    5f66:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    5f68:	40 ea       	ldi	r20, 0xA0	; 160
    5f6a:	a4 2e       	mov	r10, r20
    5f6c:	4f e0       	ldi	r20, 0x0F	; 15
    5f6e:	b4 2e       	mov	r11, r20
    5f70:	30 e8       	ldi	r19, 0x80	; 128
    5f72:	c3 2e       	mov	r12, r19
    5f74:	3e e3       	ldi	r19, 0x3E	; 62
    5f76:	d3 2e       	mov	r13, r19

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5f78:	e1 2c       	mov	r14, r1
    5f7a:	27 e0       	ldi	r18, 0x07	; 7
    5f7c:	f2 2e       	mov	r15, r18
    5f7e:	90 e2       	ldi	r25, 0x20	; 32
    5f80:	89 2e       	mov	r8, r25
    5f82:	1d c0       	rjmp	.+58     	; 0x5fbe <test_ADC+0x66>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    5f84:	14 36       	cpi	r17, 0x64	; 100
    5f86:	10 f4       	brcc	.+4      	; 0x5f8c <test_ADC+0x34>
    5f88:	be 01       	movw	r22, r28
    5f8a:	03 c0       	rjmp	.+6      	; 0x5f92 <test_ADC+0x3a>
    5f8c:	b5 01       	movw	r22, r10
    5f8e:	6c 1b       	sub	r22, r28
    5f90:	7d 0b       	sbc	r23, r29
			X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
			X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    5f92:	80 e0       	ldi	r24, 0x00	; 0
    5f94:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
			
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    5f98:	89 2d       	mov	r24, r9
    5f9a:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <analogRead>
    5f9e:	bc 01       	movw	r22, r24
			
            analogWrite(1, ADC_val);
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	0e 94 2a 2f 	call	0x5e54	; 0x5e54 <analogWrite>
    5fa6:	c6 01       	movw	r24, r12
    5fa8:	01 97       	sbiw	r24, 0x01	; 1
    5faa:	f1 f7       	brne	.-4      	; 0x5fa8 <test_ADC+0x50>
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    5fac:	1f 5f       	subi	r17, 0xFF	; 255
    5fae:	64 96       	adiw	r28, 0x14	; 20
    5fb0:	18 3c       	cpi	r17, 0xC8	; 200
    5fb2:	41 f7       	brne	.-48     	; 0x5f84 <test_ADC+0x2c>

void ledToggle( uint8_t led ) {
  // ignore write if out-ouf-bounds argument
  if (!(led & ~3)) {
    // toggle the led
    PORTJ.OUTTGL = 1 << 4 + led;
    5fb4:	f7 01       	movw	r30, r14
    5fb6:	87 82       	std	Z+7, r8	; 0x07
 { 
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    5fb8:	0f 5f       	subi	r16, 0xFF	; 255
    5fba:	0e 31       	cpi	r16, 0x1E	; 30
    5fbc:	21 f0       	breq	.+8      	; 0x5fc6 <test_ADC+0x6e>
    5fbe:	10 e0       	ldi	r17, 0x00	; 0
    5fc0:	c0 e0       	ldi	r28, 0x00	; 0
    5fc2:	d0 e0       	ldi	r29, 0x00	; 0
    5fc4:	df cf       	rjmp	.-66     	; 0x5f84 <test_ADC+0x2c>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    5fc6:	cd b7       	in	r28, 0x3d	; 61
    5fc8:	de b7       	in	r29, 0x3e	; 62
    5fca:	ec e0       	ldi	r30, 0x0C	; 12
    5fcc:	0c 94 b0 51 	jmp	0xa360	; 0xa360 <__epilogue_restores__+0xc>

00005fd0 <put_rc>:
    }
    
};

static
        void put_rc(FRESULT rc) {
    5fd0:	bc 01       	movw	r22, r24
    5fd2:	22 e6       	ldi	r18, 0x62	; 98
    5fd4:	33 e1       	ldi	r19, 0x13	; 19
    5fd6:	40 e0       	ldi	r20, 0x00	; 0
    5fd8:	50 e0       	ldi	r21, 0x00	; 0
    5fda:	08 c0       	rjmp	.+16     	; 0x5fec <put_rc+0x1c>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    5fdc:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    5fde:	2f 5f       	subi	r18, 0xFF	; 255
    5fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe2:	e4 91       	lpm	r30, Z+
    5fe4:	ee 23       	and	r30, r30
    5fe6:	d1 f7       	brne	.-12     	; 0x5fdc <put_rc+0xc>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++) {
    5fe8:	4f 5f       	subi	r20, 0xFF	; 255
    5fea:	5f 4f       	sbci	r21, 0xFF	; 255
    5fec:	46 17       	cp	r20, r22
    5fee:	57 07       	cpc	r21, r23
    5ff0:	21 f0       	breq	.+8      	; 0x5ffa <put_rc+0x2a>
    5ff2:	f9 01       	movw	r30, r18
    5ff4:	84 91       	lpm	r24, Z+
    5ff6:	88 23       	and	r24, r24
    5ff8:	89 f7       	brne	.-30     	; 0x5fdc <put_rc+0xc>
        while(pgm_read_byte_near(p++));
    }
    xprintf(PSTR("%S\n"), p);
    5ffa:	00 d0       	rcall	.+0      	; 0x5ffc <put_rc+0x2c>
    5ffc:	0f 92       	push	r0
    5ffe:	8e e5       	ldi	r24, 0x5E	; 94
    6000:	93 e1       	ldi	r25, 0x13	; 19
    6002:	ed b7       	in	r30, 0x3d	; 61
    6004:	fe b7       	in	r31, 0x3e	; 62
    6006:	81 83       	std	Z+1, r24	; 0x01
    6008:	92 83       	std	Z+2, r25	; 0x02
    600a:	23 83       	std	Z+3, r18	; 0x03
    600c:	34 83       	std	Z+4, r19	; 0x04
    600e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6012:	0f 90       	pop	r0
    6014:	0f 90       	pop	r0
    6016:	0f 90       	pop	r0
    6018:	0f 90       	pop	r0
}
    601a:	08 95       	ret

0000601c <verifyEEPage>:
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    601c:	a0 e0       	ldi	r26, 0x00	; 0
    601e:	b0 e0       	ldi	r27, 0x00	; 0
    6020:	e4 e1       	ldi	r30, 0x14	; 20
    6022:	f0 e3       	ldi	r31, 0x30	; 48
    6024:	0c 94 95 51 	jmp	0xa32a	; 0xa32a <__prologue_saves__+0xe>
    6028:	5c 01       	movw	r10, r24
    602a:	6a 01       	movw	r12, r20
    602c:	7b 01       	movw	r14, r22
    602e:	92 2e       	mov	r9, r18
    6030:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    6032:	84 e5       	ldi	r24, 0x54	; 84
    6034:	96 e1       	ldi	r25, 0x16	; 22
    6036:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    buff[0] = 'g';
    603a:	87 e6       	ldi	r24, 0x67	; 103
    603c:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    603e:	bb 27       	eor	r27, r27
    6040:	af 2d       	mov	r26, r15
    6042:	9e 2d       	mov	r25, r14
    6044:	8d 2d       	mov	r24, r13
    6046:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    6048:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    604a:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    604c:	85 e4       	ldi	r24, 0x45	; 69
    604e:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    6050:	c5 01       	movw	r24, r10
    6052:	60 e7       	ldi	r22, 0x70	; 112
    6054:	a8 01       	movw	r20, r16
    6056:	25 e0       	ldi	r18, 0x05	; 5
    6058:	09 2d       	mov	r16, r9
    605a:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    605e:	d5 01       	movw	r26, r10
    6060:	1d 96       	adiw	r26, 0x0d	; 13
    6062:	8c 91       	ld	r24, X
    6064:	1d 97       	sbiw	r26, 0x0d	; 13
    6066:	88 23       	and	r24, r24
    6068:	d1 f7       	brne	.-12     	; 0x605e <verifyEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    606a:	1e 96       	adiw	r26, 0x0e	; 14
    606c:	8c 91       	ld	r24, X
    606e:	1e 97       	sbiw	r26, 0x0e	; 14
    6070:	81 30       	cpi	r24, 0x01	; 1
    6072:	b9 f0       	breq	.+46     	; 0x60a2 <verifyEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    6074:	1e 96       	adiw	r26, 0x0e	; 14
    6076:	2c 91       	ld	r18, X
    6078:	00 d0       	rcall	.+0      	; 0x607a <verifyEEPage+0x5e>
    607a:	0f 92       	push	r0
    607c:	ed b7       	in	r30, 0x3d	; 61
    607e:	fe b7       	in	r31, 0x3e	; 62
    6080:	31 96       	adiw	r30, 0x01	; 1
    6082:	87 e3       	ldi	r24, 0x37	; 55
    6084:	96 e1       	ldi	r25, 0x16	; 22
    6086:	ad b7       	in	r26, 0x3d	; 61
    6088:	be b7       	in	r27, 0x3e	; 62
    608a:	11 96       	adiw	r26, 0x01	; 1
    608c:	8d 93       	st	X+, r24
    608e:	9c 93       	st	X, r25
    6090:	12 97       	sbiw	r26, 0x02	; 2
    6092:	22 83       	std	Z+2, r18	; 0x02
    6094:	13 82       	std	Z+3, r1	; 0x03
    6096:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    609a:	0f 90       	pop	r0
    609c:	0f 90       	pop	r0
    609e:	0f 90       	pop	r0
    60a0:	0f 90       	pop	r0
    60a2:	de 01       	movw	r26, r28
    60a4:	31 e0       	ldi	r19, 0x01	; 1
    60a6:	20 e0       	ldi	r18, 0x00	; 0
    60a8:	0d c0       	rjmp	.+26     	; 0x60c4 <verifyEEPage+0xa8>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    60aa:	e5 01       	movw	r28, r10
    60ac:	ed 81       	ldd	r30, Y+5	; 0x05
    60ae:	fe 81       	ldd	r31, Y+6	; 0x06
    60b0:	e2 0f       	add	r30, r18
    60b2:	f1 1d       	adc	r31, r1
    60b4:	90 81       	ld	r25, Z
    60b6:	15 96       	adiw	r26, 0x05	; 5
    60b8:	8c 91       	ld	r24, X
    60ba:	15 97       	sbiw	r26, 0x05	; 5
    60bc:	98 13       	cpse	r25, r24
    60be:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    60c0:	2f 5f       	subi	r18, 0xFF	; 255
    60c2:	11 96       	adiw	r26, 0x01	; 1
    60c4:	29 15       	cp	r18, r9
    60c6:	88 f3       	brcs	.-30     	; 0x60aa <verifyEEPage+0x8e>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    60c8:	83 2f       	mov	r24, r19
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	cd b7       	in	r28, 0x3d	; 61
    60ce:	de b7       	in	r29, 0x3e	; 62
    60d0:	eb e0       	ldi	r30, 0x0B	; 11
    60d2:	0c 94 b1 51 	jmp	0xa362	; 0xa362 <__epilogue_restores__+0xe>

000060d6 <readEEPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    }
}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    60d6:	a0 e0       	ldi	r26, 0x00	; 0
    60d8:	b0 e0       	ldi	r27, 0x00	; 0
    60da:	e1 e7       	ldi	r30, 0x71	; 113
    60dc:	f0 e3       	ldi	r31, 0x30	; 48
    60de:	0c 94 95 51 	jmp	0xa32a	; 0xa32a <__prologue_saves__+0xe>
    60e2:	5c 01       	movw	r10, r24
    60e4:	6a 01       	movw	r12, r20
    60e6:	7b 01       	movw	r14, r22
    60e8:	92 2e       	mov	r9, r18
    60ea:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    60ec:	83 e7       	ldi	r24, 0x73	; 115
    60ee:	96 e1       	ldi	r25, 0x16	; 22
    60f0:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    buff[0] = 'g';
    60f4:	87 e6       	ldi	r24, 0x67	; 103
    60f6:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    60f8:	bb 27       	eor	r27, r27
    60fa:	af 2d       	mov	r26, r15
    60fc:	9e 2d       	mov	r25, r14
    60fe:	8d 2d       	mov	r24, r13
    6100:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    6102:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize;
    6104:	9b 82       	std	Y+3, r9	; 0x03
    buff[4] = 'E';
    6106:	85 e4       	ldi	r24, 0x45	; 69
    6108:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    610a:	c5 01       	movw	r24, r10
    610c:	60 e7       	ldi	r22, 0x70	; 112
    610e:	a8 01       	movw	r20, r16
    6110:	25 e0       	ldi	r18, 0x05	; 5
    6112:	09 2d       	mov	r16, r9
    6114:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    6118:	d5 01       	movw	r26, r10
    611a:	1d 96       	adiw	r26, 0x0d	; 13
    611c:	8c 91       	ld	r24, X
    611e:	1d 97       	sbiw	r26, 0x0d	; 13
    6120:	88 23       	and	r24, r24
    6122:	d1 f7       	brne	.-12     	; 0x6118 <readEEPage+0x42>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    6124:	1e 96       	adiw	r26, 0x0e	; 14
    6126:	8c 91       	ld	r24, X
    6128:	1e 97       	sbiw	r26, 0x0e	; 14
    612a:	81 30       	cpi	r24, 0x01	; 1
    612c:	b9 f0       	breq	.+46     	; 0x615c <readEEPage+0x86>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    612e:	1e 96       	adiw	r26, 0x0e	; 14
    6130:	2c 91       	ld	r18, X
    6132:	00 d0       	rcall	.+0      	; 0x6134 <readEEPage+0x5e>
    6134:	0f 92       	push	r0
    6136:	ed b7       	in	r30, 0x3d	; 61
    6138:	fe b7       	in	r31, 0x3e	; 62
    613a:	31 96       	adiw	r30, 0x01	; 1
    613c:	86 e5       	ldi	r24, 0x56	; 86
    613e:	96 e1       	ldi	r25, 0x16	; 22
    6140:	ad b7       	in	r26, 0x3d	; 61
    6142:	be b7       	in	r27, 0x3e	; 62
    6144:	11 96       	adiw	r26, 0x01	; 1
    6146:	8d 93       	st	X+, r24
    6148:	9c 93       	st	X, r25
    614a:	12 97       	sbiw	r26, 0x02	; 2
    614c:	22 83       	std	Z+2, r18	; 0x02
    614e:	13 82       	std	Z+3, r1	; 0x03
    6150:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6154:	0f 90       	pop	r0
    6156:	0f 90       	pop	r0
    6158:	0f 90       	pop	r0
    615a:	0f 90       	pop	r0
    615c:	de 01       	movw	r26, r28
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	0a c0       	rjmp	.+20     	; 0x6176 <readEEPage+0xa0>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    6162:	e5 01       	movw	r28, r10
    6164:	ed 81       	ldd	r30, Y+5	; 0x05
    6166:	fe 81       	ldd	r31, Y+6	; 0x06
    6168:	e9 0f       	add	r30, r25
    616a:	f1 1d       	adc	r31, r1
    616c:	80 81       	ld	r24, Z
    616e:	14 96       	adiw	r26, 0x04	; 4
    6170:	8c 93       	st	X, r24
    6172:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    6174:	9f 5f       	subi	r25, 0xFF	; 255
    6176:	11 96       	adiw	r26, 0x01	; 1
    6178:	99 15       	cp	r25, r9
    617a:	98 f3       	brcs	.-26     	; 0x6162 <readEEPage+0x8c>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    617c:	cd b7       	in	r28, 0x3d	; 61
    617e:	de b7       	in	r29, 0x3e	; 62
    6180:	eb e0       	ldi	r30, 0x0B	; 11
    6182:	0c 94 b1 51 	jmp	0xa362	; 0xa362 <__epilogue_restores__+0xe>

00006186 <progEEPage>:
            match = 0;
    }
    return match;
}

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    6186:	a0 e0       	ldi	r26, 0x00	; 0
    6188:	b0 e0       	ldi	r27, 0x00	; 0
    618a:	e9 ec       	ldi	r30, 0xC9	; 201
    618c:	f0 e3       	ldi	r31, 0x30	; 48
    618e:	0c 94 97 51 	jmp	0xa32e	; 0xa32e <__prologue_saves__+0x12>
    6192:	ec 01       	movw	r28, r24
    6194:	6a 01       	movw	r12, r20
    6196:	7b 01       	movw	r14, r22
    6198:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    619a:	84 e9       	ldi	r24, 0x94	; 148
    619c:	96 e1       	ldi	r25, 0x16	; 22
    619e:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    buff[0] = 'B';
    61a2:	82 e4       	ldi	r24, 0x42	; 66
    61a4:	d8 01       	movw	r26, r16
    61a6:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    61a8:	bb 27       	eor	r27, r27
    61aa:	af 2d       	mov	r26, r15
    61ac:	9e 2d       	mov	r25, r14
    61ae:	8d 2d       	mov	r24, r13
    61b0:	f8 01       	movw	r30, r16
    61b2:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    61b4:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize;
    61b6:	b3 82       	std	Z+3, r11	; 0x03
    buff[4] = 'E';
    61b8:	85 e4       	ldi	r24, 0x45	; 69
    61ba:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    61bc:	f5 e0       	ldi	r31, 0x05	; 5
    61be:	bf 0e       	add	r11, r31
    61c0:	ce 01       	movw	r24, r28
    61c2:	60 e7       	ldi	r22, 0x70	; 112
    61c4:	a8 01       	movw	r20, r16
    61c6:	2b 2d       	mov	r18, r11
    61c8:	00 e0       	ldi	r16, 0x00	; 0
    61ca:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    61ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    61d0:	88 23       	and	r24, r24
    61d2:	e9 f7       	brne	.-6      	; 0x61ce <progEEPage+0x48>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    61d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    61d6:	81 30       	cpi	r24, 0x01	; 1
    61d8:	b1 f0       	breq	.+44     	; 0x6206 <progEEPage+0x80>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    61da:	2e 85       	ldd	r18, Y+14	; 0x0e
    61dc:	00 d0       	rcall	.+0      	; 0x61de <progEEPage+0x58>
    61de:	0f 92       	push	r0
    61e0:	ed b7       	in	r30, 0x3d	; 61
    61e2:	fe b7       	in	r31, 0x3e	; 62
    61e4:	31 96       	adiw	r30, 0x01	; 1
    61e6:	85 e7       	ldi	r24, 0x75	; 117
    61e8:	96 e1       	ldi	r25, 0x16	; 22
    61ea:	ad b7       	in	r26, 0x3d	; 61
    61ec:	be b7       	in	r27, 0x3e	; 62
    61ee:	11 96       	adiw	r26, 0x01	; 1
    61f0:	8d 93       	st	X+, r24
    61f2:	9c 93       	st	X, r25
    61f4:	12 97       	sbiw	r26, 0x02	; 2
    61f6:	22 83       	std	Z+2, r18	; 0x02
    61f8:	13 82       	std	Z+3, r1	; 0x03
    61fa:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    61fe:	0f 90       	pop	r0
    6200:	0f 90       	pop	r0
    6202:	0f 90       	pop	r0
    6204:	0f 90       	pop	r0
    }
}
    6206:	cd b7       	in	r28, 0x3d	; 61
    6208:	de b7       	in	r29, 0x3e	; 62
    620a:	e9 e0       	ldi	r30, 0x09	; 9
    620c:	0c 94 b3 51 	jmp	0xa366	; 0xa366 <__epilogue_restores__+0x12>

00006210 <verifyPage>:
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    6210:	a0 e0       	ldi	r26, 0x00	; 0
    6212:	b0 e0       	ldi	r27, 0x00	; 0
    6214:	ee e0       	ldi	r30, 0x0E	; 14
    6216:	f1 e3       	ldi	r31, 0x31	; 49
    6218:	0c 94 95 51 	jmp	0xa32a	; 0xa32a <__prologue_saves__+0xe>
    621c:	5c 01       	movw	r10, r24
    621e:	6a 01       	movw	r12, r20
    6220:	7b 01       	movw	r14, r22
    6222:	92 2e       	mov	r9, r18
    6224:	e8 01       	movw	r28, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    6226:	83 eb       	ldi	r24, 0xB3	; 179
    6228:	96 e1       	ldi	r25, 0x16	; 22
    622a:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    buff[0] = 'g';
    622e:	87 e6       	ldi	r24, 0x67	; 103
    6230:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    6232:	bb 27       	eor	r27, r27
    6234:	af 2d       	mov	r26, r15
    6236:	9e 2d       	mov	r25, r14
    6238:	8d 2d       	mov	r24, r13
    623a:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    623c:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    623e:	89 2d       	mov	r24, r9
    6240:	86 95       	lsr	r24
    6242:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    6244:	86 e4       	ldi	r24, 0x46	; 70
    6246:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    6248:	c5 01       	movw	r24, r10
    624a:	60 e7       	ldi	r22, 0x70	; 112
    624c:	a8 01       	movw	r20, r16
    624e:	25 e0       	ldi	r18, 0x05	; 5
    6250:	09 2d       	mov	r16, r9
    6252:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    6256:	d5 01       	movw	r26, r10
    6258:	1d 96       	adiw	r26, 0x0d	; 13
    625a:	8c 91       	ld	r24, X
    625c:	1d 97       	sbiw	r26, 0x0d	; 13
    625e:	88 23       	and	r24, r24
    6260:	d1 f7       	brne	.-12     	; 0x6256 <verifyPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    6262:	1e 96       	adiw	r26, 0x0e	; 14
    6264:	8c 91       	ld	r24, X
    6266:	1e 97       	sbiw	r26, 0x0e	; 14
    6268:	81 30       	cpi	r24, 0x01	; 1
    626a:	b9 f0       	breq	.+46     	; 0x629a <verifyPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    626c:	1e 96       	adiw	r26, 0x0e	; 14
    626e:	2c 91       	ld	r18, X
    6270:	00 d0       	rcall	.+0      	; 0x6272 <verifyPage+0x62>
    6272:	0f 92       	push	r0
    6274:	ed b7       	in	r30, 0x3d	; 61
    6276:	fe b7       	in	r31, 0x3e	; 62
    6278:	31 96       	adiw	r30, 0x01	; 1
    627a:	86 e9       	ldi	r24, 0x96	; 150
    627c:	96 e1       	ldi	r25, 0x16	; 22
    627e:	ad b7       	in	r26, 0x3d	; 61
    6280:	be b7       	in	r27, 0x3e	; 62
    6282:	11 96       	adiw	r26, 0x01	; 1
    6284:	8d 93       	st	X+, r24
    6286:	9c 93       	st	X, r25
    6288:	12 97       	sbiw	r26, 0x02	; 2
    628a:	22 83       	std	Z+2, r18	; 0x02
    628c:	13 82       	std	Z+3, r1	; 0x03
    628e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6292:	0f 90       	pop	r0
    6294:	0f 90       	pop	r0
    6296:	0f 90       	pop	r0
    6298:	0f 90       	pop	r0
    629a:	de 01       	movw	r26, r28
    629c:	31 e0       	ldi	r19, 0x01	; 1
    629e:	20 e0       	ldi	r18, 0x00	; 0
    62a0:	0d c0       	rjmp	.+26     	; 0x62bc <verifyPage+0xac>
    }
    match = 1;
    for (i = 0; i < psize; i++) {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    62a2:	e5 01       	movw	r28, r10
    62a4:	ed 81       	ldd	r30, Y+5	; 0x05
    62a6:	fe 81       	ldd	r31, Y+6	; 0x06
    62a8:	e2 0f       	add	r30, r18
    62aa:	f1 1d       	adc	r31, r1
    62ac:	90 81       	ld	r25, Z
    62ae:	15 96       	adiw	r26, 0x05	; 5
    62b0:	8c 91       	ld	r24, X
    62b2:	15 97       	sbiw	r26, 0x05	; 5
    62b4:	98 13       	cpse	r25, r24
    62b6:	30 e0       	ldi	r19, 0x00	; 0
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    match = 1;
    for (i = 0; i < psize; i++) {
    62b8:	2f 5f       	subi	r18, 0xFF	; 255
    62ba:	11 96       	adiw	r26, 0x01	; 1
    62bc:	29 15       	cp	r18, r9
    62be:	88 f3       	brcs	.-30     	; 0x62a2 <verifyPage+0x92>
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    62c0:	83 2f       	mov	r24, r19
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
    62c8:	eb e0       	ldi	r30, 0x0B	; 11
    62ca:	0c 94 b1 51 	jmp	0xa362	; 0xa362 <__epilogue_restores__+0xe>

000062ce <readPage>:
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    62ce:	a0 e0       	ldi	r26, 0x00	; 0
    62d0:	b0 e0       	ldi	r27, 0x00	; 0
    62d2:	ed e6       	ldi	r30, 0x6D	; 109
    62d4:	f1 e3       	ldi	r31, 0x31	; 49
    62d6:	0c 94 95 51 	jmp	0xa32a	; 0xa32a <__prologue_saves__+0xe>
    62da:	5c 01       	movw	r10, r24
    62dc:	6a 01       	movw	r12, r20
    62de:	7b 01       	movw	r14, r22
    62e0:	92 2e       	mov	r9, r18
    62e2:	e8 01       	movw	r28, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    62e4:	82 ed       	ldi	r24, 0xD2	; 210
    62e6:	96 e1       	ldi	r25, 0x16	; 22
    62e8:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    buff[0] = 'g';
    62ec:	87 e6       	ldi	r24, 0x67	; 103
    62ee:	88 83       	st	Y, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    62f0:	bb 27       	eor	r27, r27
    62f2:	af 2d       	mov	r26, r15
    62f4:	9e 2d       	mov	r25, r14
    62f6:	8d 2d       	mov	r24, r13
    62f8:	89 83       	std	Y+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    62fa:	ca 82       	std	Y+2, r12	; 0x02
    buff[3] = psize>>1;
    62fc:	89 2d       	mov	r24, r9
    62fe:	86 95       	lsr	r24
    6300:	8b 83       	std	Y+3, r24	; 0x03
    buff[4] = 'F';
    6302:	86 e4       	ldi	r24, 0x46	; 70
    6304:	8c 83       	std	Y+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    6306:	c5 01       	movw	r24, r10
    6308:	60 e7       	ldi	r22, 0x70	; 112
    630a:	a8 01       	movw	r20, r16
    630c:	25 e0       	ldi	r18, 0x05	; 5
    630e:	09 2d       	mov	r16, r9
    6310:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    6314:	d5 01       	movw	r26, r10
    6316:	1d 96       	adiw	r26, 0x0d	; 13
    6318:	8c 91       	ld	r24, X
    631a:	1d 97       	sbiw	r26, 0x0d	; 13
    631c:	88 23       	and	r24, r24
    631e:	d1 f7       	brne	.-12     	; 0x6314 <readPage+0x46>
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK) {
    6320:	1e 96       	adiw	r26, 0x0e	; 14
    6322:	8c 91       	ld	r24, X
    6324:	1e 97       	sbiw	r26, 0x0e	; 14
    6326:	81 30       	cpi	r24, 0x01	; 1
    6328:	b9 f0       	breq	.+46     	; 0x6358 <readPage+0x8a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    632a:	1e 96       	adiw	r26, 0x0e	; 14
    632c:	2c 91       	ld	r18, X
    632e:	00 d0       	rcall	.+0      	; 0x6330 <readPage+0x62>
    6330:	0f 92       	push	r0
    6332:	ed b7       	in	r30, 0x3d	; 61
    6334:	fe b7       	in	r31, 0x3e	; 62
    6336:	31 96       	adiw	r30, 0x01	; 1
    6338:	85 eb       	ldi	r24, 0xB5	; 181
    633a:	96 e1       	ldi	r25, 0x16	; 22
    633c:	ad b7       	in	r26, 0x3d	; 61
    633e:	be b7       	in	r27, 0x3e	; 62
    6340:	11 96       	adiw	r26, 0x01	; 1
    6342:	8d 93       	st	X+, r24
    6344:	9c 93       	st	X, r25
    6346:	12 97       	sbiw	r26, 0x02	; 2
    6348:	22 83       	std	Z+2, r18	; 0x02
    634a:	13 82       	std	Z+3, r1	; 0x03
    634c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6350:	0f 90       	pop	r0
    6352:	0f 90       	pop	r0
    6354:	0f 90       	pop	r0
    6356:	0f 90       	pop	r0
    6358:	de 01       	movw	r26, r28
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	0a c0       	rjmp	.+20     	; 0x6372 <readPage+0xa4>
    }
    
    for (i = 0; i < psize; i++) {
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    635e:	e5 01       	movw	r28, r10
    6360:	ed 81       	ldd	r30, Y+5	; 0x05
    6362:	fe 81       	ldd	r31, Y+6	; 0x06
    6364:	e9 0f       	add	r30, r25
    6366:	f1 1d       	adc	r31, r1
    6368:	80 81       	ld	r24, Z
    636a:	14 96       	adiw	r26, 0x04	; 4
    636c:	8c 93       	st	X, r24
    636e:	14 97       	sbiw	r26, 0x04	; 4
    }
    if (twi->result != TWIM_RESULT_OK) {
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    }
    
    for (i = 0; i < psize; i++) {
    6370:	9f 5f       	subi	r25, 0xFF	; 255
    6372:	11 96       	adiw	r26, 0x01	; 1
    6374:	99 15       	cp	r25, r9
    6376:	98 f3       	brcs	.-26     	; 0x635e <readPage+0x90>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    }
}
    6378:	cd b7       	in	r28, 0x3d	; 61
    637a:	de b7       	in	r29, 0x3e	; 62
    637c:	eb e0       	ldi	r30, 0x0B	; 11
    637e:	0c 94 b1 51 	jmp	0xa362	; 0xa362 <__epilogue_restores__+0xe>

00006382 <progPage>:
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    6382:	a0 e0       	ldi	r26, 0x00	; 0
    6384:	b0 e0       	ldi	r27, 0x00	; 0
    6386:	e7 ec       	ldi	r30, 0xC7	; 199
    6388:	f1 e3       	ldi	r31, 0x31	; 49
    638a:	0c 94 97 51 	jmp	0xa32e	; 0xa32e <__prologue_saves__+0x12>
    638e:	ec 01       	movw	r28, r24
    6390:	6a 01       	movw	r12, r20
    6392:	7b 01       	movw	r14, r22
    6394:	b2 2e       	mov	r11, r18
    xputs(PSTR("#"));
    6396:	82 ef       	ldi	r24, 0xF2	; 242
    6398:	96 e1       	ldi	r25, 0x16	; 22
    639a:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    639e:	82 e4       	ldi	r24, 0x42	; 66
    63a0:	d8 01       	movw	r26, r16
    63a2:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    63a4:	bb 27       	eor	r27, r27
    63a6:	af 2d       	mov	r26, r15
    63a8:	9e 2d       	mov	r25, r14
    63aa:	8d 2d       	mov	r24, r13
    63ac:	f8 01       	movw	r30, r16
    63ae:	81 83       	std	Z+1, r24	; 0x01
    buff[2] = (uint8_t)(paddr & 0xff);
    63b0:	c2 82       	std	Z+2, r12	; 0x02
    buff[3] = psize>>1;
    63b2:	8b 2d       	mov	r24, r11
    63b4:	86 95       	lsr	r24
    63b6:	83 83       	std	Z+3, r24	; 0x03
    buff[4] = 'F';
    63b8:	86 e4       	ldi	r24, 0x46	; 70
    63ba:	84 83       	std	Z+4, r24	; 0x04
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    63bc:	f5 e0       	ldi	r31, 0x05	; 5
    63be:	bf 0e       	add	r11, r31
    63c0:	ce 01       	movw	r24, r28
    63c2:	60 e7       	ldi	r22, 0x70	; 112
    63c4:	a8 01       	movw	r20, r16
    63c6:	2b 2d       	mov	r18, r11
    63c8:	00 e0       	ldi	r16, 0x00	; 0
    63ca:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY) {
    63ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    63d0:	88 23       	and	r24, r24
    63d2:	e9 f7       	brne	.-6      	; 0x63ce <progPage+0x4c>
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK) {
    63d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    63d6:	81 30       	cpi	r24, 0x01	; 1
    63d8:	b1 f0       	breq	.+44     	; 0x6406 <progPage+0x84>
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    63da:	2e 85       	ldd	r18, Y+14	; 0x0e
    63dc:	00 d0       	rcall	.+0      	; 0x63de <progPage+0x5c>
    63de:	0f 92       	push	r0
    63e0:	ed b7       	in	r30, 0x3d	; 61
    63e2:	fe b7       	in	r31, 0x3e	; 62
    63e4:	31 96       	adiw	r30, 0x01	; 1
    63e6:	84 ed       	ldi	r24, 0xD4	; 212
    63e8:	96 e1       	ldi	r25, 0x16	; 22
    63ea:	ad b7       	in	r26, 0x3d	; 61
    63ec:	be b7       	in	r27, 0x3e	; 62
    63ee:	11 96       	adiw	r26, 0x01	; 1
    63f0:	8d 93       	st	X+, r24
    63f2:	9c 93       	st	X, r25
    63f4:	12 97       	sbiw	r26, 0x02	; 2
    63f6:	22 83       	std	Z+2, r18	; 0x02
    63f8:	13 82       	std	Z+3, r1	; 0x03
    63fa:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    63fe:	0f 90       	pop	r0
    6400:	0f 90       	pop	r0
    6402:	0f 90       	pop	r0
    6404:	0f 90       	pop	r0
    }
}
    6406:	cd b7       	in	r28, 0x3d	; 61
    6408:	de b7       	in	r29, 0x3e	; 62
    640a:	e9 e0       	ldi	r30, 0x09	; 9
    640c:	0c 94 b3 51 	jmp	0xa366	; 0xa366 <__epilogue_restores__+0x12>

00006410 <ihex_readrec>:
    }
    xprintf(PSTR("%S\n"), p);
}

static
        int16_t ihex_readrec(ihexrec_t * ihex, char * rec) {
    6410:	af e0       	ldi	r26, 0x0F	; 15
    6412:	b0 e0       	ldi	r27, 0x00	; 0
    6414:	ee e0       	ldi	r30, 0x0E	; 14
    6416:	f2 e3       	ldi	r31, 0x32	; 50
    6418:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    641c:	7c 01       	movw	r14, r24
    641e:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    6420:	db 01       	movw	r26, r22
    6422:	0d 90       	ld	r0, X+
    6424:	00 20       	and	r0, r0
    6426:	e9 f7       	brne	.-6      	; 0x6422 <ihex_readrec+0x12>
    6428:	6d 01       	movw	r12, r26
    642a:	08 94       	sec
    642c:	c1 08       	sbc	r12, r1
    642e:	d1 08       	sbc	r13, r1
    6430:	c6 1a       	sub	r12, r22
    6432:	d7 0a       	sbc	r13, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    6434:	b3 e0       	ldi	r27, 0x03	; 3
    6436:	cb 16       	cp	r12, r27
    6438:	d1 04       	cpc	r13, r1
    643a:	0c f4       	brge	.+2      	; 0x643e <ihex_readrec+0x2e>
    643c:	f2 c0       	rjmp	.+484    	; 0x6622 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    643e:	fb 01       	movw	r30, r22
    6440:	81 81       	ldd	r24, Z+1	; 0x01
    6442:	8b 83       	std	Y+3, r24	; 0x03
    6444:	82 81       	ldd	r24, Z+2	; 0x02
    6446:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    6448:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    644a:	ce 01       	movw	r24, r28
    644c:	03 96       	adiw	r24, 0x03	; 3
    644e:	8c 87       	std	Y+12, r24	; 0x0c
    6450:	9d 87       	std	Y+13, r25	; 0x0d
    6452:	ce 01       	movw	r24, r28
    6454:	03 96       	adiw	r24, 0x03	; 3
    6456:	be 01       	movw	r22, r28
    6458:	6f 5f       	subi	r22, 0xFF	; 255
    645a:	7f 4f       	sbci	r23, 0xFF	; 255
    645c:	40 e1       	ldi	r20, 0x10	; 16
    645e:	50 e0       	ldi	r21, 0x00	; 0
    6460:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <strtoul>
    6464:	d7 01       	movw	r26, r14
    6466:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    6468:	e9 81       	ldd	r30, Y+1	; 0x01
    646a:	fa 81       	ldd	r31, Y+2	; 0x02
    646c:	8c 85       	ldd	r24, Y+12	; 0x0c
    646e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6470:	e8 17       	cp	r30, r24
    6472:	f9 07       	cpc	r31, r25
    6474:	09 f4       	brne	.+2      	; 0x6478 <ihex_readrec+0x68>
    6476:	d5 c0       	rjmp	.+426    	; 0x6622 <ihex_readrec+0x212>
    6478:	80 81       	ld	r24, Z
    647a:	88 23       	and	r24, r24
    647c:	09 f0       	breq	.+2      	; 0x6480 <ihex_readrec+0x70>
    647e:	d1 c0       	rjmp	.+418    	; 0x6622 <ihex_readrec+0x212>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    6480:	97 e0       	ldi	r25, 0x07	; 7
    6482:	c9 16       	cp	r12, r25
    6484:	d1 04       	cpc	r13, r1
    6486:	0c f4       	brge	.+2      	; 0x648a <ihex_readrec+0x7a>
    6488:	cc c0       	rjmp	.+408    	; 0x6622 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    648a:	d8 01       	movw	r26, r16
    648c:	13 96       	adiw	r26, 0x03	; 3
    648e:	8c 91       	ld	r24, X
    6490:	13 97       	sbiw	r26, 0x03	; 3
    6492:	8b 83       	std	Y+3, r24	; 0x03
    6494:	14 96       	adiw	r26, 0x04	; 4
    6496:	8c 91       	ld	r24, X
    6498:	14 97       	sbiw	r26, 0x04	; 4
    649a:	8c 83       	std	Y+4, r24	; 0x04
    649c:	15 96       	adiw	r26, 0x05	; 5
    649e:	8c 91       	ld	r24, X
    64a0:	15 97       	sbiw	r26, 0x05	; 5
    64a2:	8d 83       	std	Y+5, r24	; 0x05
    64a4:	16 96       	adiw	r26, 0x06	; 6
    64a6:	8c 91       	ld	r24, X
    64a8:	8e 83       	std	Y+6, r24	; 0x06
    buf[i] = 0;
    64aa:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    64ac:	ce 01       	movw	r24, r28
    64ae:	03 96       	adiw	r24, 0x03	; 3
    64b0:	be 01       	movw	r22, r28
    64b2:	6f 5f       	subi	r22, 0xFF	; 255
    64b4:	7f 4f       	sbci	r23, 0xFF	; 255
    64b6:	40 e1       	ldi	r20, 0x10	; 16
    64b8:	50 e0       	ldi	r21, 0x00	; 0
    64ba:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <strtoul>
    64be:	f7 01       	movw	r30, r14
    64c0:	61 83       	std	Z+1, r22	; 0x01
    64c2:	72 83       	std	Z+2, r23	; 0x02
    if (e == buf || *e != 0)
    64c4:	e9 81       	ldd	r30, Y+1	; 0x01
    64c6:	fa 81       	ldd	r31, Y+2	; 0x02
    64c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    64ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    64cc:	e8 17       	cp	r30, r24
    64ce:	f9 07       	cpc	r31, r25
    64d0:	09 f4       	brne	.+2      	; 0x64d4 <ihex_readrec+0xc4>
    64d2:	a7 c0       	rjmp	.+334    	; 0x6622 <ihex_readrec+0x212>
    64d4:	80 81       	ld	r24, Z
    64d6:	88 23       	and	r24, r24
    64d8:	09 f0       	breq	.+2      	; 0x64dc <ihex_readrec+0xcc>
    64da:	a3 c0       	rjmp	.+326    	; 0x6622 <ihex_readrec+0x212>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    64dc:	99 e0       	ldi	r25, 0x09	; 9
    64de:	c9 16       	cp	r12, r25
    64e0:	d1 04       	cpc	r13, r1
    64e2:	0c f4       	brge	.+2      	; 0x64e6 <ihex_readrec+0xd6>
    64e4:	9e c0       	rjmp	.+316    	; 0x6622 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    64e6:	d8 01       	movw	r26, r16
    64e8:	17 96       	adiw	r26, 0x07	; 7
    64ea:	8c 91       	ld	r24, X
    64ec:	17 97       	sbiw	r26, 0x07	; 7
    64ee:	8b 83       	std	Y+3, r24	; 0x03
    64f0:	18 96       	adiw	r26, 0x08	; 8
    64f2:	8c 91       	ld	r24, X
    64f4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    64f6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    64f8:	ce 01       	movw	r24, r28
    64fa:	03 96       	adiw	r24, 0x03	; 3
    64fc:	be 01       	movw	r22, r28
    64fe:	6f 5f       	subi	r22, 0xFF	; 255
    6500:	7f 4f       	sbci	r23, 0xFF	; 255
    6502:	40 e1       	ldi	r20, 0x10	; 16
    6504:	50 e0       	ldi	r21, 0x00	; 0
    6506:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <strtoul>
    650a:	f7 01       	movw	r30, r14
    650c:	63 83       	std	Z+3, r22	; 0x03
    if (e == buf || *e != 0)
    650e:	e9 81       	ldd	r30, Y+1	; 0x01
    6510:	fa 81       	ldd	r31, Y+2	; 0x02
    6512:	8c 85       	ldd	r24, Y+12	; 0x0c
    6514:	9d 85       	ldd	r25, Y+13	; 0x0d
    6516:	e8 17       	cp	r30, r24
    6518:	f9 07       	cpc	r31, r25
    651a:	09 f4       	brne	.+2      	; 0x651e <ihex_readrec+0x10e>
    651c:	82 c0       	rjmp	.+260    	; 0x6622 <ihex_readrec+0x212>
    651e:	80 81       	ld	r24, Z
    6520:	88 23       	and	r24, r24
    6522:	09 f0       	breq	.+2      	; 0x6526 <ihex_readrec+0x116>
    6524:	7e c0       	rjmp	.+252    	; 0x6622 <ihex_readrec+0x212>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    6526:	d7 01       	movw	r26, r14
    6528:	11 96       	adiw	r26, 0x01	; 1
    652a:	8c 91       	ld	r24, X
    652c:	11 97       	sbiw	r26, 0x01	; 1
    652e:	12 96       	adiw	r26, 0x02	; 2
    6530:	9c 91       	ld	r25, X
    6532:	12 97       	sbiw	r26, 0x02	; 2
    6534:	7c 90       	ld	r7, X
    6536:	78 0e       	add	r7, r24
    6538:	79 0e       	add	r7, r25
    653a:	76 0e       	add	r7, r22
    653c:	48 01       	movw	r8, r16
    653e:	17 01       	movw	r2, r14
    6540:	44 24       	eor	r4, r4
    6542:	55 24       	eor	r5, r5
    6544:	b9 e0       	ldi	r27, 0x09	; 9
    6546:	ab 2e       	mov	r10, r27
    6548:	b1 2c       	mov	r11, r1
        if (offset + 2 > len)
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    654a:	fe 01       	movw	r30, r28
    654c:	33 96       	adiw	r30, 0x03	; 3
    654e:	ee 87       	std	Y+14, r30	; 0x0e
    6550:	ff 87       	std	Y+15, r31	; 0x0f
    6552:	ce 01       	movw	r24, r28
    6554:	01 96       	adiw	r24, 0x01	; 1
    6556:	8b 87       	std	Y+11, r24	; 0x0b
    6558:	69 2e       	mov	r6, r25
    655a:	32 c0       	rjmp	.+100    	; 0x65c0 <ihex_readrec+0x1b0>
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
        if (offset + 2 > len)
    655c:	2c 15       	cp	r18, r12
    655e:	3d 05       	cpc	r19, r13
    6560:	0c f0       	brlt	.+2      	; 0x6564 <ihex_readrec+0x154>
    6562:	5f c0       	rjmp	.+190    	; 0x6622 <ihex_readrec+0x212>
            return -1;
        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    6564:	d4 01       	movw	r26, r8
    6566:	19 96       	adiw	r26, 0x09	; 9
    6568:	8c 91       	ld	r24, X
    656a:	19 97       	sbiw	r26, 0x09	; 9
    656c:	8b 83       	std	Y+3, r24	; 0x03
    656e:	1a 96       	adiw	r26, 0x0a	; 10
    6570:	8c 91       	ld	r24, X
    6572:	8c 83       	std	Y+4, r24	; 0x04
    6574:	e2 e0       	ldi	r30, 0x02	; 2
    6576:	f0 e0       	ldi	r31, 0x00	; 0
    6578:	ae 0e       	add	r10, r30
    657a:	bf 1e       	adc	r11, r31
        buf[i] = 0;
    657c:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    657e:	ce 01       	movw	r24, r28
    6580:	03 96       	adiw	r24, 0x03	; 3
    6582:	6b 85       	ldd	r22, Y+11	; 0x0b
    6584:	76 2d       	mov	r23, r6
    6586:	40 e1       	ldi	r20, 0x10	; 16
    6588:	50 e0       	ldi	r21, 0x00	; 0
    658a:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <strtoul>
    658e:	d1 01       	movw	r26, r2
    6590:	14 96       	adiw	r26, 0x04	; 4
    6592:	6c 93       	st	X, r22
        if (e == buf || *e != 0)
    6594:	e9 81       	ldd	r30, Y+1	; 0x01
    6596:	fa 81       	ldd	r31, Y+2	; 0x02
    6598:	8e 85       	ldd	r24, Y+14	; 0x0e
    659a:	9f 85       	ldd	r25, Y+15	; 0x0f
    659c:	e8 17       	cp	r30, r24
    659e:	f9 07       	cpc	r31, r25
    65a0:	09 f4       	brne	.+2      	; 0x65a4 <ihex_readrec+0x194>
    65a2:	3f c0       	rjmp	.+126    	; 0x6622 <ihex_readrec+0x212>
    65a4:	a2 e0       	ldi	r26, 0x02	; 2
    65a6:	b0 e0       	ldi	r27, 0x00	; 0
    65a8:	8a 0e       	add	r8, r26
    65aa:	9b 1e       	adc	r9, r27
    65ac:	08 94       	sec
    65ae:	21 1c       	adc	r2, r1
    65b0:	31 1c       	adc	r3, r1
    65b2:	80 81       	ld	r24, Z
    65b4:	88 23       	and	r24, r24
    65b6:	a9 f5       	brne	.+106    	; 0x6622 <ihex_readrec+0x212>
            return -1;
        cksum += ihex->data[j];
    65b8:	76 0e       	add	r7, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++) {
    65ba:	08 94       	sec
    65bc:	41 1c       	adc	r4, r1
    65be:	51 1c       	adc	r5, r1
    65c0:	f7 01       	movw	r30, r14
    65c2:	80 81       	ld	r24, Z
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	95 01       	movw	r18, r10
    65c8:	2f 5f       	subi	r18, 0xFF	; 255
    65ca:	3f 4f       	sbci	r19, 0xFF	; 255
    65cc:	48 16       	cp	r4, r24
    65ce:	59 06       	cpc	r5, r25
    65d0:	2c f2       	brlt	.-118    	; 0x655c <ihex_readrec+0x14c>
            return -1;
        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    65d2:	2c 15       	cp	r18, r12
    65d4:	3d 05       	cpc	r19, r13
    65d6:	2c f5       	brge	.+74     	; 0x6622 <ihex_readrec+0x212>
        return -1;
    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    65d8:	f8 01       	movw	r30, r16
    65da:	ea 0d       	add	r30, r10
    65dc:	fb 1d       	adc	r31, r11
    65de:	80 81       	ld	r24, Z
    65e0:	8b 83       	std	Y+3, r24	; 0x03
    65e2:	81 81       	ldd	r24, Z+1	; 0x01
    65e4:	8c 83       	std	Y+4, r24	; 0x04
    buf[i] = 0;
    65e6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    65e8:	8e 01       	movw	r16, r28
    65ea:	0d 5f       	subi	r16, 0xFD	; 253
    65ec:	1f 4f       	sbci	r17, 0xFF	; 255
    65ee:	c8 01       	movw	r24, r16
    65f0:	be 01       	movw	r22, r28
    65f2:	6f 5f       	subi	r22, 0xFF	; 255
    65f4:	7f 4f       	sbci	r23, 0xFF	; 255
    65f6:	40 e1       	ldi	r20, 0x10	; 16
    65f8:	50 e0       	ldi	r21, 0x00	; 0
    65fa:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <strtoul>
    65fe:	84 e0       	ldi	r24, 0x04	; 4
    6600:	91 e0       	ldi	r25, 0x01	; 1
    6602:	e8 0e       	add	r14, r24
    6604:	f9 1e       	adc	r15, r25
    6606:	d7 01       	movw	r26, r14
    6608:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    660a:	e9 81       	ldd	r30, Y+1	; 0x01
    660c:	fa 81       	ldd	r31, Y+2	; 0x02
    660e:	e0 17       	cp	r30, r16
    6610:	f1 07       	cpc	r31, r17
    6612:	39 f0       	breq	.+14     	; 0x6622 <ihex_readrec+0x212>
    6614:	80 81       	ld	r24, Z
    6616:	88 23       	and	r24, r24
    6618:	21 f4       	brne	.+8      	; 0x6622 <ihex_readrec+0x212>
        return -1;
    
    rc = -cksum & 0x000000ff;
    661a:	71 94       	neg	r7
    661c:	27 2d       	mov	r18, r7
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	02 c0       	rjmp	.+4      	; 0x6626 <ihex_readrec+0x216>
    
    return rc;
    6622:	2f ef       	ldi	r18, 0xFF	; 255
    6624:	3f ef       	ldi	r19, 0xFF	; 255
}
    6626:	c9 01       	movw	r24, r18
    6628:	2f 96       	adiw	r28, 0x0f	; 15
    662a:	e2 e1       	ldi	r30, 0x12	; 18
    662c:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

00006630 <eeprom_panel>:
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num) {
    6630:	a2 e9       	ldi	r26, 0x92	; 146
    6632:	b2 e0       	ldi	r27, 0x02	; 2
    6634:	ee e1       	ldi	r30, 0x1E	; 30
    6636:	f3 e3       	ldi	r31, 0x33	; 51
    6638:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    663c:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = chMap[panel_num];
    663e:	e8 2e       	mov	r14, r24
    6640:	ff 24       	eor	r15, r15
    6642:	f7 01       	movw	r30, r14
    6644:	e6 5b       	subi	r30, 0xB6	; 182
    6646:	f9 4d       	sbci	r31, 0xD9	; 217
    6648:	e0 81       	ld	r30, Z
    if (ch != 0){
    664a:	ee 23       	and	r30, r30
    664c:	09 f4       	brne	.+2      	; 0x6650 <eeprom_panel+0x20>
    664e:	eb c2       	rjmp	.+1494   	; 0x6c26 <eeprom_panel+0x5f6>
        
        switch (ch) {
    6650:	e3 30       	cpi	r30, 0x03	; 3
    6652:	71 f0       	breq	.+28     	; 0x6670 <eeprom_panel+0x40>
    6654:	e4 30       	cpi	r30, 0x04	; 4
    6656:	89 f0       	breq	.+34     	; 0x667a <eeprom_panel+0x4a>
    6658:	e2 30       	cpi	r30, 0x02	; 2
    665a:	29 f4       	brne	.+10     	; 0x6666 <eeprom_panel+0x36>
    665c:	8d e8       	ldi	r24, 0x8D	; 141
    665e:	88 2e       	mov	r8, r24
    6660:	88 e2       	ldi	r24, 0x28	; 40
    6662:	98 2e       	mov	r9, r24
    6664:	0e c0       	rjmp	.+28     	; 0x6682 <eeprom_panel+0x52>
    6666:	12 e9       	ldi	r17, 0x92	; 146
    6668:	81 2e       	mov	r8, r17
    666a:	15 e2       	ldi	r17, 0x25	; 37
    666c:	91 2e       	mov	r9, r17
    666e:	09 c0       	rjmp	.+18     	; 0x6682 <eeprom_panel+0x52>
    6670:	ba e3       	ldi	r27, 0x3A	; 58
    6672:	8b 2e       	mov	r8, r27
    6674:	b6 e2       	ldi	r27, 0x26	; 38
    6676:	9b 2e       	mov	r9, r27
    6678:	04 c0       	rjmp	.+8      	; 0x6682 <eeprom_panel+0x52>
            case 2:
                twi = &twi2;
                break;
            case 3:
                twi = &twi3;
                break;
    667a:	a6 eb       	ldi	r26, 0xB6	; 182
    667c:	8a 2e       	mov	r8, r26
    667e:	a4 e2       	ldi	r26, 0x24	; 36
    6680:	9a 2e       	mov	r9, r26
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file6, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    6682:	8f ee       	ldi	r24, 0xEF	; 239
    6684:	96 e2       	ldi	r25, 0x26	; 38
    6686:	6e ec       	ldi	r22, 0xCE	; 206
    6688:	73 e2       	ldi	r23, 0x23	; 35
    668a:	41 e0       	ldi	r20, 0x01	; 1
    668c:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
    6690:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    6692:	88 23       	and	r24, r24
    6694:	49 f0       	breq	.+18     	; 0x66a8 <eeprom_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    6696:	81 e4       	ldi	r24, 0x41	; 65
    6698:	93 e1       	ldi	r25, 0x13	; 19
    669a:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            put_rc(res);
    669e:	81 2f       	mov	r24, r17
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <put_rc>
    66a6:	3d c0       	rjmp	.+122    	; 0x6722 <eeprom_panel+0xf2>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    66a8:	00 d0       	rcall	.+0      	; 0x66aa <eeprom_panel+0x7a>
    66aa:	0f 92       	push	r0
    66ac:	8f e2       	ldi	r24, 0x2F	; 47
    66ae:	93 e1       	ldi	r25, 0x13	; 19
    66b0:	ad b7       	in	r26, 0x3d	; 61
    66b2:	be b7       	in	r27, 0x3e	; 62
    66b4:	11 96       	adiw	r26, 0x01	; 1
    66b6:	8d 93       	st	X+, r24
    66b8:	9c 93       	st	X, r25
    66ba:	12 97       	sbiw	r26, 0x02	; 2
    66bc:	13 96       	adiw	r26, 0x03	; 3
    66be:	ed 92       	st	X+, r14
    66c0:	fc 92       	st	X, r15
    66c2:	14 97       	sbiw	r26, 0x04	; 4
    66c4:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                pagebuff[0] = 0x00;
    66c8:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    66ce:	0f 90       	pop	r0
    66d0:	0f 90       	pop	r0
    66d2:	0f 90       	pop	r0
    66d4:	0f 90       	pop	r0
    66d6:	c4 01       	movw	r24, r8
    66d8:	60 2f       	mov	r22, r16
    66da:	ae 01       	movw	r20, r28
    66dc:	4f 5f       	subi	r20, 0xFF	; 255
    66de:	5f 4f       	sbci	r21, 0xFF	; 255
    66e0:	22 e0       	ldi	r18, 0x02	; 2
    66e2:	00 e0       	ldi	r16, 0x00	; 0
    66e4:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    66e8:	f4 01       	movw	r30, r8
    66ea:	85 85       	ldd	r24, Z+13	; 0x0d
    66ec:	88 23       	and	r24, r24
    66ee:	e1 f7       	brne	.-8      	; 0x66e8 <eeprom_panel+0xb8>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    66f0:	86 85       	ldd	r24, Z+14	; 0x0e
    66f2:	81 30       	cpi	r24, 0x01	; 1
    66f4:	b1 f0       	breq	.+44     	; 0x6722 <eeprom_panel+0xf2>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    66f6:	26 85       	ldd	r18, Z+14	; 0x0e
    66f8:	00 d0       	rcall	.+0      	; 0x66fa <eeprom_panel+0xca>
    66fa:	0f 92       	push	r0
    66fc:	ed b7       	in	r30, 0x3d	; 61
    66fe:	fe b7       	in	r31, 0x3e	; 62
    6700:	31 96       	adiw	r30, 0x01	; 1
    6702:	81 e1       	ldi	r24, 0x11	; 17
    6704:	93 e1       	ldi	r25, 0x13	; 19
    6706:	ad b7       	in	r26, 0x3d	; 61
    6708:	be b7       	in	r27, 0x3e	; 62
    670a:	11 96       	adiw	r26, 0x01	; 1
    670c:	8d 93       	st	X+, r24
    670e:	9c 93       	st	X, r25
    6710:	12 97       	sbiw	r26, 0x02	; 2
    6712:	22 83       	std	Z+2, r18	; 0x02
    6714:	13 82       	std	Z+3, r1	; 0x03
    6716:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    671a:	0f 90       	pop	r0
    671c:	0f 90       	pop	r0
    671e:	0f 90       	pop	r0
    6720:	0f 90       	pop	r0
    6722:	88 e8       	ldi	r24, 0x88	; 136
    6724:	93 e1       	ldi	r25, 0x13	; 19
    6726:	20 e2       	ldi	r18, 0x20	; 32
    6728:	33 e0       	ldi	r19, 0x03	; 3
    672a:	f9 01       	movw	r30, r18
    672c:	31 97       	sbiw	r30, 0x01	; 1
    672e:	f1 f7       	brne	.-4      	; 0x672c <eeprom_panel+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6730:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6732:	d9 f7       	brne	.-10     	; 0x672a <eeprom_panel+0xfa>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    6734:	84 e0       	ldi	r24, 0x04	; 4
    6736:	93 e1       	ldi	r25, 0x13	; 19
    6738:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    673c:	0f ef       	ldi	r16, 0xFF	; 255
    673e:	1f ef       	ldi	r17, 0xFF	; 255
    6740:	cc 24       	eor	r12, r12
    6742:	dd 24       	eor	r13, r13
    6744:	66 24       	eor	r6, r6
    6746:	77 24       	eor	r7, r7
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    6748:	f6 e8       	ldi	r31, 0x86	; 134
    674a:	4f 2e       	mov	r4, r31
    674c:	51 2c       	mov	r5, r1
    674e:	4c 0e       	add	r4, r28
    6750:	5d 1e       	adc	r5, r29
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;
            if (eepromBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    6752:	e6 e8       	ldi	r30, 0x86	; 134
    6754:	2e 2e       	mov	r2, r30
    6756:	e1 e0       	ldi	r30, 0x01	; 1
    6758:	3e 2e       	mov	r3, r30
    675a:	2c 0e       	add	r2, r28
    675c:	3d 1e       	adc	r3, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    675e:	f1 01       	movw	r30, r2
    6760:	34 96       	adiw	r30, 0x04	; 4
    6762:	c1 57       	subi	r28, 0x71	; 113
    6764:	dd 4f       	sbci	r29, 0xFD	; 253
    6766:	e8 83       	st	Y, r30
    6768:	f9 83       	std	Y+1, r31	; 0x01
    676a:	cf 58       	subi	r28, 0x8F	; 143
    676c:	d2 40       	sbci	r29, 0x02	; 2
    676e:	d6 c0       	rjmp	.+428    	; 0x691c <eeprom_panel+0x2ec>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
            lineno++;
    6770:	08 94       	sec
    6772:	61 1c       	adc	r6, r1
    6774:	71 1c       	adc	r7, r1
            len = strlen(eepromBuff);
    6776:	f2 01       	movw	r30, r4
    6778:	01 90       	ld	r0, Z+
    677a:	00 20       	and	r0, r0
    677c:	e9 f7       	brne	.-6      	; 0x6778 <eeprom_panel+0x148>
            if (eepromBuff[len-1] == '\n')
    677e:	32 97       	sbiw	r30, 0x02	; 2
    6780:	80 81       	ld	r24, Z
    6782:	8a 30       	cpi	r24, 0x0A	; 10
    6784:	09 f4       	brne	.+2      	; 0x6788 <eeprom_panel+0x158>
                eepromBuff[--len] = 0;
    6786:	10 82       	st	Z, r1
            if (eepromBuff[0] != ':')
    6788:	d2 01       	movw	r26, r4
    678a:	8c 91       	ld	r24, X
    678c:	8a 33       	cpi	r24, 0x3A	; 58
    678e:	09 f0       	breq	.+2      	; 0x6792 <eeprom_panel+0x162>
    6790:	c5 c0       	rjmp	.+394    	; 0x691c <eeprom_panel+0x2ec>
                continue;
            rc = ihex_readrec(&ihex, eepromBuff);
    6792:	c1 01       	movw	r24, r2
    6794:	b2 01       	movw	r22, r4
    6796:	0e 94 08 32 	call	0x6410	; 0x6410 <ihex_readrec>
    679a:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    679c:	c6 57       	subi	r28, 0x76	; 118
    679e:	dd 4f       	sbci	r29, 0xFD	; 253
    67a0:	88 81       	ld	r24, Y
    67a2:	ca 58       	subi	r28, 0x8A	; 138
    67a4:	d2 40       	sbci	r29, 0x02	; 2
    67a6:	f8 16       	cp	r15, r24
    67a8:	19 f1       	breq	.+70     	; 0x67f0 <eeprom_panel+0x1c0>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    67aa:	00 d0       	rcall	.+0      	; 0x67ac <eeprom_panel+0x17c>
    67ac:	0f 92       	push	r0
    67ae:	80 ed       	ldi	r24, 0xD0	; 208
    67b0:	92 e1       	ldi	r25, 0x12	; 18
    67b2:	ed b7       	in	r30, 0x3d	; 61
    67b4:	fe b7       	in	r31, 0x3e	; 62
    67b6:	81 83       	std	Z+1, r24	; 0x01
    67b8:	92 83       	std	Z+2, r25	; 0x02
    67ba:	63 82       	std	Z+3, r6	; 0x03
    67bc:	74 82       	std	Z+4, r7	; 0x04
    67be:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    67c2:	0f 92       	push	r0
    67c4:	0f 92       	push	r0
    67c6:	ed b7       	in	r30, 0x3d	; 61
    67c8:	fe b7       	in	r31, 0x3e	; 62
    67ca:	31 96       	adiw	r30, 0x01	; 1
    67cc:	85 ea       	ldi	r24, 0xA5	; 165
    67ce:	92 e1       	ldi	r25, 0x12	; 18
    67d0:	ad b7       	in	r26, 0x3d	; 61
    67d2:	be b7       	in	r27, 0x3e	; 62
    67d4:	11 96       	adiw	r26, 0x01	; 1
    67d6:	8d 93       	st	X+, r24
    67d8:	9c 93       	st	X, r25
    67da:	12 97       	sbiw	r26, 0x02	; 2
    67dc:	c6 57       	subi	r28, 0x76	; 118
    67de:	dd 4f       	sbci	r29, 0xFD	; 253
    67e0:	88 81       	ld	r24, Y
    67e2:	ca 58       	subi	r28, 0x8A	; 138
    67e4:	d2 40       	sbci	r29, 0x02	; 2
    67e6:	82 83       	std	Z+2, r24	; 0x02
    67e8:	13 82       	std	Z+3, r1	; 0x03
    67ea:	f4 82       	std	Z+4, r15	; 0x04
    67ec:	15 82       	std	Z+5, r1	; 0x05
    67ee:	83 c0       	rjmp	.+262    	; 0x68f6 <eeprom_panel+0x2c6>
                break;
            } else {
                if (ihex.rectyp == 0) {
    67f0:	d1 01       	movw	r26, r2
    67f2:	13 96       	adiw	r26, 0x03	; 3
    67f4:	2c 91       	ld	r18, X
    67f6:	13 97       	sbiw	r26, 0x03	; 3
    67f8:	22 23       	and	r18, r18
    67fa:	09 f0       	breq	.+2      	; 0x67fe <eeprom_panel+0x1ce>
    67fc:	53 c0       	rjmp	.+166    	; 0x68a4 <eeprom_panel+0x274>
                    // data record
                    nextaddr = ihex.loadofs;
    67fe:	11 96       	adiw	r26, 0x01	; 1
    6800:	ed 90       	ld	r14, X+
    6802:	fc 90       	ld	r15, X
    6804:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    6806:	57 01       	movw	r10, r14
    6808:	aa 0c       	add	r10, r10
    680a:	ab 2c       	mov	r10, r11
    680c:	aa 1c       	adc	r10, r10
    680e:	bb 08       	sbc	r11, r11
    6810:	b1 94       	neg	r11
    6812:	a0 16       	cp	r10, r16
    6814:	b1 06       	cpc	r11, r17
    6816:	c1 f0       	breq	.+48     	; 0x6848 <eeprom_panel+0x218>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    6818:	cd 14       	cp	r12, r13
    681a:	91 f0       	breq	.+36     	; 0x6840 <eeprom_panel+0x210>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    681c:	16 95       	lsr	r17
    681e:	10 2f       	mov	r17, r16
    6820:	00 27       	eor	r16, r16
    6822:	17 95       	ror	r17
    6824:	07 95       	ror	r16
    6826:	0c 0d       	add	r16, r12
    6828:	11 1d       	adc	r17, r1
    682a:	a8 01       	movw	r20, r16
    682c:	60 e0       	ldi	r22, 0x00	; 0
    682e:	70 e0       	ldi	r23, 0x00	; 0
    6830:	dc 18       	sub	r13, r12
    6832:	c4 01       	movw	r24, r8
    6834:	2d 2d       	mov	r18, r13
    6836:	8e 01       	movw	r16, r28
    6838:	0f 5f       	subi	r16, 0xFF	; 255
    683a:	1f 4f       	sbci	r17, 0xFF	; 255
    683c:	0e 94 c3 30 	call	0x6186	; 0x6186 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    6840:	5f e7       	ldi	r21, 0x7F	; 127
    6842:	d5 2e       	mov	r13, r21
    6844:	de 20       	and	r13, r14
    6846:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    6848:	4e 2d       	mov	r20, r14
    684a:	4f 77       	andi	r20, 0x7F	; 127
    684c:	4c 15       	cp	r20, r12
    684e:	08 f4       	brcc	.+2      	; 0x6852 <eeprom_panel+0x222>
    6850:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6852:	f1 01       	movw	r30, r2
    6854:	50 81       	ld	r21, Z
    6856:	25 2f       	mov	r18, r21
    6858:	30 e0       	ldi	r19, 0x00	; 0
    685a:	c1 57       	subi	r28, 0x71	; 113
    685c:	dd 4f       	sbci	r29, 0xFD	; 253
    685e:	a8 81       	ld	r26, Y
    6860:	b9 81       	ldd	r27, Y+1	; 0x01
    6862:	cf 58       	subi	r28, 0x8F	; 143
    6864:	d2 40       	sbci	r29, 0x02	; 2
    6866:	e4 2f       	mov	r30, r20
    6868:	f0 e0       	ldi	r31, 0x00	; 0
    686a:	35 96       	adiw	r30, 0x05	; 5
    686c:	81 e0       	ldi	r24, 0x01	; 1
    686e:	90 e0       	ldi	r25, 0x00	; 0
    6870:	8c 0f       	add	r24, r28
    6872:	9d 1f       	adc	r25, r29
    6874:	e8 0f       	add	r30, r24
    6876:	f9 1f       	adc	r31, r25
    6878:	2c 5f       	subi	r18, 0xFC	; 252
    687a:	3f 4f       	sbci	r19, 0xFF	; 255
    687c:	22 0d       	add	r18, r2
    687e:	33 1d       	adc	r19, r3
    6880:	02 c0       	rjmp	.+4      	; 0x6886 <eeprom_panel+0x256>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6882:	8d 91       	ld	r24, X+
    6884:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6886:	a2 17       	cp	r26, r18
    6888:	b3 07       	cpc	r27, r19
    688a:	d9 f7       	brne	.-10     	; 0x6882 <eeprom_panel+0x252>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    688c:	85 2f       	mov	r24, r21
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	84 0f       	add	r24, r20
    6892:	91 1d       	adc	r25, r1
    6894:	2d 2d       	mov	r18, r13
    6896:	30 e0       	ldi	r19, 0x00	; 0
    6898:	28 17       	cp	r18, r24
    689a:	39 07       	cpc	r19, r25
    689c:	f4 f5       	brge	.+124    	; 0x691a <eeprom_panel+0x2ea>
                        pageendaddr = pageoffset+ihex.reclen;
    689e:	d4 2e       	mov	r13, r20
    68a0:	d5 0e       	add	r13, r21
    68a2:	3b c0       	rjmp	.+118    	; 0x691a <eeprom_panel+0x2ea>
                } else if (ihex.rectyp == 1) {
    68a4:	21 30       	cpi	r18, 0x01	; 1
    68a6:	b1 f4       	brne	.+44     	; 0x68d4 <eeprom_panel+0x2a4>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    68a8:	cd 14       	cp	r12, r13
    68aa:	09 f4       	brne	.+2      	; 0x68ae <eeprom_panel+0x27e>
    68ac:	41 c0       	rjmp	.+130    	; 0x6930 <eeprom_panel+0x300>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    68ae:	16 95       	lsr	r17
    68b0:	10 2f       	mov	r17, r16
    68b2:	00 27       	eor	r16, r16
    68b4:	17 95       	ror	r17
    68b6:	07 95       	ror	r16
    68b8:	0c 0d       	add	r16, r12
    68ba:	11 1d       	adc	r17, r1
    68bc:	a8 01       	movw	r20, r16
    68be:	60 e0       	ldi	r22, 0x00	; 0
    68c0:	70 e0       	ldi	r23, 0x00	; 0
    68c2:	dc 18       	sub	r13, r12
    68c4:	c4 01       	movw	r24, r8
    68c6:	2d 2d       	mov	r18, r13
    68c8:	8e 01       	movw	r16, r28
    68ca:	0f 5f       	subi	r16, 0xFF	; 255
    68cc:	1f 4f       	sbci	r17, 0xFF	; 255
    68ce:	0e 94 c3 30 	call	0x6186	; 0x6186 <progEEPage>
    68d2:	2e c0       	rjmp	.+92     	; 0x6930 <eeprom_panel+0x300>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    68d4:	00 d0       	rcall	.+0      	; 0x68d6 <eeprom_panel+0x2a6>
    68d6:	00 d0       	rcall	.+0      	; 0x68d8 <eeprom_panel+0x2a8>
    68d8:	ed b7       	in	r30, 0x3d	; 61
    68da:	fe b7       	in	r31, 0x3e	; 62
    68dc:	31 96       	adiw	r30, 0x01	; 1
    68de:	83 e6       	ldi	r24, 0x63	; 99
    68e0:	92 e1       	ldi	r25, 0x12	; 18
    68e2:	ad b7       	in	r26, 0x3d	; 61
    68e4:	be b7       	in	r27, 0x3e	; 62
    68e6:	11 96       	adiw	r26, 0x01	; 1
    68e8:	8d 93       	st	X+, r24
    68ea:	9c 93       	st	X, r25
    68ec:	12 97       	sbiw	r26, 0x02	; 2
    68ee:	22 83       	std	Z+2, r18	; 0x02
    68f0:	13 82       	std	Z+3, r1	; 0x03
    68f2:	64 82       	std	Z+4, r6	; 0x04
    68f4:	75 82       	std	Z+5, r7	; 0x05
    68f6:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    68fa:	c5 57       	subi	r28, 0x75	; 117
    68fc:	dd 4f       	sbci	r29, 0xFD	; 253
    68fe:	48 82       	st	Y, r4
    6900:	cb 58       	subi	r28, 0x8B	; 139
    6902:	d2 40       	sbci	r29, 0x02	; 2
    6904:	c4 57       	subi	r28, 0x74	; 116
    6906:	dd 4f       	sbci	r29, 0xFD	; 253
    6908:	58 82       	st	Y, r5
    690a:	cc 58       	subi	r28, 0x8C	; 140
    690c:	d2 40       	sbci	r29, 0x02	; 2
    690e:	ed b7       	in	r30, 0x3d	; 61
    6910:	fe b7       	in	r31, 0x3e	; 62
    6912:	36 96       	adiw	r30, 0x06	; 6
    6914:	ed bf       	out	0x3d, r30	; 61
    6916:	fe bf       	out	0x3e, r31	; 62
    6918:	15 c0       	rjmp	.+42     	; 0x6944 <eeprom_panel+0x314>
                            ihex.rectyp, lineno);
                    break;
    691a:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    691c:	c2 01       	movw	r24, r4
    691e:	60 e0       	ldi	r22, 0x00	; 0
    6920:	71 e0       	ldi	r23, 0x01	; 1
    6922:	4f ee       	ldi	r20, 0xEF	; 239
    6924:	56 e2       	ldi	r21, 0x26	; 38
    6926:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <f_gets>
    692a:	89 2b       	or	r24, r25
    692c:	09 f0       	breq	.+2      	; 0x6930 <eeprom_panel+0x300>
    692e:	20 cf       	rjmp	.-448    	; 0x6770 <eeprom_panel+0x140>
    6930:	c5 57       	subi	r28, 0x75	; 117
    6932:	dd 4f       	sbci	r29, 0xFD	; 253
    6934:	48 82       	st	Y, r4
    6936:	cb 58       	subi	r28, 0x8B	; 139
    6938:	d2 40       	sbci	r29, 0x02	; 2
    693a:	c4 57       	subi	r28, 0x74	; 116
    693c:	dd 4f       	sbci	r29, 0xFD	; 253
    693e:	58 82       	st	Y, r5
    6940:	cc 58       	subi	r28, 0x8C	; 140
    6942:	d2 40       	sbci	r29, 0x02	; 2
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file6, 0);
    6944:	8f ee       	ldi	r24, 0xEF	; 239
    6946:	96 e2       	ldi	r25, 0x26	; 38
    6948:	40 e0       	ldi	r20, 0x00	; 0
    694a:	50 e0       	ldi	r21, 0x00	; 0
    694c:	60 e0       	ldi	r22, 0x00	; 0
    694e:	70 e0       	ldi	r23, 0x00	; 0
    6950:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
    6954:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    6956:	88 23       	and	r24, r24
    6958:	49 f0       	breq	.+18     	; 0x696c <eeprom_panel+0x33c>
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    695a:	85 e4       	ldi	r24, 0x45	; 69
    695c:	92 e1       	ldi	r25, 0x12	; 18
    695e:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            put_rc(res);
    6962:	81 2f       	mov	r24, r17
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <put_rc>
    696a:	35 c1       	rjmp	.+618    	; 0x6bd6 <eeprom_panel+0x5a6>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    696c:	88 e3       	ldi	r24, 0x38	; 56
    696e:	92 e1       	ldi	r25, 0x12	; 18
    6970:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    6974:	cc 24       	eor	r12, r12
    6976:	ca 94       	dec	r12
    6978:	dc 2c       	mov	r13, r12
    697a:	00 e0       	ldi	r16, 0x00	; 0
    697c:	10 e0       	ldi	r17, 0x00	; 0
    697e:	66 24       	eor	r6, r6
    6980:	77 24       	eor	r7, r7
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
                len = strlen(eepromBuff);
    6982:	ce 01       	movw	r24, r28
    6984:	8a 57       	subi	r24, 0x7A	; 122
    6986:	9f 4f       	sbci	r25, 0xFF	; 255
    6988:	cf 56       	subi	r28, 0x6F	; 111
    698a:	dd 4f       	sbci	r29, 0xFD	; 253
    698c:	88 83       	st	Y, r24
    698e:	99 83       	std	Y+1, r25	; 0x01
    6990:	c1 59       	subi	r28, 0x91	; 145
    6992:	d2 40       	sbci	r29, 0x02	; 2
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;
                if (eepromBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    6994:	36 e8       	ldi	r19, 0x86	; 134
    6996:	23 2e       	mov	r2, r19
    6998:	31 e0       	ldi	r19, 0x01	; 1
    699a:	33 2e       	mov	r3, r19
    699c:	2c 0e       	add	r2, r28
    699e:	3d 1e       	adc	r3, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    69a0:	d1 01       	movw	r26, r2
    69a2:	14 96       	adiw	r26, 0x04	; 4
    69a4:	c3 57       	subi	r28, 0x73	; 115
    69a6:	dd 4f       	sbci	r29, 0xFD	; 253
    69a8:	a8 83       	st	Y, r26
    69aa:	b9 83       	std	Y+1, r27	; 0x01
    69ac:	cd 58       	subi	r28, 0x8D	; 141
    69ae:	d2 40       	sbci	r29, 0x02	; 2
    69b0:	ff c0       	rjmp	.+510    	; 0x6bb0 <eeprom_panel+0x580>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
                lineno++;
    69b2:	08 94       	sec
    69b4:	61 1c       	adc	r6, r1
    69b6:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    69b8:	cf 56       	subi	r28, 0x6F	; 111
    69ba:	dd 4f       	sbci	r29, 0xFD	; 253
    69bc:	e8 81       	ld	r30, Y
    69be:	f9 81       	ldd	r31, Y+1	; 0x01
    69c0:	c1 59       	subi	r28, 0x91	; 145
    69c2:	d2 40       	sbci	r29, 0x02	; 2
    69c4:	01 90       	ld	r0, Z+
    69c6:	00 20       	and	r0, r0
    69c8:	e9 f7       	brne	.-6      	; 0x69c4 <eeprom_panel+0x394>
                if (eepromBuff[len-1] == '\n')
    69ca:	32 97       	sbiw	r30, 0x02	; 2
    69cc:	80 81       	ld	r24, Z
    69ce:	8a 30       	cpi	r24, 0x0A	; 10
    69d0:	09 f4       	brne	.+2      	; 0x69d4 <eeprom_panel+0x3a4>
                    eepromBuff[--len] = 0;
    69d2:	10 82       	st	Z, r1
                if (eepromBuff[0] != ':')
    69d4:	ca 57       	subi	r28, 0x7A	; 122
    69d6:	df 4f       	sbci	r29, 0xFF	; 255
    69d8:	88 81       	ld	r24, Y
    69da:	c6 58       	subi	r28, 0x86	; 134
    69dc:	d0 40       	sbci	r29, 0x00	; 0
    69de:	8a 33       	cpi	r24, 0x3A	; 58
    69e0:	09 f0       	breq	.+2      	; 0x69e4 <eeprom_panel+0x3b4>
    69e2:	e6 c0       	rjmp	.+460    	; 0x6bb0 <eeprom_panel+0x580>
                    continue;
                rc = ihex_readrec(&ihex, eepromBuff);
    69e4:	c1 01       	movw	r24, r2
    69e6:	b2 01       	movw	r22, r4
    69e8:	0e 94 08 32 	call	0x6410	; 0x6410 <ihex_readrec>
    69ec:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    69ee:	c6 57       	subi	r28, 0x76	; 118
    69f0:	dd 4f       	sbci	r29, 0xFD	; 253
    69f2:	88 81       	ld	r24, Y
    69f4:	ca 58       	subi	r28, 0x8A	; 138
    69f6:	d2 40       	sbci	r29, 0x02	; 2
    69f8:	f8 16       	cp	r15, r24
    69fa:	19 f1       	breq	.+70     	; 0x6a42 <eeprom_panel+0x412>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    69fc:	00 d0       	rcall	.+0      	; 0x69fe <eeprom_panel+0x3ce>
    69fe:	0f 92       	push	r0
    6a00:	85 e0       	ldi	r24, 0x05	; 5
    6a02:	92 e1       	ldi	r25, 0x12	; 18
    6a04:	ed b7       	in	r30, 0x3d	; 61
    6a06:	fe b7       	in	r31, 0x3e	; 62
    6a08:	81 83       	std	Z+1, r24	; 0x01
    6a0a:	92 83       	std	Z+2, r25	; 0x02
    6a0c:	63 82       	std	Z+3, r6	; 0x03
    6a0e:	74 82       	std	Z+4, r7	; 0x04
    6a10:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    6a14:	0f 92       	push	r0
    6a16:	0f 92       	push	r0
    6a18:	ed b7       	in	r30, 0x3d	; 61
    6a1a:	fe b7       	in	r31, 0x3e	; 62
    6a1c:	31 96       	adiw	r30, 0x01	; 1
    6a1e:	8a ed       	ldi	r24, 0xDA	; 218
    6a20:	91 e1       	ldi	r25, 0x11	; 17
    6a22:	ad b7       	in	r26, 0x3d	; 61
    6a24:	be b7       	in	r27, 0x3e	; 62
    6a26:	11 96       	adiw	r26, 0x01	; 1
    6a28:	8d 93       	st	X+, r24
    6a2a:	9c 93       	st	X, r25
    6a2c:	12 97       	sbiw	r26, 0x02	; 2
    6a2e:	c6 57       	subi	r28, 0x76	; 118
    6a30:	dd 4f       	sbci	r29, 0xFD	; 253
    6a32:	88 81       	ld	r24, Y
    6a34:	ca 58       	subi	r28, 0x8A	; 138
    6a36:	d2 40       	sbci	r29, 0x02	; 2
    6a38:	82 83       	std	Z+2, r24	; 0x02
    6a3a:	13 82       	std	Z+3, r1	; 0x03
    6a3c:	f4 82       	std	Z+4, r15	; 0x04
    6a3e:	15 82       	std	Z+5, r1	; 0x05
    6a40:	ae c0       	rjmp	.+348    	; 0x6b9e <eeprom_panel+0x56e>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    6a42:	d1 01       	movw	r26, r2
    6a44:	13 96       	adiw	r26, 0x03	; 3
    6a46:	2c 91       	ld	r18, X
    6a48:	13 97       	sbiw	r26, 0x03	; 3
    6a4a:	22 23       	and	r18, r18
    6a4c:	09 f0       	breq	.+2      	; 0x6a50 <eeprom_panel+0x420>
    6a4e:	65 c0       	rjmp	.+202    	; 0x6b1a <eeprom_panel+0x4ea>
                        // data record
                        nextaddr = ihex.loadofs;
    6a50:	11 96       	adiw	r26, 0x01	; 1
    6a52:	ed 90       	ld	r14, X+
    6a54:	fc 90       	ld	r15, X
    6a56:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    6a58:	57 01       	movw	r10, r14
    6a5a:	aa 0c       	add	r10, r10
    6a5c:	ab 2c       	mov	r10, r11
    6a5e:	aa 1c       	adc	r10, r10
    6a60:	bb 08       	sbc	r11, r11
    6a62:	b1 94       	neg	r11
    6a64:	ac 14       	cp	r10, r12
    6a66:	bd 04       	cpc	r11, r13
    6a68:	49 f1       	breq	.+82     	; 0x6abc <eeprom_panel+0x48c>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    6a6a:	01 17       	cp	r16, r17
    6a6c:	21 f1       	breq	.+72     	; 0x6ab6 <eeprom_panel+0x486>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    6a6e:	a6 01       	movw	r20, r12
    6a70:	56 95       	lsr	r21
    6a72:	54 2f       	mov	r21, r20
    6a74:	44 27       	eor	r20, r20
    6a76:	57 95       	ror	r21
    6a78:	47 95       	ror	r20
    6a7a:	40 0f       	add	r20, r16
    6a7c:	51 1d       	adc	r21, r1
    6a7e:	60 e0       	ldi	r22, 0x00	; 0
    6a80:	70 e0       	ldi	r23, 0x00	; 0
    6a82:	10 1b       	sub	r17, r16
    6a84:	c4 01       	movw	r24, r8
    6a86:	21 2f       	mov	r18, r17
    6a88:	8e 01       	movw	r16, r28
    6a8a:	0f 5f       	subi	r16, 0xFF	; 255
    6a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    6a8e:	0e 94 0e 30 	call	0x601c	; 0x601c <verifyEEPage>
    6a92:	89 2b       	or	r24, r25
    6a94:	81 f4       	brne	.+32     	; 0x6ab6 <eeprom_panel+0x486>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    6a96:	00 d0       	rcall	.+0      	; 0x6a98 <eeprom_panel+0x468>
    6a98:	0f 92       	push	r0
    6a9a:	8d eb       	ldi	r24, 0xBD	; 189
    6a9c:	91 e1       	ldi	r25, 0x11	; 17
    6a9e:	ed b7       	in	r30, 0x3d	; 61
    6aa0:	fe b7       	in	r31, 0x3e	; 62
    6aa2:	81 83       	std	Z+1, r24	; 0x01
    6aa4:	92 83       	std	Z+2, r25	; 0x02
    6aa6:	c3 82       	std	Z+3, r12	; 0x03
    6aa8:	d4 82       	std	Z+4, r13	; 0x04
    6aaa:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6aae:	0f 90       	pop	r0
    6ab0:	0f 90       	pop	r0
    6ab2:	0f 90       	pop	r0
    6ab4:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    6ab6:	1e 2d       	mov	r17, r14
    6ab8:	1f 77       	andi	r17, 0x7F	; 127
    6aba:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    6abc:	4e 2d       	mov	r20, r14
    6abe:	4f 77       	andi	r20, 0x7F	; 127
    6ac0:	40 17       	cp	r20, r16
    6ac2:	08 f4       	brcc	.+2      	; 0x6ac6 <eeprom_panel+0x496>
    6ac4:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    6ac6:	d1 01       	movw	r26, r2
    6ac8:	5c 91       	ld	r21, X
    6aca:	25 2f       	mov	r18, r21
    6acc:	30 e0       	ldi	r19, 0x00	; 0
    6ace:	c3 57       	subi	r28, 0x73	; 115
    6ad0:	dd 4f       	sbci	r29, 0xFD	; 253
    6ad2:	a8 81       	ld	r26, Y
    6ad4:	b9 81       	ldd	r27, Y+1	; 0x01
    6ad6:	cd 58       	subi	r28, 0x8D	; 141
    6ad8:	d2 40       	sbci	r29, 0x02	; 2
    6ada:	e4 2f       	mov	r30, r20
    6adc:	f0 e0       	ldi	r31, 0x00	; 0
    6ade:	35 96       	adiw	r30, 0x05	; 5
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	90 e0       	ldi	r25, 0x00	; 0
    6ae4:	8c 0f       	add	r24, r28
    6ae6:	9d 1f       	adc	r25, r29
    6ae8:	e8 0f       	add	r30, r24
    6aea:	f9 1f       	adc	r31, r25
    6aec:	2c 5f       	subi	r18, 0xFC	; 252
    6aee:	3f 4f       	sbci	r19, 0xFF	; 255
    6af0:	22 0d       	add	r18, r2
    6af2:	33 1d       	adc	r19, r3
    6af4:	02 c0       	rjmp	.+4      	; 0x6afa <eeprom_panel+0x4ca>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6af6:	8d 91       	ld	r24, X+
    6af8:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    6afa:	a2 17       	cp	r26, r18
    6afc:	b3 07       	cpc	r27, r19
    6afe:	d9 f7       	brne	.-10     	; 0x6af6 <eeprom_panel+0x4c6>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    6b00:	85 2f       	mov	r24, r21
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	84 0f       	add	r24, r20
    6b06:	91 1d       	adc	r25, r1
    6b08:	21 2f       	mov	r18, r17
    6b0a:	30 e0       	ldi	r19, 0x00	; 0
    6b0c:	28 17       	cp	r18, r24
    6b0e:	39 07       	cpc	r19, r25
    6b10:	0c f0       	brlt	.+2      	; 0x6b14 <eeprom_panel+0x4e4>
    6b12:	4d c0       	rjmp	.+154    	; 0x6bae <eeprom_panel+0x57e>
                            pageendaddr = pageoffset+ihex.reclen;
    6b14:	14 2f       	mov	r17, r20
    6b16:	15 0f       	add	r17, r21
    6b18:	4a c0       	rjmp	.+148    	; 0x6bae <eeprom_panel+0x57e>
                    } else if (ihex.rectyp == 1) {
    6b1a:	21 30       	cpi	r18, 0x01	; 1
    6b1c:	79 f5       	brne	.+94     	; 0x6b7c <eeprom_panel+0x54c>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    6b1e:	01 17       	cp	r16, r17
    6b20:	41 f1       	breq	.+80     	; 0x6b72 <eeprom_panel+0x542>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0) {
    6b22:	a6 01       	movw	r20, r12
    6b24:	56 95       	lsr	r21
    6b26:	54 2f       	mov	r21, r20
    6b28:	44 27       	eor	r20, r20
    6b2a:	57 95       	ror	r21
    6b2c:	47 95       	ror	r20
    6b2e:	40 0f       	add	r20, r16
    6b30:	51 1d       	adc	r21, r1
    6b32:	60 e0       	ldi	r22, 0x00	; 0
    6b34:	70 e0       	ldi	r23, 0x00	; 0
    6b36:	10 1b       	sub	r17, r16
    6b38:	c4 01       	movw	r24, r8
    6b3a:	21 2f       	mov	r18, r17
    6b3c:	8e 01       	movw	r16, r28
    6b3e:	0f 5f       	subi	r16, 0xFF	; 255
    6b40:	1f 4f       	sbci	r17, 0xFF	; 255
    6b42:	0e 94 0e 30 	call	0x601c	; 0x601c <verifyEEPage>
    6b46:	89 2b       	or	r24, r25
    6b48:	a1 f4       	brne	.+40     	; 0x6b72 <eeprom_panel+0x542>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    6b4a:	00 d0       	rcall	.+0      	; 0x6b4c <eeprom_panel+0x51c>
    6b4c:	0f 92       	push	r0
    6b4e:	80 ea       	ldi	r24, 0xA0	; 160
    6b50:	91 e1       	ldi	r25, 0x11	; 17
    6b52:	ad b7       	in	r26, 0x3d	; 61
    6b54:	be b7       	in	r27, 0x3e	; 62
    6b56:	11 96       	adiw	r26, 0x01	; 1
    6b58:	8d 93       	st	X+, r24
    6b5a:	9c 93       	st	X, r25
    6b5c:	12 97       	sbiw	r26, 0x02	; 2
    6b5e:	13 96       	adiw	r26, 0x03	; 3
    6b60:	cd 92       	st	X+, r12
    6b62:	dc 92       	st	X, r13
    6b64:	14 97       	sbiw	r26, 0x04	; 4
    6b66:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6b6a:	0f 90       	pop	r0
    6b6c:	0f 90       	pop	r0
    6b6e:	0f 90       	pop	r0
    6b70:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    6b72:	8e e9       	ldi	r24, 0x9E	; 158
    6b74:	91 e1       	ldi	r25, 0x11	; 17
    6b76:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    6b7a:	2d c0       	rjmp	.+90     	; 0x6bd6 <eeprom_panel+0x5a6>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    6b7c:	00 d0       	rcall	.+0      	; 0x6b7e <eeprom_panel+0x54e>
    6b7e:	00 d0       	rcall	.+0      	; 0x6b80 <eeprom_panel+0x550>
    6b80:	ed b7       	in	r30, 0x3d	; 61
    6b82:	fe b7       	in	r31, 0x3e	; 62
    6b84:	31 96       	adiw	r30, 0x01	; 1
    6b86:	8d e5       	ldi	r24, 0x5D	; 93
    6b88:	91 e1       	ldi	r25, 0x11	; 17
    6b8a:	ad b7       	in	r26, 0x3d	; 61
    6b8c:	be b7       	in	r27, 0x3e	; 62
    6b8e:	11 96       	adiw	r26, 0x01	; 1
    6b90:	8d 93       	st	X+, r24
    6b92:	9c 93       	st	X, r25
    6b94:	12 97       	sbiw	r26, 0x02	; 2
    6b96:	22 83       	std	Z+2, r18	; 0x02
    6b98:	13 82       	std	Z+3, r1	; 0x03
    6b9a:	64 82       	std	Z+4, r6	; 0x04
    6b9c:	75 82       	std	Z+5, r7	; 0x05
    6b9e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6ba2:	ed b7       	in	r30, 0x3d	; 61
    6ba4:	fe b7       	in	r31, 0x3e	; 62
    6ba6:	36 96       	adiw	r30, 0x06	; 6
    6ba8:	ed bf       	out	0x3d, r30	; 61
    6baa:	fe bf       	out	0x3e, r31	; 62
    6bac:	14 c0       	rjmp	.+40     	; 0x6bd6 <eeprom_panel+0x5a6>
                                ihex.rectyp, lineno);
                        break;
    6bae:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &file6) != NULL) {
    6bb0:	c5 57       	subi	r28, 0x75	; 117
    6bb2:	dd 4f       	sbci	r29, 0xFD	; 253
    6bb4:	88 81       	ld	r24, Y
    6bb6:	cb 58       	subi	r28, 0x8B	; 139
    6bb8:	d2 40       	sbci	r29, 0x02	; 2
    6bba:	c4 57       	subi	r28, 0x74	; 116
    6bbc:	dd 4f       	sbci	r29, 0xFD	; 253
    6bbe:	98 81       	ld	r25, Y
    6bc0:	cc 58       	subi	r28, 0x8C	; 140
    6bc2:	d2 40       	sbci	r29, 0x02	; 2
    6bc4:	60 e0       	ldi	r22, 0x00	; 0
    6bc6:	71 e0       	ldi	r23, 0x01	; 1
    6bc8:	4f ee       	ldi	r20, 0xEF	; 239
    6bca:	56 e2       	ldi	r21, 0x26	; 38
    6bcc:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <f_gets>
    6bd0:	89 2b       	or	r24, r25
    6bd2:	09 f0       	breq	.+2      	; 0x6bd6 <eeprom_panel+0x5a6>
    6bd4:	ee ce       	rjmp	.-548    	; 0x69b2 <eeprom_panel+0x382>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    6bd6:	85 e4       	ldi	r24, 0x45	; 69
    6bd8:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    6bda:	c4 01       	movw	r24, r8
    6bdc:	60 e7       	ldi	r22, 0x70	; 112
    6bde:	ae 01       	movw	r20, r28
    6be0:	4f 5f       	subi	r20, 0xFF	; 255
    6be2:	5f 4f       	sbci	r21, 0xFF	; 255
    6be4:	21 e0       	ldi	r18, 0x01	; 1
    6be6:	00 e0       	ldi	r16, 0x00	; 0
    6be8:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    6bec:	d4 01       	movw	r26, r8
    6bee:	1d 96       	adiw	r26, 0x0d	; 13
    6bf0:	8c 91       	ld	r24, X
    6bf2:	1d 97       	sbiw	r26, 0x0d	; 13
    6bf4:	88 23       	and	r24, r24
    6bf6:	d1 f7       	brne	.-12     	; 0x6bec <eeprom_panel+0x5bc>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    6bf8:	1e 96       	adiw	r26, 0x0e	; 14
    6bfa:	8c 91       	ld	r24, X
    6bfc:	1e 97       	sbiw	r26, 0x0e	; 14
    6bfe:	81 30       	cpi	r24, 0x01	; 1
    6c00:	11 f1       	breq	.+68     	; 0x6c46 <eeprom_panel+0x616>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    6c02:	1e 96       	adiw	r26, 0x0e	; 14
    6c04:	2c 91       	ld	r18, X
    6c06:	00 d0       	rcall	.+0      	; 0x6c08 <eeprom_panel+0x5d8>
    6c08:	0f 92       	push	r0
    6c0a:	ed b7       	in	r30, 0x3d	; 61
    6c0c:	fe b7       	in	r31, 0x3e	; 62
    6c0e:	31 96       	adiw	r30, 0x01	; 1
    6c10:	82 e4       	ldi	r24, 0x42	; 66
    6c12:	91 e1       	ldi	r25, 0x11	; 17
    6c14:	ad b7       	in	r26, 0x3d	; 61
    6c16:	be b7       	in	r27, 0x3e	; 62
    6c18:	11 96       	adiw	r26, 0x01	; 1
    6c1a:	8d 93       	st	X+, r24
    6c1c:	9c 93       	st	X, r25
    6c1e:	12 97       	sbiw	r26, 0x02	; 2
    6c20:	22 83       	std	Z+2, r18	; 0x02
    6c22:	13 82       	std	Z+3, r1	; 0x03
    6c24:	0a c0       	rjmp	.+20     	; 0x6c3a <eeprom_panel+0x60a>
        }
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    6c26:	00 d0       	rcall	.+0      	; 0x6c28 <eeprom_panel+0x5f8>
    6c28:	0f 92       	push	r0
    6c2a:	87 e2       	ldi	r24, 0x27	; 39
    6c2c:	91 e1       	ldi	r25, 0x11	; 17
    6c2e:	ed b7       	in	r30, 0x3d	; 61
    6c30:	fe b7       	in	r31, 0x3e	; 62
    6c32:	81 83       	std	Z+1, r24	; 0x01
    6c34:	92 83       	std	Z+2, r25	; 0x02
    6c36:	e3 82       	std	Z+3, r14	; 0x03
    6c38:	f4 82       	std	Z+4, r15	; 0x04
    6c3a:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6c3e:	0f 90       	pop	r0
    6c40:	0f 90       	pop	r0
    6c42:	0f 90       	pop	r0
    6c44:	0f 90       	pop	r0
    }
    
};
    6c46:	ce 56       	subi	r28, 0x6E	; 110
    6c48:	dd 4f       	sbci	r29, 0xFD	; 253
    6c4a:	e2 e1       	ldi	r30, 0x12	; 18
    6c4c:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

00006c50 <flash_panel>:
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num) {
    6c50:	a2 e9       	ldi	r26, 0x92	; 146
    6c52:	b2 e0       	ldi	r27, 0x02	; 2
    6c54:	ee e2       	ldi	r30, 0x2E	; 46
    6c56:	f6 e3       	ldi	r31, 0x36	; 54
    6c58:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    6c5c:	08 2f       	mov	r16, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = chMap[panel_num];
    6c5e:	e8 2e       	mov	r14, r24
    6c60:	ff 24       	eor	r15, r15
    6c62:	f7 01       	movw	r30, r14
    6c64:	e6 5b       	subi	r30, 0xB6	; 182
    6c66:	f9 4d       	sbci	r31, 0xD9	; 217
    6c68:	e0 81       	ld	r30, Z
    if (ch != 0){
    6c6a:	ee 23       	and	r30, r30
    6c6c:	09 f4       	brne	.+2      	; 0x6c70 <flash_panel+0x20>
    6c6e:	ff c2       	rjmp	.+1534   	; 0x726e <flash_panel+0x61e>
        
        switch (ch) {
    6c70:	e3 30       	cpi	r30, 0x03	; 3
    6c72:	71 f0       	breq	.+28     	; 0x6c90 <flash_panel+0x40>
    6c74:	e4 30       	cpi	r30, 0x04	; 4
    6c76:	89 f0       	breq	.+34     	; 0x6c9a <flash_panel+0x4a>
    6c78:	e2 30       	cpi	r30, 0x02	; 2
    6c7a:	29 f4       	brne	.+10     	; 0x6c86 <flash_panel+0x36>
    6c7c:	9d e8       	ldi	r25, 0x8D	; 141
    6c7e:	89 2e       	mov	r8, r25
    6c80:	98 e2       	ldi	r25, 0x28	; 40
    6c82:	99 2e       	mov	r9, r25
    6c84:	0e c0       	rjmp	.+28     	; 0x6ca2 <flash_panel+0x52>
    6c86:	82 e9       	ldi	r24, 0x92	; 146
    6c88:	88 2e       	mov	r8, r24
    6c8a:	85 e2       	ldi	r24, 0x25	; 37
    6c8c:	98 2e       	mov	r9, r24
    6c8e:	09 c0       	rjmp	.+18     	; 0x6ca2 <flash_panel+0x52>
    6c90:	1a e3       	ldi	r17, 0x3A	; 58
    6c92:	81 2e       	mov	r8, r17
    6c94:	16 e2       	ldi	r17, 0x26	; 38
    6c96:	91 2e       	mov	r9, r17
    6c98:	04 c0       	rjmp	.+8      	; 0x6ca2 <flash_panel+0x52>
                
                break;
            case 3:
                twi = &twi3;
                
                break;
    6c9a:	b6 eb       	ldi	r27, 0xB6	; 182
    6c9c:	8b 2e       	mov	r8, r27
    6c9e:	b4 e2       	ldi	r27, 0x24	; 36
    6ca0:	9b 2e       	mov	r9, r27
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&file5, panelFlash, FA_OPEN_EXISTING | FA_READ);
    6ca2:	85 ed       	ldi	r24, 0xD5	; 213
    6ca4:	96 e2       	ldi	r25, 0x26	; 38
    6ca6:	69 ed       	ldi	r22, 0xD9	; 217
    6ca8:	73 e2       	ldi	r23, 0x23	; 35
    6caa:	41 e0       	ldi	r20, 0x01	; 1
    6cac:	0e 94 91 44 	call	0x8922	; 0x8922 <f_open>
    6cb0:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    6cb2:	88 23       	and	r24, r24
    6cb4:	49 f0       	breq	.+18     	; 0x6cc8 <flash_panel+0x78>
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    6cb6:	8b e1       	ldi	r24, 0x1B	; 27
    6cb8:	96 e1       	ldi	r25, 0x16	; 22
    6cba:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            put_rc(res);
    6cbe:	81 2f       	mov	r24, r17
    6cc0:	90 e0       	ldi	r25, 0x00	; 0
    6cc2:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <put_rc>
    6cc6:	51 c0       	rjmp	.+162    	; 0x6d6a <flash_panel+0x11a>
        } else {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128) {
    6cc8:	07 ff       	sbrs	r16, 7
    6cca:	12 c0       	rjmp	.+36     	; 0x6cf0 <flash_panel+0xa0>
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    6ccc:	84 e0       	ldi	r24, 0x04	; 4
    6cce:	e0 e6       	ldi	r30, 0x60	; 96
    6cd0:	f6 e0       	ldi	r31, 0x06	; 6
    6cd2:	86 83       	std	Z+6, r24	; 0x06
    6cd4:	84 e6       	ldi	r24, 0x64	; 100
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	20 e2       	ldi	r18, 0x20	; 32
    6cda:	33 e0       	ldi	r19, 0x03	; 3
    6cdc:	f9 01       	movw	r30, r18
    6cde:	31 97       	sbiw	r30, 0x01	; 1
    6ce0:	f1 f7       	brne	.-4      	; 0x6cde <flash_panel+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ce2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ce4:	d9 f7       	brne	.-10     	; 0x6cdc <flash_panel+0x8c>
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    6ce6:	84 e0       	ldi	r24, 0x04	; 4
    6ce8:	e0 e6       	ldi	r30, 0x60	; 96
    6cea:	f6 e0       	ldi	r31, 0x06	; 6
    6cec:	85 83       	std	Z+5, r24	; 0x05
    6cee:	3d c0       	rjmp	.+122    	; 0x6d6a <flash_panel+0x11a>
            } else {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    6cf0:	00 d0       	rcall	.+0      	; 0x6cf2 <flash_panel+0xa2>
    6cf2:	0f 92       	push	r0
    6cf4:	8a e0       	ldi	r24, 0x0A	; 10
    6cf6:	96 e1       	ldi	r25, 0x16	; 22
    6cf8:	ad b7       	in	r26, 0x3d	; 61
    6cfa:	be b7       	in	r27, 0x3e	; 62
    6cfc:	11 96       	adiw	r26, 0x01	; 1
    6cfe:	8d 93       	st	X+, r24
    6d00:	9c 93       	st	X, r25
    6d02:	12 97       	sbiw	r26, 0x02	; 2
    6d04:	13 96       	adiw	r26, 0x03	; 3
    6d06:	ed 92       	st	X+, r14
    6d08:	fc 92       	st	X, r15
    6d0a:	14 97       	sbiw	r26, 0x04	; 4
    6d0c:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                pagebuff[0] = 0x00;
    6d10:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    6d12:	81 e0       	ldi	r24, 0x01	; 1
    6d14:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	c4 01       	movw	r24, r8
    6d20:	60 2f       	mov	r22, r16
    6d22:	ae 01       	movw	r20, r28
    6d24:	4f 5f       	subi	r20, 0xFF	; 255
    6d26:	5f 4f       	sbci	r21, 0xFF	; 255
    6d28:	22 e0       	ldi	r18, 0x02	; 2
    6d2a:	00 e0       	ldi	r16, 0x00	; 0
    6d2c:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY) {
    6d30:	f4 01       	movw	r30, r8
    6d32:	85 85       	ldd	r24, Z+13	; 0x0d
    6d34:	88 23       	and	r24, r24
    6d36:	e1 f7       	brne	.-8      	; 0x6d30 <flash_panel+0xe0>
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK) {
    6d38:	86 85       	ldd	r24, Z+14	; 0x0e
    6d3a:	81 30       	cpi	r24, 0x01	; 1
    6d3c:	b1 f0       	breq	.+44     	; 0x6d6a <flash_panel+0x11a>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    6d3e:	26 85       	ldd	r18, Z+14	; 0x0e
    6d40:	00 d0       	rcall	.+0      	; 0x6d42 <flash_panel+0xf2>
    6d42:	0f 92       	push	r0
    6d44:	ed b7       	in	r30, 0x3d	; 61
    6d46:	fe b7       	in	r31, 0x3e	; 62
    6d48:	31 96       	adiw	r30, 0x01	; 1
    6d4a:	8c ee       	ldi	r24, 0xEC	; 236
    6d4c:	95 e1       	ldi	r25, 0x15	; 21
    6d4e:	ad b7       	in	r26, 0x3d	; 61
    6d50:	be b7       	in	r27, 0x3e	; 62
    6d52:	11 96       	adiw	r26, 0x01	; 1
    6d54:	8d 93       	st	X+, r24
    6d56:	9c 93       	st	X, r25
    6d58:	12 97       	sbiw	r26, 0x02	; 2
    6d5a:	22 83       	std	Z+2, r18	; 0x02
    6d5c:	13 82       	std	Z+3, r1	; 0x03
    6d5e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6d62:	0f 90       	pop	r0
    6d64:	0f 90       	pop	r0
    6d66:	0f 90       	pop	r0
    6d68:	0f 90       	pop	r0
    6d6a:	88 e8       	ldi	r24, 0x88	; 136
    6d6c:	93 e1       	ldi	r25, 0x13	; 19
    6d6e:	20 e2       	ldi	r18, 0x20	; 32
    6d70:	33 e0       	ldi	r19, 0x03	; 3
    6d72:	f9 01       	movw	r30, r18
    6d74:	31 97       	sbiw	r30, 0x01	; 1
    6d76:	f1 f7       	brne	.-4      	; 0x6d74 <flash_panel+0x124>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d78:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d7a:	d9 f7       	brne	.-10     	; 0x6d72 <flash_panel+0x122>
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    6d7c:	8f ed       	ldi	r24, 0xDF	; 223
    6d7e:	95 e1       	ldi	r25, 0x15	; 21
    6d80:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    6d84:	0f ef       	ldi	r16, 0xFF	; 255
    6d86:	1f ef       	ldi	r17, 0xFF	; 255
    6d88:	cc 24       	eor	r12, r12
    6d8a:	dd 24       	eor	r13, r13
    6d8c:	66 24       	eor	r6, r6
    6d8e:	77 24       	eor	r7, r7
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    6d90:	a6 e8       	ldi	r26, 0x86	; 134
    6d92:	4a 2e       	mov	r4, r26
    6d94:	51 2c       	mov	r5, r1
    6d96:	4c 0e       	add	r4, r28
    6d98:	5d 1e       	adc	r5, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    6d9a:	f6 e8       	ldi	r31, 0x86	; 134
    6d9c:	2f 2e       	mov	r2, r31
    6d9e:	f1 e0       	ldi	r31, 0x01	; 1
    6da0:	3f 2e       	mov	r3, r31
    6da2:	2c 0e       	add	r2, r28
    6da4:	3d 1e       	adc	r3, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6da6:	f1 01       	movw	r30, r2
    6da8:	34 96       	adiw	r30, 0x04	; 4
    6daa:	c1 57       	subi	r28, 0x71	; 113
    6dac:	dd 4f       	sbci	r29, 0xFD	; 253
    6dae:	e8 83       	st	Y, r30
    6db0:	f9 83       	std	Y+1, r31	; 0x01
    6db2:	cf 58       	subi	r28, 0x8F	; 143
    6db4:	d2 40       	sbci	r29, 0x02	; 2
    6db6:	d6 c0       	rjmp	.+428    	; 0x6f64 <flash_panel+0x314>
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
            lineno++;
    6db8:	08 94       	sec
    6dba:	61 1c       	adc	r6, r1
    6dbc:	71 1c       	adc	r7, r1
            len = strlen(flashBuff);
    6dbe:	f2 01       	movw	r30, r4
    6dc0:	01 90       	ld	r0, Z+
    6dc2:	00 20       	and	r0, r0
    6dc4:	e9 f7       	brne	.-6      	; 0x6dc0 <flash_panel+0x170>
            if (flashBuff[len-1] == '\n')
    6dc6:	32 97       	sbiw	r30, 0x02	; 2
    6dc8:	80 81       	ld	r24, Z
    6dca:	8a 30       	cpi	r24, 0x0A	; 10
    6dcc:	09 f4       	brne	.+2      	; 0x6dd0 <flash_panel+0x180>
                flashBuff[--len] = 0;
    6dce:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    6dd0:	d2 01       	movw	r26, r4
    6dd2:	8c 91       	ld	r24, X
    6dd4:	8a 33       	cpi	r24, 0x3A	; 58
    6dd6:	09 f0       	breq	.+2      	; 0x6dda <flash_panel+0x18a>
    6dd8:	c5 c0       	rjmp	.+394    	; 0x6f64 <flash_panel+0x314>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    6dda:	c1 01       	movw	r24, r2
    6ddc:	b2 01       	movw	r22, r4
    6dde:	0e 94 08 32 	call	0x6410	; 0x6410 <ihex_readrec>
    6de2:	f8 2e       	mov	r15, r24
            if (rc < 0) {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            } else if (rc != ihex.cksum) {
    6de4:	c6 57       	subi	r28, 0x76	; 118
    6de6:	dd 4f       	sbci	r29, 0xFD	; 253
    6de8:	88 81       	ld	r24, Y
    6dea:	ca 58       	subi	r28, 0x8A	; 138
    6dec:	d2 40       	sbci	r29, 0x02	; 2
    6dee:	f8 16       	cp	r15, r24
    6df0:	19 f1       	breq	.+70     	; 0x6e38 <flash_panel+0x1e8>
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    6df2:	00 d0       	rcall	.+0      	; 0x6df4 <flash_panel+0x1a4>
    6df4:	0f 92       	push	r0
    6df6:	8c ea       	ldi	r24, 0xAC	; 172
    6df8:	95 e1       	ldi	r25, 0x15	; 21
    6dfa:	ed b7       	in	r30, 0x3d	; 61
    6dfc:	fe b7       	in	r31, 0x3e	; 62
    6dfe:	81 83       	std	Z+1, r24	; 0x01
    6e00:	92 83       	std	Z+2, r25	; 0x02
    6e02:	63 82       	std	Z+3, r6	; 0x03
    6e04:	74 82       	std	Z+4, r7	; 0x04
    6e06:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    6e0a:	0f 92       	push	r0
    6e0c:	0f 92       	push	r0
    6e0e:	ed b7       	in	r30, 0x3d	; 61
    6e10:	fe b7       	in	r31, 0x3e	; 62
    6e12:	31 96       	adiw	r30, 0x01	; 1
    6e14:	81 e8       	ldi	r24, 0x81	; 129
    6e16:	95 e1       	ldi	r25, 0x15	; 21
    6e18:	ad b7       	in	r26, 0x3d	; 61
    6e1a:	be b7       	in	r27, 0x3e	; 62
    6e1c:	11 96       	adiw	r26, 0x01	; 1
    6e1e:	8d 93       	st	X+, r24
    6e20:	9c 93       	st	X, r25
    6e22:	12 97       	sbiw	r26, 0x02	; 2
    6e24:	c6 57       	subi	r28, 0x76	; 118
    6e26:	dd 4f       	sbci	r29, 0xFD	; 253
    6e28:	88 81       	ld	r24, Y
    6e2a:	ca 58       	subi	r28, 0x8A	; 138
    6e2c:	d2 40       	sbci	r29, 0x02	; 2
    6e2e:	82 83       	std	Z+2, r24	; 0x02
    6e30:	13 82       	std	Z+3, r1	; 0x03
    6e32:	f4 82       	std	Z+4, r15	; 0x04
    6e34:	15 82       	std	Z+5, r1	; 0x05
    6e36:	83 c0       	rjmp	.+262    	; 0x6f3e <flash_panel+0x2ee>
                break;
            } else {
                if (ihex.rectyp == 0) {
    6e38:	d1 01       	movw	r26, r2
    6e3a:	13 96       	adiw	r26, 0x03	; 3
    6e3c:	2c 91       	ld	r18, X
    6e3e:	13 97       	sbiw	r26, 0x03	; 3
    6e40:	22 23       	and	r18, r18
    6e42:	09 f0       	breq	.+2      	; 0x6e46 <flash_panel+0x1f6>
    6e44:	53 c0       	rjmp	.+166    	; 0x6eec <flash_panel+0x29c>
                    // data record
                    nextaddr = ihex.loadofs;
    6e46:	11 96       	adiw	r26, 0x01	; 1
    6e48:	ed 90       	ld	r14, X+
    6e4a:	fc 90       	ld	r15, X
    6e4c:	12 97       	sbiw	r26, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    6e4e:	57 01       	movw	r10, r14
    6e50:	aa 0c       	add	r10, r10
    6e52:	ab 2c       	mov	r10, r11
    6e54:	aa 1c       	adc	r10, r10
    6e56:	bb 08       	sbc	r11, r11
    6e58:	b1 94       	neg	r11
    6e5a:	a0 16       	cp	r10, r16
    6e5c:	b1 06       	cpc	r11, r17
    6e5e:	c1 f0       	breq	.+48     	; 0x6e90 <flash_panel+0x240>
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr) {
    6e60:	cd 14       	cp	r12, r13
    6e62:	91 f0       	breq	.+36     	; 0x6e88 <flash_panel+0x238>
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            progPage(twi, paddr, psize, &pagebuff[0]);
    6e64:	16 95       	lsr	r17
    6e66:	10 2f       	mov	r17, r16
    6e68:	00 27       	eor	r16, r16
    6e6a:	17 95       	ror	r17
    6e6c:	07 95       	ror	r16
    6e6e:	0c 0d       	add	r16, r12
    6e70:	11 1d       	adc	r17, r1
    6e72:	a8 01       	movw	r20, r16
    6e74:	60 e0       	ldi	r22, 0x00	; 0
    6e76:	70 e0       	ldi	r23, 0x00	; 0
    6e78:	dc 18       	sub	r13, r12
    6e7a:	c4 01       	movw	r24, r8
    6e7c:	2d 2d       	mov	r18, r13
    6e7e:	8e 01       	movw	r16, r28
    6e80:	0f 5f       	subi	r16, 0xFF	; 255
    6e82:	1f 4f       	sbci	r17, 0xFF	; 255
    6e84:	0e 94 c1 31 	call	0x6382	; 0x6382 <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    6e88:	6f e7       	ldi	r22, 0x7F	; 127
    6e8a:	d6 2e       	mov	r13, r22
    6e8c:	de 20       	and	r13, r14
    6e8e:	cd 2c       	mov	r12, r13
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    6e90:	4e 2d       	mov	r20, r14
    6e92:	4f 77       	andi	r20, 0x7F	; 127
    6e94:	4c 15       	cp	r20, r12
    6e96:	08 f4       	brcc	.+2      	; 0x6e9a <flash_panel+0x24a>
    6e98:	c4 2e       	mov	r12, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6e9a:	f1 01       	movw	r30, r2
    6e9c:	50 81       	ld	r21, Z
    6e9e:	25 2f       	mov	r18, r21
    6ea0:	30 e0       	ldi	r19, 0x00	; 0
    6ea2:	c1 57       	subi	r28, 0x71	; 113
    6ea4:	dd 4f       	sbci	r29, 0xFD	; 253
    6ea6:	a8 81       	ld	r26, Y
    6ea8:	b9 81       	ldd	r27, Y+1	; 0x01
    6eaa:	cf 58       	subi	r28, 0x8F	; 143
    6eac:	d2 40       	sbci	r29, 0x02	; 2
    6eae:	e4 2f       	mov	r30, r20
    6eb0:	f0 e0       	ldi	r31, 0x00	; 0
    6eb2:	35 96       	adiw	r30, 0x05	; 5
    6eb4:	81 e0       	ldi	r24, 0x01	; 1
    6eb6:	90 e0       	ldi	r25, 0x00	; 0
    6eb8:	8c 0f       	add	r24, r28
    6eba:	9d 1f       	adc	r25, r29
    6ebc:	e8 0f       	add	r30, r24
    6ebe:	f9 1f       	adc	r31, r25
    6ec0:	2c 5f       	subi	r18, 0xFC	; 252
    6ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ec4:	22 0d       	add	r18, r2
    6ec6:	33 1d       	adc	r19, r3
    6ec8:	02 c0       	rjmp	.+4      	; 0x6ece <flash_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6eca:	8d 91       	ld	r24, X+
    6ecc:	81 93       	st	Z+, r24
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++) {
    6ece:	a2 17       	cp	r26, r18
    6ed0:	b3 07       	cpc	r27, r19
    6ed2:	d9 f7       	brne	.-10     	; 0x6eca <flash_panel+0x27a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                    }
                    if ((pageoffset + ihex.reclen) > pageendaddr)
    6ed4:	85 2f       	mov	r24, r21
    6ed6:	90 e0       	ldi	r25, 0x00	; 0
    6ed8:	84 0f       	add	r24, r20
    6eda:	91 1d       	adc	r25, r1
    6edc:	2d 2d       	mov	r18, r13
    6ede:	30 e0       	ldi	r19, 0x00	; 0
    6ee0:	28 17       	cp	r18, r24
    6ee2:	39 07       	cpc	r19, r25
    6ee4:	f4 f5       	brge	.+124    	; 0x6f62 <flash_panel+0x312>
                        pageendaddr = pageoffset+ihex.reclen;
    6ee6:	d4 2e       	mov	r13, r20
    6ee8:	d5 0e       	add	r13, r21
    6eea:	3b c0       	rjmp	.+118    	; 0x6f62 <flash_panel+0x312>
                } else if (ihex.rectyp == 1) {
    6eec:	21 30       	cpi	r18, 0x01	; 1
    6eee:	b1 f4       	brne	.+44     	; 0x6f1c <flash_panel+0x2cc>
                    // end of file record
                    if (pagestartaddr != pageendaddr) {
    6ef0:	cd 14       	cp	r12, r13
    6ef2:	09 f4       	brne	.+2      	; 0x6ef6 <flash_panel+0x2a6>
    6ef4:	41 c0       	rjmp	.+130    	; 0x6f78 <flash_panel+0x328>
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                        psize = pageendaddr - pagestartaddr;
                        progPage(twi, paddr, psize, &pagebuff[0]);
    6ef6:	16 95       	lsr	r17
    6ef8:	10 2f       	mov	r17, r16
    6efa:	00 27       	eor	r16, r16
    6efc:	17 95       	ror	r17
    6efe:	07 95       	ror	r16
    6f00:	0c 0d       	add	r16, r12
    6f02:	11 1d       	adc	r17, r1
    6f04:	a8 01       	movw	r20, r16
    6f06:	60 e0       	ldi	r22, 0x00	; 0
    6f08:	70 e0       	ldi	r23, 0x00	; 0
    6f0a:	dc 18       	sub	r13, r12
    6f0c:	c4 01       	movw	r24, r8
    6f0e:	2d 2d       	mov	r18, r13
    6f10:	8e 01       	movw	r16, r28
    6f12:	0f 5f       	subi	r16, 0xFF	; 255
    6f14:	1f 4f       	sbci	r17, 0xFF	; 255
    6f16:	0e 94 c1 31 	call	0x6382	; 0x6382 <progPage>
    6f1a:	2e c0       	rjmp	.+92     	; 0x6f78 <flash_panel+0x328>
                    }
                    break;
                } else {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    6f1c:	00 d0       	rcall	.+0      	; 0x6f1e <flash_panel+0x2ce>
    6f1e:	00 d0       	rcall	.+0      	; 0x6f20 <flash_panel+0x2d0>
    6f20:	ed b7       	in	r30, 0x3d	; 61
    6f22:	fe b7       	in	r31, 0x3e	; 62
    6f24:	31 96       	adiw	r30, 0x01	; 1
    6f26:	81 e4       	ldi	r24, 0x41	; 65
    6f28:	95 e1       	ldi	r25, 0x15	; 21
    6f2a:	ad b7       	in	r26, 0x3d	; 61
    6f2c:	be b7       	in	r27, 0x3e	; 62
    6f2e:	11 96       	adiw	r26, 0x01	; 1
    6f30:	8d 93       	st	X+, r24
    6f32:	9c 93       	st	X, r25
    6f34:	12 97       	sbiw	r26, 0x02	; 2
    6f36:	22 83       	std	Z+2, r18	; 0x02
    6f38:	13 82       	std	Z+3, r1	; 0x03
    6f3a:	64 82       	std	Z+4, r6	; 0x04
    6f3c:	75 82       	std	Z+5, r7	; 0x05
    6f3e:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    6f42:	c5 57       	subi	r28, 0x75	; 117
    6f44:	dd 4f       	sbci	r29, 0xFD	; 253
    6f46:	48 82       	st	Y, r4
    6f48:	cb 58       	subi	r28, 0x8B	; 139
    6f4a:	d2 40       	sbci	r29, 0x02	; 2
    6f4c:	c4 57       	subi	r28, 0x74	; 116
    6f4e:	dd 4f       	sbci	r29, 0xFD	; 253
    6f50:	58 82       	st	Y, r5
    6f52:	cc 58       	subi	r28, 0x8C	; 140
    6f54:	d2 40       	sbci	r29, 0x02	; 2
    6f56:	ed b7       	in	r30, 0x3d	; 61
    6f58:	fe b7       	in	r31, 0x3e	; 62
    6f5a:	36 96       	adiw	r30, 0x06	; 6
    6f5c:	ed bf       	out	0x3d, r30	; 61
    6f5e:	fe bf       	out	0x3e, r31	; 62
    6f60:	15 c0       	rjmp	.+42     	; 0x6f8c <flash_panel+0x33c>
                            ihex.rectyp, lineno);
                    break;
    6f62:	85 01       	movw	r16, r10
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    6f64:	c2 01       	movw	r24, r4
    6f66:	60 e0       	ldi	r22, 0x00	; 0
    6f68:	71 e0       	ldi	r23, 0x01	; 1
    6f6a:	45 ed       	ldi	r20, 0xD5	; 213
    6f6c:	56 e2       	ldi	r21, 0x26	; 38
    6f6e:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <f_gets>
    6f72:	89 2b       	or	r24, r25
    6f74:	09 f0       	breq	.+2      	; 0x6f78 <flash_panel+0x328>
    6f76:	20 cf       	rjmp	.-448    	; 0x6db8 <flash_panel+0x168>
    6f78:	c5 57       	subi	r28, 0x75	; 117
    6f7a:	dd 4f       	sbci	r29, 0xFD	; 253
    6f7c:	48 82       	st	Y, r4
    6f7e:	cb 58       	subi	r28, 0x8B	; 139
    6f80:	d2 40       	sbci	r29, 0x02	; 2
    6f82:	c4 57       	subi	r28, 0x74	; 116
    6f84:	dd 4f       	sbci	r29, 0xFD	; 253
    6f86:	58 82       	st	Y, r5
    6f88:	cc 58       	subi	r28, 0x8C	; 140
    6f8a:	d2 40       	sbci	r29, 0x02	; 2
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&file5, 0);
    6f8c:	85 ed       	ldi	r24, 0xD5	; 213
    6f8e:	96 e2       	ldi	r25, 0x26	; 38
    6f90:	40 e0       	ldi	r20, 0x00	; 0
    6f92:	50 e0       	ldi	r21, 0x00	; 0
    6f94:	60 e0       	ldi	r22, 0x00	; 0
    6f96:	70 e0       	ldi	r23, 0x00	; 0
    6f98:	0e 94 31 40 	call	0x8062	; 0x8062 <f_lseek>
    6f9c:	18 2f       	mov	r17, r24
        if (res != FR_OK) {
    6f9e:	88 23       	and	r24, r24
    6fa0:	49 f0       	breq	.+18     	; 0x6fb4 <flash_panel+0x364>
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    6fa2:	84 e2       	ldi	r24, 0x24	; 36
    6fa4:	95 e1       	ldi	r25, 0x15	; 21
    6fa6:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
            put_rc(res);
    6faa:	81 2f       	mov	r24, r17
    6fac:	90 e0       	ldi	r25, 0x00	; 0
    6fae:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <put_rc>
    6fb2:	35 c1       	rjmp	.+618    	; 0x721e <flash_panel+0x5ce>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    6fb4:	87 e1       	ldi	r24, 0x17	; 23
    6fb6:	95 e1       	ldi	r25, 0x15	; 21
    6fb8:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    6fbc:	cc 24       	eor	r12, r12
    6fbe:	ca 94       	dec	r12
    6fc0:	dc 2c       	mov	r13, r12
    6fc2:	00 e0       	ldi	r16, 0x00	; 0
    6fc4:	10 e0       	ldi	r17, 0x00	; 0
    6fc6:	66 24       	eor	r6, r6
    6fc8:	77 24       	eor	r7, r7
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
                len = strlen(flashBuff);
    6fca:	ce 01       	movw	r24, r28
    6fcc:	8a 57       	subi	r24, 0x7A	; 122
    6fce:	9f 4f       	sbci	r25, 0xFF	; 255
    6fd0:	cf 56       	subi	r28, 0x6F	; 111
    6fd2:	dd 4f       	sbci	r29, 0xFD	; 253
    6fd4:	88 83       	st	Y, r24
    6fd6:	99 83       	std	Y+1, r25	; 0x01
    6fd8:	c1 59       	subi	r28, 0x91	; 145
    6fda:	d2 40       	sbci	r29, 0x02	; 2
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;
                if (flashBuff[0] != ':')
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    6fdc:	46 e8       	ldi	r20, 0x86	; 134
    6fde:	24 2e       	mov	r2, r20
    6fe0:	41 e0       	ldi	r20, 0x01	; 1
    6fe2:	34 2e       	mov	r3, r20
    6fe4:	2c 0e       	add	r2, r28
    6fe6:	3d 1e       	adc	r3, r29
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    6fe8:	d1 01       	movw	r26, r2
    6fea:	14 96       	adiw	r26, 0x04	; 4
    6fec:	c3 57       	subi	r28, 0x73	; 115
    6fee:	dd 4f       	sbci	r29, 0xFD	; 253
    6ff0:	a8 83       	st	Y, r26
    6ff2:	b9 83       	std	Y+1, r27	; 0x01
    6ff4:	cd 58       	subi	r28, 0x8D	; 141
    6ff6:	d2 40       	sbci	r29, 0x02	; 2
    6ff8:	ff c0       	rjmp	.+510    	; 0x71f8 <flash_panel+0x5a8>
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
                lineno++;
    6ffa:	08 94       	sec
    6ffc:	61 1c       	adc	r6, r1
    6ffe:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    7000:	cf 56       	subi	r28, 0x6F	; 111
    7002:	dd 4f       	sbci	r29, 0xFD	; 253
    7004:	e8 81       	ld	r30, Y
    7006:	f9 81       	ldd	r31, Y+1	; 0x01
    7008:	c1 59       	subi	r28, 0x91	; 145
    700a:	d2 40       	sbci	r29, 0x02	; 2
    700c:	01 90       	ld	r0, Z+
    700e:	00 20       	and	r0, r0
    7010:	e9 f7       	brne	.-6      	; 0x700c <flash_panel+0x3bc>
                if (flashBuff[len-1] == '\n')
    7012:	32 97       	sbiw	r30, 0x02	; 2
    7014:	80 81       	ld	r24, Z
    7016:	8a 30       	cpi	r24, 0x0A	; 10
    7018:	09 f4       	brne	.+2      	; 0x701c <flash_panel+0x3cc>
                    flashBuff[--len] = 0;
    701a:	10 82       	st	Z, r1
                if (flashBuff[0] != ':')
    701c:	ca 57       	subi	r28, 0x7A	; 122
    701e:	df 4f       	sbci	r29, 0xFF	; 255
    7020:	88 81       	ld	r24, Y
    7022:	c6 58       	subi	r28, 0x86	; 134
    7024:	d0 40       	sbci	r29, 0x00	; 0
    7026:	8a 33       	cpi	r24, 0x3A	; 58
    7028:	09 f0       	breq	.+2      	; 0x702c <flash_panel+0x3dc>
    702a:	e6 c0       	rjmp	.+460    	; 0x71f8 <flash_panel+0x5a8>
                    continue;
                rc = ihex_readrec(&ihex, flashBuff);
    702c:	c1 01       	movw	r24, r2
    702e:	b2 01       	movw	r22, r4
    7030:	0e 94 08 32 	call	0x6410	; 0x6410 <ihex_readrec>
    7034:	f8 2e       	mov	r15, r24
                if (rc < 0) {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                } else if (rc != ihex.cksum) {
    7036:	c6 57       	subi	r28, 0x76	; 118
    7038:	dd 4f       	sbci	r29, 0xFD	; 253
    703a:	88 81       	ld	r24, Y
    703c:	ca 58       	subi	r28, 0x8A	; 138
    703e:	d2 40       	sbci	r29, 0x02	; 2
    7040:	f8 16       	cp	r15, r24
    7042:	19 f1       	breq	.+70     	; 0x708a <flash_panel+0x43a>
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    7044:	00 d0       	rcall	.+0      	; 0x7046 <flash_panel+0x3f6>
    7046:	0f 92       	push	r0
    7048:	85 ee       	ldi	r24, 0xE5	; 229
    704a:	94 e1       	ldi	r25, 0x14	; 20
    704c:	ed b7       	in	r30, 0x3d	; 61
    704e:	fe b7       	in	r31, 0x3e	; 62
    7050:	81 83       	std	Z+1, r24	; 0x01
    7052:	92 83       	std	Z+2, r25	; 0x02
    7054:	63 82       	std	Z+3, r6	; 0x03
    7056:	74 82       	std	Z+4, r7	; 0x04
    7058:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    705c:	0f 92       	push	r0
    705e:	0f 92       	push	r0
    7060:	ed b7       	in	r30, 0x3d	; 61
    7062:	fe b7       	in	r31, 0x3e	; 62
    7064:	31 96       	adiw	r30, 0x01	; 1
    7066:	8a eb       	ldi	r24, 0xBA	; 186
    7068:	94 e1       	ldi	r25, 0x14	; 20
    706a:	ad b7       	in	r26, 0x3d	; 61
    706c:	be b7       	in	r27, 0x3e	; 62
    706e:	11 96       	adiw	r26, 0x01	; 1
    7070:	8d 93       	st	X+, r24
    7072:	9c 93       	st	X, r25
    7074:	12 97       	sbiw	r26, 0x02	; 2
    7076:	c6 57       	subi	r28, 0x76	; 118
    7078:	dd 4f       	sbci	r29, 0xFD	; 253
    707a:	88 81       	ld	r24, Y
    707c:	ca 58       	subi	r28, 0x8A	; 138
    707e:	d2 40       	sbci	r29, 0x02	; 2
    7080:	82 83       	std	Z+2, r24	; 0x02
    7082:	13 82       	std	Z+3, r1	; 0x03
    7084:	f4 82       	std	Z+4, r15	; 0x04
    7086:	15 82       	std	Z+5, r1	; 0x05
    7088:	ae c0       	rjmp	.+348    	; 0x71e6 <flash_panel+0x596>
                    break;
                } else {
                    if (ihex.rectyp == 0) {
    708a:	d1 01       	movw	r26, r2
    708c:	13 96       	adiw	r26, 0x03	; 3
    708e:	2c 91       	ld	r18, X
    7090:	13 97       	sbiw	r26, 0x03	; 3
    7092:	22 23       	and	r18, r18
    7094:	09 f0       	breq	.+2      	; 0x7098 <flash_panel+0x448>
    7096:	65 c0       	rjmp	.+202    	; 0x7162 <flash_panel+0x512>
                        // data record
                        nextaddr = ihex.loadofs;
    7098:	11 96       	adiw	r26, 0x01	; 1
    709a:	ed 90       	ld	r14, X+
    709c:	fc 90       	ld	r15, X
    709e:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page) {
    70a0:	57 01       	movw	r10, r14
    70a2:	aa 0c       	add	r10, r10
    70a4:	ab 2c       	mov	r10, r11
    70a6:	aa 1c       	adc	r10, r10
    70a8:	bb 08       	sbc	r11, r11
    70aa:	b1 94       	neg	r11
    70ac:	ac 14       	cp	r10, r12
    70ae:	bd 04       	cpc	r11, r13
    70b0:	49 f1       	breq	.+82     	; 0x7104 <flash_panel+0x4b4>
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr) {
    70b2:	01 17       	cp	r16, r17
    70b4:	21 f1       	breq	.+72     	; 0x70fe <flash_panel+0x4ae>
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                                psize = pageendaddr - pagestartaddr;
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    70b6:	a6 01       	movw	r20, r12
    70b8:	56 95       	lsr	r21
    70ba:	54 2f       	mov	r21, r20
    70bc:	44 27       	eor	r20, r20
    70be:	57 95       	ror	r21
    70c0:	47 95       	ror	r20
    70c2:	40 0f       	add	r20, r16
    70c4:	51 1d       	adc	r21, r1
    70c6:	60 e0       	ldi	r22, 0x00	; 0
    70c8:	70 e0       	ldi	r23, 0x00	; 0
    70ca:	10 1b       	sub	r17, r16
    70cc:	c4 01       	movw	r24, r8
    70ce:	21 2f       	mov	r18, r17
    70d0:	8e 01       	movw	r16, r28
    70d2:	0f 5f       	subi	r16, 0xFF	; 255
    70d4:	1f 4f       	sbci	r17, 0xFF	; 255
    70d6:	0e 94 08 31 	call	0x6210	; 0x6210 <verifyPage>
    70da:	89 2b       	or	r24, r25
    70dc:	81 f4       	brne	.+32     	; 0x70fe <flash_panel+0x4ae>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    70de:	00 d0       	rcall	.+0      	; 0x70e0 <flash_panel+0x490>
    70e0:	0f 92       	push	r0
    70e2:	8d e9       	ldi	r24, 0x9D	; 157
    70e4:	94 e1       	ldi	r25, 0x14	; 20
    70e6:	ed b7       	in	r30, 0x3d	; 61
    70e8:	fe b7       	in	r31, 0x3e	; 62
    70ea:	81 83       	std	Z+1, r24	; 0x01
    70ec:	92 83       	std	Z+2, r25	; 0x02
    70ee:	c3 82       	std	Z+3, r12	; 0x03
    70f0:	d4 82       	std	Z+4, r13	; 0x04
    70f2:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    70f6:	0f 90       	pop	r0
    70f8:	0f 90       	pop	r0
    70fa:	0f 90       	pop	r0
    70fc:	0f 90       	pop	r0
                                }
                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    70fe:	1e 2d       	mov	r17, r14
    7100:	1f 77       	andi	r17, 0x7F	; 127
    7102:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    7104:	4e 2d       	mov	r20, r14
    7106:	4f 77       	andi	r20, 0x7F	; 127
    7108:	40 17       	cp	r20, r16
    710a:	08 f4       	brcc	.+2      	; 0x710e <flash_panel+0x4be>
    710c:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    710e:	d1 01       	movw	r26, r2
    7110:	5c 91       	ld	r21, X
    7112:	25 2f       	mov	r18, r21
    7114:	30 e0       	ldi	r19, 0x00	; 0
    7116:	c3 57       	subi	r28, 0x73	; 115
    7118:	dd 4f       	sbci	r29, 0xFD	; 253
    711a:	a8 81       	ld	r26, Y
    711c:	b9 81       	ldd	r27, Y+1	; 0x01
    711e:	cd 58       	subi	r28, 0x8D	; 141
    7120:	d2 40       	sbci	r29, 0x02	; 2
    7122:	e4 2f       	mov	r30, r20
    7124:	f0 e0       	ldi	r31, 0x00	; 0
    7126:	35 96       	adiw	r30, 0x05	; 5
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	8c 0f       	add	r24, r28
    712e:	9d 1f       	adc	r25, r29
    7130:	e8 0f       	add	r30, r24
    7132:	f9 1f       	adc	r31, r25
    7134:	2c 5f       	subi	r18, 0xFC	; 252
    7136:	3f 4f       	sbci	r19, 0xFF	; 255
    7138:	22 0d       	add	r18, r2
    713a:	33 1d       	adc	r19, r3
    713c:	02 c0       	rjmp	.+4      	; 0x7142 <flash_panel+0x4f2>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    713e:	8d 91       	ld	r24, X+
    7140:	81 93       	st	Z+, r24
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;
                        for (i=0; i<ihex.reclen; i++) {
    7142:	a2 17       	cp	r26, r18
    7144:	b3 07       	cpc	r27, r19
    7146:	d9 f7       	brne	.-10     	; 0x713e <flash_panel+0x4ee>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
                        }
                        if ((pageoffset + ihex.reclen) > pageendaddr)
    7148:	85 2f       	mov	r24, r21
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	84 0f       	add	r24, r20
    714e:	91 1d       	adc	r25, r1
    7150:	21 2f       	mov	r18, r17
    7152:	30 e0       	ldi	r19, 0x00	; 0
    7154:	28 17       	cp	r18, r24
    7156:	39 07       	cpc	r19, r25
    7158:	0c f0       	brlt	.+2      	; 0x715c <flash_panel+0x50c>
    715a:	4d c0       	rjmp	.+154    	; 0x71f6 <flash_panel+0x5a6>
                            pageendaddr = pageoffset+ihex.reclen;
    715c:	14 2f       	mov	r17, r20
    715e:	15 0f       	add	r17, r21
    7160:	4a c0       	rjmp	.+148    	; 0x71f6 <flash_panel+0x5a6>
                    } else if (ihex.rectyp == 1) {
    7162:	21 30       	cpi	r18, 0x01	; 1
    7164:	79 f5       	brne	.+94     	; 0x71c4 <flash_panel+0x574>
                        // end of file record
                        if (pagestartaddr != pageendaddr) {
    7166:	01 17       	cp	r16, r17
    7168:	41 f1       	breq	.+80     	; 0x71ba <flash_panel+0x56a>
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
                            psize = pageendaddr - pagestartaddr;
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0) {
    716a:	a6 01       	movw	r20, r12
    716c:	56 95       	lsr	r21
    716e:	54 2f       	mov	r21, r20
    7170:	44 27       	eor	r20, r20
    7172:	57 95       	ror	r21
    7174:	47 95       	ror	r20
    7176:	40 0f       	add	r20, r16
    7178:	51 1d       	adc	r21, r1
    717a:	60 e0       	ldi	r22, 0x00	; 0
    717c:	70 e0       	ldi	r23, 0x00	; 0
    717e:	10 1b       	sub	r17, r16
    7180:	c4 01       	movw	r24, r8
    7182:	21 2f       	mov	r18, r17
    7184:	8e 01       	movw	r16, r28
    7186:	0f 5f       	subi	r16, 0xFF	; 255
    7188:	1f 4f       	sbci	r17, 0xFF	; 255
    718a:	0e 94 08 31 	call	0x6210	; 0x6210 <verifyPage>
    718e:	89 2b       	or	r24, r25
    7190:	a1 f4       	brne	.+40     	; 0x71ba <flash_panel+0x56a>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    7192:	00 d0       	rcall	.+0      	; 0x7194 <flash_panel+0x544>
    7194:	0f 92       	push	r0
    7196:	80 e8       	ldi	r24, 0x80	; 128
    7198:	94 e1       	ldi	r25, 0x14	; 20
    719a:	ad b7       	in	r26, 0x3d	; 61
    719c:	be b7       	in	r27, 0x3e	; 62
    719e:	11 96       	adiw	r26, 0x01	; 1
    71a0:	8d 93       	st	X+, r24
    71a2:	9c 93       	st	X, r25
    71a4:	12 97       	sbiw	r26, 0x02	; 2
    71a6:	13 96       	adiw	r26, 0x03	; 3
    71a8:	cd 92       	st	X+, r12
    71aa:	dc 92       	st	X, r13
    71ac:	14 97       	sbiw	r26, 0x04	; 4
    71ae:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    71b2:	0f 90       	pop	r0
    71b4:	0f 90       	pop	r0
    71b6:	0f 90       	pop	r0
    71b8:	0f 90       	pop	r0
                            }
                        }
                        xputs(PSTR("\n"));
    71ba:	8e e7       	ldi	r24, 0x7E	; 126
    71bc:	94 e1       	ldi	r25, 0x14	; 20
    71be:	0e 94 10 50 	call	0xa020	; 0xa020 <xputs>
    71c2:	2d c0       	rjmp	.+90     	; 0x721e <flash_panel+0x5ce>
                        break;
                    } else {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    71c4:	00 d0       	rcall	.+0      	; 0x71c6 <flash_panel+0x576>
    71c6:	00 d0       	rcall	.+0      	; 0x71c8 <flash_panel+0x578>
    71c8:	ed b7       	in	r30, 0x3d	; 61
    71ca:	fe b7       	in	r31, 0x3e	; 62
    71cc:	31 96       	adiw	r30, 0x01	; 1
    71ce:	8e e3       	ldi	r24, 0x3E	; 62
    71d0:	94 e1       	ldi	r25, 0x14	; 20
    71d2:	ad b7       	in	r26, 0x3d	; 61
    71d4:	be b7       	in	r27, 0x3e	; 62
    71d6:	11 96       	adiw	r26, 0x01	; 1
    71d8:	8d 93       	st	X+, r24
    71da:	9c 93       	st	X, r25
    71dc:	12 97       	sbiw	r26, 0x02	; 2
    71de:	22 83       	std	Z+2, r18	; 0x02
    71e0:	13 82       	std	Z+3, r1	; 0x03
    71e2:	64 82       	std	Z+4, r6	; 0x04
    71e4:	75 82       	std	Z+5, r7	; 0x05
    71e6:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    71ea:	ed b7       	in	r30, 0x3d	; 61
    71ec:	fe b7       	in	r31, 0x3e	; 62
    71ee:	36 96       	adiw	r30, 0x06	; 6
    71f0:	ed bf       	out	0x3d, r30	; 61
    71f2:	fe bf       	out	0x3e, r31	; 62
    71f4:	14 c0       	rjmp	.+40     	; 0x721e <flash_panel+0x5ce>
                                ihex.rectyp, lineno);
                        break;
    71f6:	65 01       	movw	r12, r10
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &file5) != NULL) {
    71f8:	c5 57       	subi	r28, 0x75	; 117
    71fa:	dd 4f       	sbci	r29, 0xFD	; 253
    71fc:	88 81       	ld	r24, Y
    71fe:	cb 58       	subi	r28, 0x8B	; 139
    7200:	d2 40       	sbci	r29, 0x02	; 2
    7202:	c4 57       	subi	r28, 0x74	; 116
    7204:	dd 4f       	sbci	r29, 0xFD	; 253
    7206:	98 81       	ld	r25, Y
    7208:	cc 58       	subi	r28, 0x8C	; 140
    720a:	d2 40       	sbci	r29, 0x02	; 2
    720c:	60 e0       	ldi	r22, 0x00	; 0
    720e:	71 e0       	ldi	r23, 0x01	; 1
    7210:	45 ed       	ldi	r20, 0xD5	; 213
    7212:	56 e2       	ldi	r21, 0x26	; 38
    7214:	0e 94 d1 43 	call	0x87a2	; 0x87a2 <f_gets>
    7218:	89 2b       	or	r24, r25
    721a:	09 f0       	breq	.+2      	; 0x721e <flash_panel+0x5ce>
    721c:	ee ce       	rjmp	.-548    	; 0x6ffa <flash_panel+0x3aa>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    721e:	85 e4       	ldi	r24, 0x45	; 69
    7220:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    7222:	c4 01       	movw	r24, r8
    7224:	60 e7       	ldi	r22, 0x70	; 112
    7226:	ae 01       	movw	r20, r28
    7228:	4f 5f       	subi	r20, 0xFF	; 255
    722a:	5f 4f       	sbci	r21, 0xFF	; 255
    722c:	21 e0       	ldi	r18, 0x01	; 1
    722e:	00 e0       	ldi	r16, 0x00	; 0
    7230:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY) {
    7234:	d4 01       	movw	r26, r8
    7236:	1d 96       	adiw	r26, 0x0d	; 13
    7238:	8c 91       	ld	r24, X
    723a:	1d 97       	sbiw	r26, 0x0d	; 13
    723c:	88 23       	and	r24, r24
    723e:	d1 f7       	brne	.-12     	; 0x7234 <flash_panel+0x5e4>
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK) {
    7240:	1e 96       	adiw	r26, 0x0e	; 14
    7242:	8c 91       	ld	r24, X
    7244:	1e 97       	sbiw	r26, 0x0e	; 14
    7246:	81 30       	cpi	r24, 0x01	; 1
    7248:	11 f1       	breq	.+68     	; 0x728e <flash_panel+0x63e>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    724a:	1e 96       	adiw	r26, 0x0e	; 14
    724c:	2c 91       	ld	r18, X
    724e:	00 d0       	rcall	.+0      	; 0x7250 <flash_panel+0x600>
    7250:	0f 92       	push	r0
    7252:	ed b7       	in	r30, 0x3d	; 61
    7254:	fe b7       	in	r31, 0x3e	; 62
    7256:	31 96       	adiw	r30, 0x01	; 1
    7258:	83 e2       	ldi	r24, 0x23	; 35
    725a:	94 e1       	ldi	r25, 0x14	; 20
    725c:	ad b7       	in	r26, 0x3d	; 61
    725e:	be b7       	in	r27, 0x3e	; 62
    7260:	11 96       	adiw	r26, 0x01	; 1
    7262:	8d 93       	st	X+, r24
    7264:	9c 93       	st	X, r25
    7266:	12 97       	sbiw	r26, 0x02	; 2
    7268:	22 83       	std	Z+2, r18	; 0x02
    726a:	13 82       	std	Z+3, r1	; 0x03
    726c:	0a c0       	rjmp	.+20     	; 0x7282 <flash_panel+0x632>
        }
        
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    726e:	00 d0       	rcall	.+0      	; 0x7270 <flash_panel+0x620>
    7270:	0f 92       	push	r0
    7272:	88 e0       	ldi	r24, 0x08	; 8
    7274:	94 e1       	ldi	r25, 0x14	; 20
    7276:	ed b7       	in	r30, 0x3d	; 61
    7278:	fe b7       	in	r31, 0x3e	; 62
    727a:	81 83       	std	Z+1, r24	; 0x01
    727c:	92 83       	std	Z+2, r25	; 0x02
    727e:	e3 82       	std	Z+3, r14	; 0x03
    7280:	f4 82       	std	Z+4, r15	; 0x04
    7282:	0e 94 52 50 	call	0xa0a4	; 0xa0a4 <xprintf>
    7286:	0f 90       	pop	r0
    7288:	0f 90       	pop	r0
    728a:	0f 90       	pop	r0
    728c:	0f 90       	pop	r0
    }
};
    728e:	ce 56       	subi	r28, 0x6E	; 110
    7290:	dd 4f       	sbci	r29, 0xFD	; 253
    7292:	e2 e1       	ldi	r30, 0x12	; 18
    7294:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

00007298 <init_all>:
#include "utils.h"

void init_all()
{ 
    7298:	a1 e0       	ldi	r26, 0x01	; 1
    729a:	b0 e0       	ldi	r27, 0x00	; 0
    729c:	e2 e5       	ldi	r30, 0x52	; 82
    729e:	f9 e3       	ldi	r31, 0x39	; 57
    72a0:	0c 94 9c 51 	jmp	0xa338	; 0xa338 <__prologue_saves__+0x1c>
  ledWrite(LED0, ON);
    72a4:	80 e0       	ldi	r24, 0x00	; 0
    72a6:	61 e0       	ldi	r22, 0x01	; 1
    72a8:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    72ac:	e0 e4       	ldi	r30, 0x40	; 64
    72ae:	f6 e0       	ldi	r31, 0x06	; 6
    72b0:	88 e0       	ldi	r24, 0x08	; 8
    72b2:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    72b4:	84 e0       	ldi	r24, 0x04	; 4
    72b6:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    72b8:	80 e1       	ldi	r24, 0x10	; 16
    72ba:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    72bc:	90 e2       	ldi	r25, 0x20	; 32
    72be:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    72c0:	20 e8       	ldi	r18, 0x80	; 128
    72c2:	21 83       	std	Z+1, r18	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    72c4:	85 83       	std	Z+5, r24	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    72c6:	e0 e6       	ldi	r30, 0x60	; 96
    72c8:	f6 e0       	ldi	r31, 0x06	; 6
    72ca:	81 83       	std	Z+1, r24	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    72cc:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    72ce:	21 83       	std	Z+1, r18	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    72d0:	85 83       	std	Z+5, r24	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    72d2:	80 eb       	ldi	r24, 0xB0	; 176
    72d4:	80 93 80 06 	sts	0x0680, r24
  PORTE.OUT = 0x00;
    72d8:	e0 e8       	ldi	r30, 0x80	; 128
    72da:	f6 e0       	ldi	r31, 0x06	; 6
    72dc:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    72de:	e0 ee       	ldi	r30, 0xE0	; 224
    72e0:	f6 e0       	ldi	r31, 0x06	; 6
    72e2:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    72e4:	80 e4       	ldi	r24, 0x40	; 64
    72e6:	81 83       	std	Z+1, r24	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    72e8:	21 83       	std	Z+1, r18	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    72ea:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    72ec:	85 83       	std	Z+5, r24	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    72ee:	26 83       	std	Z+6, r18	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    72f0:	80 ef       	ldi	r24, 0xF0	; 240
    72f2:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    72f6:	e0 e0       	ldi	r30, 0x00	; 0
    72f8:	f7 e0       	ldi	r31, 0x07	; 7
    72fa:	84 83       	std	Z+4, r24	; 0x04


  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
    72fc:	00 e2       	ldi	r16, 0x20	; 32
    72fe:	17 e0       	ldi	r17, 0x07	; 7
    7300:	80 93 20 07 	sts	0x0720, r24
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
    7304:	8f ef       	ldi	r24, 0xFF	; 255
    7306:	f8 01       	movw	r30, r16
    7308:	84 83       	std	Z+4, r24	; 0x04



 // set digital I/O signals to outputs
  digitalMode(0, OUTPUT);     //used to trigger laser
    730a:	80 e0       	ldi	r24, 0x00	; 0
    730c:	60 e0       	ldi	r22, 0x00	; 0
    730e:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <digitalMode>
  digitalMode(1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    7312:	81 e0       	ldi	r24, 0x01	; 1
    7314:	60 e0       	ldi	r22, 0x00	; 0
    7316:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <digitalMode>
  digitalMode(2, OUTPUT);     //used to trigger camera
    731a:	82 e0       	ldi	r24, 0x02	; 2
    731c:	60 e0       	ldi	r22, 0x00	; 0
    731e:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <digitalMode>
  digitalMode(3, INPUT);      //Used to detect external trigger signal 
    7322:	83 e0       	ldi	r24, 0x03	; 3
    7324:	61 e0       	ldi	r22, 0x01	; 1
    7326:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <digitalMode>
  PORTK.PIN3CTRL = 0x01;      //INT3 senses rising edge
    732a:	81 e0       	ldi	r24, 0x01	; 1
    732c:	f8 01       	movw	r30, r16
    732e:	83 8b       	std	Z+19, r24	; 0x13
  PORTK.INT0MASK = 0x00;      //disable Int3 as source for port interrupt 0x00, enable it with 0x08.
    7330:	12 86       	std	Z+10, r1	; 0x0a
  PORTK.INTCTRL = 0x02;       //Set Int3 INT0 Level medium   
    7332:	82 e0       	ldi	r24, 0x02	; 2
    7334:	81 87       	std	Z+9, r24	; 0x09

  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    7336:	e0 e5       	ldi	r30, 0x50	; 80
    7338:	f0 e0       	ldi	r31, 0x00	; 0
    733a:	87 e4       	ldi	r24, 0x47	; 71
    733c:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    733e:	84 ec       	ldi	r24, 0xC4	; 196
    7340:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    7342:	88 e1       	ldi	r24, 0x18	; 24
    7344:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    7348:	80 91 51 00 	lds	r24, 0x0051
    734c:	84 ff       	sbrs	r24, 4
    734e:	fc cf       	rjmp	.-8      	; 0x7348 <init_all+0xb0>
}


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value ) {
  uint8_t volatile saved_sreg = SREG;
    7350:	8f b7       	in	r24, 0x3f	; 63
    7352:	89 83       	std	Y+1, r24	; 0x01
  cli();
    7354:	f8 94       	cli
  volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
  RAMPZ = 0;
    7356:	1b be       	out	0x3b, r1	; 59
#endif

  asm volatile(
    7358:	24 e0       	ldi	r18, 0x04	; 4
    735a:	80 e4       	ldi	r24, 0x40	; 64
    735c:	90 e0       	ldi	r25, 0x00	; 0
    735e:	fc 01       	movw	r30, r24
    7360:	08 ed       	ldi	r16, 0xD8	; 216
    7362:	04 bf       	out	0x34, r16	; 52
    7364:	20 83       	st	Z, r18
    :
    : "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
    : "r16", "r30", "r31"
    );

  SREG = saved_sreg;
    7366:	89 81       	ldd	r24, Y+1	; 0x01
    7368:	8f bf       	out	0x3f, r24	; 63
    736a:	88 ee       	ldi	r24, 0xE8	; 232
    736c:	93 e0       	ldi	r25, 0x03	; 3
    736e:	20 e2       	ldi	r18, 0x20	; 32
    7370:	33 e0       	ldi	r19, 0x03	; 3
    7372:	f9 01       	movw	r30, r18
    7374:	31 97       	sbiw	r30, 0x01	; 1
    7376:	f1 f7       	brne	.-4      	; 0x7374 <init_all+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7378:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    737a:	d9 f7       	brne	.-10     	; 0x7372 <init_all+0xda>
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  
 // TCE1.CTRLA = 0x05;      // Prescaler: clk/64
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    737c:	e0 e4       	ldi	r30, 0x40	; 64
    737e:	fa e0       	ldi	r31, 0x0A	; 10
    7380:	84 e0       	ldi	r24, 0x04	; 4
    7382:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    7386:	8f e3       	ldi	r24, 0x3F	; 63
    7388:	9c e9       	ldi	r25, 0x9C	; 156
    738a:	86 a3       	std	Z+38, r24	; 0x26
    738c:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    738e:	82 e0       	ldi	r24, 0x02	; 2
    7390:	86 83       	std	Z+6, r24	; 0x06

  // Initialize ADC (SPI master on port C)
  SPIC.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    7392:	88 e5       	ldi	r24, 0x58	; 88
    7394:	80 93 c0 08 	sts	0x08C0, r24

  // range register 1: -5V-+5v range on ch 0,1 0-10V on ch 2, 3
  PORTC.OUTCLR = PIN4_bm;
    7398:	80 e1       	ldi	r24, 0x10	; 16
    739a:	e0 e4       	ldi	r30, 0x40	; 64
    739c:	f6 e0       	ldi	r31, 0x06	; 6
    739e:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xab;
    73a0:	8b ea       	ldi	r24, 0xAB	; 171
    73a2:	e0 ec       	ldi	r30, 0xC0	; 192
    73a4:	f8 e0       	ldi	r31, 0x08	; 8
    73a6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    73a8:	80 91 c2 08 	lds	r24, 0x08C2
    73ac:	87 ff       	sbrs	r24, 7
    73ae:	fc cf       	rjmp	.-8      	; 0x73a8 <init_all+0x110>
  SPIC.DATA = 0xe0;
    73b0:	80 ee       	ldi	r24, 0xE0	; 224
    73b2:	e0 ec       	ldi	r30, 0xC0	; 192
    73b4:	f8 e0       	ldi	r31, 0x08	; 8
    73b6:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    73b8:	80 91 c2 08 	lds	r24, 0x08C2
    73bc:	87 ff       	sbrs	r24, 7
    73be:	fc cf       	rjmp	.-8      	; 0x73b8 <init_all+0x120>
  PORTC.OUTSET = PIN4_bm;
    73c0:	e0 e4       	ldi	r30, 0x40	; 64
    73c2:	f6 e0       	ldi	r31, 0x06	; 6
    73c4:	80 e1       	ldi	r24, 0x10	; 16
    73c6:	85 83       	std	Z+5, r24	; 0x05

  // range register 2: 0-10v range on ch 4,5,6,7
  PORTC.OUTCLR = PIN4_bm;
    73c8:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xdf;
    73ca:	8f ed       	ldi	r24, 0xDF	; 223
    73cc:	e0 ec       	ldi	r30, 0xC0	; 192
    73ce:	f8 e0       	ldi	r31, 0x08	; 8
    73d0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    73d2:	80 91 c2 08 	lds	r24, 0x08C2
    73d6:	87 ff       	sbrs	r24, 7
    73d8:	fc cf       	rjmp	.-8      	; 0x73d2 <init_all+0x13a>
  SPIC.DATA = 0xe0;
    73da:	80 ee       	ldi	r24, 0xE0	; 224
    73dc:	e0 ec       	ldi	r30, 0xC0	; 192
    73de:	f8 e0       	ldi	r31, 0x08	; 8
    73e0:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    73e2:	80 91 c2 08 	lds	r24, 0x08C2
    73e6:	87 ff       	sbrs	r24, 7
    73e8:	fc cf       	rjmp	.-8      	; 0x73e2 <init_all+0x14a>
  PORTC.OUTSET = PIN4_bm;
    73ea:	e0 e4       	ldi	r30, 0x40	; 64
    73ec:	f6 e0       	ldi	r31, 0x06	; 6
    73ee:	80 e1       	ldi	r24, 0x10	; 16
    73f0:	85 83       	std	Z+5, r24	; 0x05

  // sequence register: all sequence bits off
  PORTC.OUTCLR = PIN4_bm;
    73f2:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0xe0;
    73f4:	80 ee       	ldi	r24, 0xE0	; 224
    73f6:	e0 ec       	ldi	r30, 0xC0	; 192
    73f8:	f8 e0       	ldi	r31, 0x08	; 8
    73fa:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    73fc:	80 91 c2 08 	lds	r24, 0x08C2
    7400:	87 ff       	sbrs	r24, 7
    7402:	fc cf       	rjmp	.-8      	; 0x73fc <init_all+0x164>
  SPIC.DATA = 0x00;
    7404:	e0 ec       	ldi	r30, 0xC0	; 192
    7406:	f8 e0       	ldi	r31, 0x08	; 8
    7408:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    740a:	80 91 c2 08 	lds	r24, 0x08C2
    740e:	87 ff       	sbrs	r24, 7
    7410:	fc cf       	rjmp	.-8      	; 0x740a <init_all+0x172>
  PORTC.OUTSET = PIN4_bm;
    7412:	e0 e4       	ldi	r30, 0x40	; 64
    7414:	f6 e0       	ldi	r31, 0x06	; 6
    7416:	80 e1       	ldi	r24, 0x10	; 16
    7418:	85 83       	std	Z+5, r24	; 0x05

  // control register: ch 000, mode = 00, pm = 00, code = 0(twos complement), ref = 1, seq = 00
  PORTC.OUTCLR = PIN4_bm;
    741a:	86 83       	std	Z+6, r24	; 0x06
  SPIC.DATA = 0x80;
    741c:	80 e8       	ldi	r24, 0x80	; 128
    741e:	e0 ec       	ldi	r30, 0xC0	; 192
    7420:	f8 e0       	ldi	r31, 0x08	; 8
    7422:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    7424:	80 91 c2 08 	lds	r24, 0x08C2
    7428:	87 ff       	sbrs	r24, 7
    742a:	fc cf       	rjmp	.-8      	; 0x7424 <init_all+0x18c>
  SPIC.DATA = 0x10;
    742c:	80 e1       	ldi	r24, 0x10	; 16
    742e:	e0 ec       	ldi	r30, 0xC0	; 192
    7430:	f8 e0       	ldi	r31, 0x08	; 8
    7432:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPIC.STATUS, 7);
    7434:	80 91 c2 08 	lds	r24, 0x08C2
    7438:	87 ff       	sbrs	r24, 7
    743a:	fc cf       	rjmp	.-8      	; 0x7434 <init_all+0x19c>
  PORTC.OUTSET = PIN4_bm;
    743c:	90 e1       	ldi	r25, 0x10	; 16
    743e:	e0 e4       	ldi	r30, 0x40	; 64
    7440:	f6 e0       	ldi	r31, 0x06	; 6
    7442:	95 83       	std	Z+5, r25	; 0x05


  // Initialize DAC (SPI master on port D)
  SPID.CTRL = 0x58;       // Enable Master Mode, Mode 2, clkper/4
    7444:	88 e5       	ldi	r24, 0x58	; 88
    7446:	80 93 c0 09 	sts	0x09C0, r24

  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    744a:	e0 e6       	ldi	r30, 0x60	; 96
    744c:	f6 e0       	ldi	r31, 0x06	; 6
    744e:	96 83       	std	Z+6, r25	; 0x06
  SPID.DATA = 0x10;
    7450:	e0 ec       	ldi	r30, 0xC0	; 192
    7452:	f9 e0       	ldi	r31, 0x09	; 9
    7454:	93 83       	std	Z+3, r25	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    7456:	80 91 c2 09 	lds	r24, 0x09C2
    745a:	87 ff       	sbrs	r24, 7
    745c:	fc cf       	rjmp	.-8      	; 0x7456 <init_all+0x1be>
  SPID.DATA = 0x00;
    745e:	e0 ec       	ldi	r30, 0xC0	; 192
    7460:	f9 e0       	ldi	r31, 0x09	; 9
    7462:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    7464:	80 91 c2 09 	lds	r24, 0x09C2
    7468:	87 ff       	sbrs	r24, 7
    746a:	fc cf       	rjmp	.-8      	; 0x7464 <init_all+0x1cc>
  SPID.DATA = 0x1f;
    746c:	8f e1       	ldi	r24, 0x1F	; 31
    746e:	e0 ec       	ldi	r30, 0xC0	; 192
    7470:	f9 e0       	ldi	r31, 0x09	; 9
    7472:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    7474:	80 91 c2 09 	lds	r24, 0x09C2
    7478:	87 ff       	sbrs	r24, 7
    747a:	fc cf       	rjmp	.-8      	; 0x7474 <init_all+0x1dc>
  PORTD.OUTSET = PIN4_bm;
    747c:	e0 e6       	ldi	r30, 0x60	; 96
    747e:	f6 e0       	ldi	r31, 0x06	; 6
    7480:	80 e1       	ldi	r24, 0x10	; 16
    7482:	85 83       	std	Z+5, r24	; 0x05

//DAC output range register (all ch +/-10V range)  
  PORTD.OUTCLR = PIN4_bm;
    7484:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    7486:	8c e0       	ldi	r24, 0x0C	; 12
    7488:	e0 ec       	ldi	r30, 0xC0	; 192
    748a:	f9 e0       	ldi	r31, 0x09	; 9
    748c:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    748e:	80 91 c2 09 	lds	r24, 0x09C2
    7492:	87 ff       	sbrs	r24, 7
    7494:	fc cf       	rjmp	.-8      	; 0x748e <init_all+0x1f6>
  SPID.DATA = 0x00;
    7496:	e0 ec       	ldi	r30, 0xC0	; 192
    7498:	f9 e0       	ldi	r31, 0x09	; 9
    749a:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    749c:	80 91 c2 09 	lds	r24, 0x09C2
    74a0:	87 ff       	sbrs	r24, 7
    74a2:	fc cf       	rjmp	.-8      	; 0x749c <init_all+0x204>
   SPID.DATA = 0x04;
    74a4:	84 e0       	ldi	r24, 0x04	; 4
    74a6:	e0 ec       	ldi	r30, 0xC0	; 192
    74a8:	f9 e0       	ldi	r31, 0x09	; 9
    74aa:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    74ac:	80 91 c2 09 	lds	r24, 0x09C2
    74b0:	87 ff       	sbrs	r24, 7
    74b2:	fc cf       	rjmp	.-8      	; 0x74ac <init_all+0x214>
  PORTD.OUTSET = PIN4_bm;
    74b4:	80 e1       	ldi	r24, 0x10	; 16
    74b6:	e0 e6       	ldi	r30, 0x60	; 96
    74b8:	f6 e0       	ldi	r31, 0x06	; 6
    74ba:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    74bc:	0e 94 6d 3a 	call	0x74da	; 0x74da <uart_init>
  
  //initialize timer
  timer_init();
    74c0:	0e 94 99 4e 	call	0x9d32	; 0x9d32 <timer_init>
  
  Handler_Init();
    74c4:	0e 94 12 3c 	call	0x7824	; 0x7824 <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    74c8:	87 e0       	ldi	r24, 0x07	; 7
    74ca:	e0 ea       	ldi	r30, 0xA0	; 160
    74cc:	f0 e0       	ldi	r31, 0x00	; 0
    74ce:	82 83       	std	Z+2, r24	; 0x02
  sei();
    74d0:	78 94       	sei
}
    74d2:	21 96       	adiw	r28, 0x01	; 1
    74d4:	e4 e0       	ldi	r30, 0x04	; 4
    74d6:	0c 94 b8 51 	jmp	0xa370	; 0xa370 <__epilogue_restores__+0x1c>

000074da <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    74da:	10 92 85 24 	sts	0x2485, r1
    74de:	10 92 86 24 	sts	0x2486, r1
  rxfifo.idx_w = 0;
    74e2:	10 92 83 24 	sts	0x2483, r1
    74e6:	10 92 84 24 	sts	0x2484, r1
  rxfifo.count = 0;
    74ea:	10 92 87 24 	sts	0x2487, r1
    74ee:	10 92 88 24 	sts	0x2488, r1
  txfifo.idx_r = 0;
    74f2:	10 92 41 24 	sts	0x2441, r1
  txfifo.idx_w = 0;
    74f6:	10 92 40 24 	sts	0x2440, r1
  txfifo.count = 0;
    74fa:	10 92 42 24 	sts	0x2442, r1
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    74fe:	e0 ea       	ldi	r30, 0xA0	; 160
    7500:	f8 e0       	ldi	r31, 0x08	; 8
    7502:	8b e4       	ldi	r24, 0x4B	; 75
    7504:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    7506:	80 ea       	ldi	r24, 0xA0	; 160
    7508:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    750a:	80 e1       	ldi	r24, 0x10	; 16
    750c:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    750e:	83 e0       	ldi	r24, 0x03	; 3
    7510:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    7512:	88 e1       	ldi	r24, 0x18	; 24
    7514:	84 83       	std	Z+4, r24	; 0x04
}
    7516:	08 95       	ret

00007518 <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    7518:	20 91 87 24 	lds	r18, 0x2487
    751c:	30 91 88 24 	lds	r19, 0x2488
}
    7520:	c9 01       	movw	r24, r18
    7522:	08 95       	ret

00007524 <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    7524:	20 91 85 24 	lds	r18, 0x2485
    7528:	30 91 86 24 	lds	r19, 0x2486
  while(rxfifo.count == 0);
    752c:	80 91 87 24 	lds	r24, 0x2487
    7530:	90 91 88 24 	lds	r25, 0x2488
    7534:	89 2b       	or	r24, r25
    7536:	d1 f3       	breq	.-12     	; 0x752c <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    7538:	e0 91 8b 24 	lds	r30, 0x248B
    753c:	f0 91 8c 24 	lds	r31, 0x248C
    7540:	e2 0f       	add	r30, r18
    7542:	f3 1f       	adc	r31, r19
    7544:	e0 81       	ld	r30, Z
    7546:	2f 5f       	subi	r18, 0xFF	; 255
    7548:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    754a:	f8 94       	cli
  rxfifo.count--;
    754c:	80 91 87 24 	lds	r24, 0x2487
    7550:	90 91 88 24 	lds	r25, 0x2488
    7554:	01 97       	sbiw	r24, 0x01	; 1
    7556:	80 93 87 24 	sts	0x2487, r24
    755a:	90 93 88 24 	sts	0x2488, r25
  sei();
    755e:	78 94       	sei
  if(i >= rxfifo.size)
    7560:	80 91 89 24 	lds	r24, 0x2489
    7564:	90 91 8a 24 	lds	r25, 0x248A
    7568:	28 17       	cp	r18, r24
    756a:	39 07       	cpc	r19, r25
    756c:	10 f0       	brcs	.+4      	; 0x7572 <uart_get+0x4e>
    756e:	20 e0       	ldi	r18, 0x00	; 0
    7570:	30 e0       	ldi	r19, 0x00	; 0
    i = 0;
  rxfifo.idx_r = i;
    7572:	20 93 85 24 	sts	0x2485, r18
    7576:	30 93 86 24 	sts	0x2486, r19

  return d;
}
    757a:	8e 2f       	mov	r24, r30
    757c:	08 95       	ret

0000757e <uart_put>:


/* Put a character to transmit */

void uart_put (uint8_t d)
{
    757e:	28 2f       	mov	r18, r24
  uint8_t i;

  i = txfifo.idx_w;
    7580:	90 91 40 24 	lds	r25, 0x2440
  while(txfifo.count >= sizeof(txfifo.buff));
    7584:	80 91 42 24 	lds	r24, 0x2442
    7588:	80 34       	cpi	r24, 0x40	; 64
    758a:	e0 f7       	brcc	.-8      	; 0x7584 <uart_put+0x6>
  txfifo.buff[i++] = d;
    758c:	e9 2f       	mov	r30, r25
    758e:	f0 e0       	ldi	r31, 0x00	; 0
    7590:	e0 5c       	subi	r30, 0xC0	; 192
    7592:	fb 4d       	sbci	r31, 0xDB	; 219
    7594:	23 83       	std	Z+3, r18	; 0x03
    7596:	9f 5f       	subi	r25, 0xFF	; 255
  cli();
    7598:	f8 94       	cli
  txfifo.count++;
    759a:	80 91 42 24 	lds	r24, 0x2442
    759e:	8f 5f       	subi	r24, 0xFF	; 255
    75a0:	80 93 42 24 	sts	0x2442, r24
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    75a4:	81 e1       	ldi	r24, 0x11	; 17
    75a6:	e0 ea       	ldi	r30, 0xA0	; 160
    75a8:	f8 e0       	ldi	r31, 0x08	; 8
    75aa:	83 83       	std	Z+3, r24	; 0x03

  sei();
    75ac:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    75ae:	90 34       	cpi	r25, 0x40	; 64
    75b0:	08 f0       	brcs	.+2      	; 0x75b4 <uart_put+0x36>
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    i = 0;
  txfifo.idx_w = i;
    75b4:	90 93 40 24 	sts	0x2440, r25
}
    75b8:	08 95       	ret

000075ba <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    75ba:	cf 93       	push	r28
    75bc:	df 93       	push	r29
    75be:	ec 01       	movw	r28, r24
    75c0:	03 c0       	rjmp	.+6      	; 0x75c8 <uart_putstr+0xe>
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    uart_put(d);
    75c2:	0e 94 bf 3a 	call	0x757e	; 0x757e <uart_put>
    s++;
    75c6:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    75c8:	fe 01       	movw	r30, r28
    75ca:	84 91       	lpm	r24, Z+
    75cc:	88 23       	and	r24, r24
    75ce:	c9 f7       	brne	.-14     	; 0x75c2 <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    75d0:	df 91       	pop	r29
    75d2:	cf 91       	pop	r28
    75d4:	08 95       	ret

000075d6 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    75d6:	8d e0       	ldi	r24, 0x0D	; 13
    75d8:	0e 94 bf 3a 	call	0x757e	; 0x757e <uart_put>
  uart_put(LF);
    75dc:	8a e0       	ldi	r24, 0x0A	; 10
    75de:	0e 94 bf 3a 	call	0x757e	; 0x757e <uart_put>
}
    75e2:	08 95       	ret

000075e4 <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    75e4:	cf 92       	push	r12
    75e6:	df 92       	push	r13
    75e8:	ff 92       	push	r15
    75ea:	0f 93       	push	r16
    75ec:	1f 93       	push	r17
    75ee:	cf 93       	push	r28
    75f0:	df 93       	push	r29
    75f2:	6c 01       	movw	r12, r24

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    75f4:	80 91 87 24 	lds	r24, 0x2487
    75f8:	90 91 88 24 	lds	r25, 0x2488
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    75fc:	89 2b       	or	r24, r25
    75fe:	11 f4       	brne	.+4      	; 0x7604 <fill_Rx_buffer+0x20>
    7600:	ff 24       	eor	r15, r15
    7602:	3c c0       	rjmp	.+120    	; 0x767c <fill_Rx_buffer+0x98>
	{
		message_length = uart_get();
    7604:	0e 94 92 3a 	call	0x7524	; 0x7524 <uart_get>
    7608:	f8 2e       	mov	r15, r24
		
		if (message_length == 50)
    760a:	82 e3       	ldi	r24, 0x32	; 50
    760c:	f8 16       	cp	r15, r24
    760e:	29 f0       	breq	.+10     	; 0x761a <fill_Rx_buffer+0x36>
    7610:	c0 e0       	ldi	r28, 0x00	; 0
    7612:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    7614:	0f 2d       	mov	r16, r15
    7616:	10 e0       	ldi	r17, 0x00	; 0
    7618:	2e c0       	rjmp	.+92     	; 0x7676 <fill_Rx_buffer+0x92>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    761a:	0e 94 92 3a 	call	0x7524	; 0x7524 <uart_get>
    761e:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    7620:	0e 94 92 3a 	call	0x7524	; 0x7524 <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    7624:	38 2f       	mov	r19, r24
    7626:	20 e0       	ldi	r18, 0x00	; 0
    7628:	c9 01       	movw	r24, r18
    762a:	81 0f       	add	r24, r17
    762c:	91 1d       	adc	r25, r1
    762e:	8c 01       	movw	r16, r24
    7630:	c0 e0       	ldi	r28, 0x00	; 0
    7632:	d0 e0       	ldi	r29, 0x00	; 0

			for (i = 0; i < data_length+7; i++)
    7634:	09 5f       	subi	r16, 0xF9	; 249
    7636:	1f 4f       	sbci	r17, 0xFF	; 255
    7638:	0d c0       	rjmp	.+26     	; 0x7654 <fill_Rx_buffer+0x70>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    763a:	80 91 87 24 	lds	r24, 0x2487
    763e:	90 91 88 24 	lds	r25, 0x2488

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    7642:	89 2b       	or	r24, r25
    7644:	d1 f3       	breq	.-12     	; 0x763a <fill_Rx_buffer+0x56>
				Rx_buffer[i] = uart_get();
    7646:	0e 94 92 3a 	call	0x7524	; 0x7524 <uart_get>
    764a:	f6 01       	movw	r30, r12
    764c:	ec 0f       	add	r30, r28
    764e:	fd 1f       	adc	r31, r29
    7650:	80 83       	st	Z, r24
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    7652:	21 96       	adiw	r28, 0x01	; 1
    7654:	c0 17       	cp	r28, r16
    7656:	d1 07       	cpc	r29, r17
    7658:	80 f3       	brcs	.-32     	; 0x763a <fill_Rx_buffer+0x56>
    765a:	10 c0       	rjmp	.+32     	; 0x767c <fill_Rx_buffer+0x98>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    765c:	80 91 87 24 	lds	r24, 0x2487
    7660:	90 91 88 24 	lds	r25, 0x2488
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    7664:	89 2b       	or	r24, r25
    7666:	d1 f3       	breq	.-12     	; 0x765c <fill_Rx_buffer+0x78>
				Rx_buffer[i] = uart_get();
    7668:	0e 94 92 3a 	call	0x7524	; 0x7524 <uart_get>
    766c:	f6 01       	movw	r30, r12
    766e:	ec 0f       	add	r30, r28
    7670:	fd 1f       	adc	r31, r29
    7672:	80 83       	st	Z, r24
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    7674:	21 96       	adiw	r28, 0x01	; 1
    7676:	c0 17       	cp	r28, r16
    7678:	d1 07       	cpc	r29, r17
    767a:	80 f3       	brcs	.-32     	; 0x765c <fill_Rx_buffer+0x78>
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    767c:	8f 2d       	mov	r24, r15
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	df 91       	pop	r29
    7682:	cf 91       	pop	r28
    7684:	1f 91       	pop	r17
    7686:	0f 91       	pop	r16
    7688:	ff 90       	pop	r15
    768a:	df 90       	pop	r13
    768c:	cf 90       	pop	r12
    768e:	08 95       	ret

00007690 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    7690:	ff 92       	push	r15
    7692:	0f 93       	push	r16
    7694:	1f 93       	push	r17
    7696:	cf 93       	push	r28
    7698:	df 93       	push	r29
    769a:	18 2f       	mov	r17, r24
    769c:	09 2f       	mov	r16, r25
    769e:	f6 2e       	mov	r15, r22
	uint8_t i;

	uart_put(message_length);
    76a0:	86 2f       	mov	r24, r22
    76a2:	0e 94 bf 3a 	call	0x757e	; 0x757e <uart_put>
    76a6:	21 2f       	mov	r18, r17
    76a8:	30 2f       	mov	r19, r16
    76aa:	c9 01       	movw	r24, r18
    76ac:	ec 01       	movw	r28, r24
    76ae:	10 e0       	ldi	r17, 0x00	; 0
    76b0:	04 c0       	rjmp	.+8      	; 0x76ba <send_Tx_buffer+0x2a>
	for (i = 0; i < message_length;i++)
	{
		uart_put(Tx_buffer[i]);
    76b2:	89 91       	ld	r24, Y+
    76b4:	0e 94 bf 3a 	call	0x757e	; 0x757e <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    76b8:	1f 5f       	subi	r17, 0xFF	; 255
    76ba:	1f 15       	cp	r17, r15
    76bc:	d0 f3       	brcs	.-12     	; 0x76b2 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    76be:	cd b7       	in	r28, 0x3d	; 61
    76c0:	de b7       	in	r29, 0x3e	; 62
    76c2:	e5 e0       	ldi	r30, 0x05	; 5
    76c4:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <__epilogue_restores__+0x1a>

000076c8 <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    76c8:	1f 92       	push	r1
    76ca:	0f 92       	push	r0
    76cc:	0f b6       	in	r0, 0x3f	; 63
    76ce:	0f 92       	push	r0
    76d0:	08 b6       	in	r0, 0x38	; 56
    76d2:	0f 92       	push	r0
    76d4:	0b b6       	in	r0, 0x3b	; 59
    76d6:	0f 92       	push	r0
    76d8:	11 24       	eor	r1, r1
    76da:	18 be       	out	0x38, r1	; 56
    76dc:	1b be       	out	0x3b, r1	; 59
    76de:	2f 93       	push	r18
    76e0:	3f 93       	push	r19
    76e2:	4f 93       	push	r20
    76e4:	8f 93       	push	r24
    76e6:	9f 93       	push	r25
    76e8:	ef 93       	push	r30
    76ea:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    76ec:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    76f0:	20 91 87 24 	lds	r18, 0x2487
    76f4:	30 91 88 24 	lds	r19, 0x2488
  if(n < rxfifo.size) {
    76f8:	80 91 89 24 	lds	r24, 0x2489
    76fc:	90 91 8a 24 	lds	r25, 0x248A
    7700:	28 17       	cp	r18, r24
    7702:	39 07       	cpc	r19, r25
    7704:	08 f5       	brcc	.+66     	; 0x7748 <__vector_25+0x80>
    rxfifo.count = ++n;
    7706:	2f 5f       	subi	r18, 0xFF	; 255
    7708:	3f 4f       	sbci	r19, 0xFF	; 255
    770a:	20 93 87 24 	sts	0x2487, r18
    770e:	30 93 88 24 	sts	0x2488, r19
    i = rxfifo.idx_w;
    7712:	80 91 83 24 	lds	r24, 0x2483
    7716:	90 91 84 24 	lds	r25, 0x2484
    *(rxfifo.PRxBuff + i++) = d;
    771a:	e0 91 8b 24 	lds	r30, 0x248B
    771e:	f0 91 8c 24 	lds	r31, 0x248C
    7722:	e8 0f       	add	r30, r24
    7724:	f9 1f       	adc	r31, r25
    7726:	40 83       	st	Z, r20
    7728:	9c 01       	movw	r18, r24
    772a:	2f 5f       	subi	r18, 0xFF	; 255
    772c:	3f 4f       	sbci	r19, 0xFF	; 255
    if(i >= rxfifo.size)
    772e:	80 91 89 24 	lds	r24, 0x2489
    7732:	90 91 8a 24 	lds	r25, 0x248A
    7736:	28 17       	cp	r18, r24
    7738:	39 07       	cpc	r19, r25
    773a:	10 f0       	brcs	.+4      	; 0x7740 <__vector_25+0x78>
    773c:	20 e0       	ldi	r18, 0x00	; 0
    773e:	30 e0       	ldi	r19, 0x00	; 0
      i = 0;
    rxfifo.idx_w = i;
    7740:	20 93 83 24 	sts	0x2483, r18
    7744:	30 93 84 24 	sts	0x2484, r19
  }
}
    7748:	ff 91       	pop	r31
    774a:	ef 91       	pop	r30
    774c:	9f 91       	pop	r25
    774e:	8f 91       	pop	r24
    7750:	4f 91       	pop	r20
    7752:	3f 91       	pop	r19
    7754:	2f 91       	pop	r18
    7756:	0f 90       	pop	r0
    7758:	0b be       	out	0x3b, r0	; 59
    775a:	0f 90       	pop	r0
    775c:	08 be       	out	0x38, r0	; 56
    775e:	0f 90       	pop	r0
    7760:	0f be       	out	0x3f, r0	; 63
    7762:	0f 90       	pop	r0
    7764:	1f 90       	pop	r1
    7766:	18 95       	reti

00007768 <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    7768:	1f 92       	push	r1
    776a:	0f 92       	push	r0
    776c:	0f b6       	in	r0, 0x3f	; 63
    776e:	0f 92       	push	r0
    7770:	08 b6       	in	r0, 0x38	; 56
    7772:	0f 92       	push	r0
    7774:	0b b6       	in	r0, 0x3b	; 59
    7776:	0f 92       	push	r0
    7778:	11 24       	eor	r1, r1
    777a:	18 be       	out	0x38, r1	; 56
    777c:	1b be       	out	0x3b, r1	; 59
    777e:	2f 93       	push	r18
    7780:	8f 93       	push	r24
    7782:	9f 93       	push	r25
    7784:	ef 93       	push	r30
    7786:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    7788:	80 91 42 24 	lds	r24, 0x2442
  if(n) {
    778c:	88 23       	and	r24, r24
    778e:	a9 f0       	breq	.+42     	; 0x77ba <__vector_26+0x52>
    txfifo.count = --n;
    7790:	28 2f       	mov	r18, r24
    7792:	21 50       	subi	r18, 0x01	; 1
    7794:	20 93 42 24 	sts	0x2442, r18
    i = txfifo.idx_r;
    7798:	80 91 41 24 	lds	r24, 0x2441
    USARTC0.DATA = txfifo.buff[i++];
    779c:	e8 2f       	mov	r30, r24
    779e:	f0 e0       	ldi	r31, 0x00	; 0
    77a0:	e0 5c       	subi	r30, 0xC0	; 192
    77a2:	fb 4d       	sbci	r31, 0xDB	; 219
    77a4:	93 81       	ldd	r25, Z+3	; 0x03
    77a6:	90 93 a0 08 	sts	0x08A0, r25
    77aa:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    77ac:	80 34       	cpi	r24, 0x40	; 64
    77ae:	08 f0       	brcs	.+2      	; 0x77b2 <__vector_26+0x4a>
    77b0:	80 e0       	ldi	r24, 0x00	; 0
      i = 0;
    txfifo.idx_r = i;
    77b2:	80 93 41 24 	sts	0x2441, r24
  }
  if(n == 0)
    77b6:	22 23       	and	r18, r18
    77b8:	21 f4       	brne	.+8      	; 0x77c2 <__vector_26+0x5a>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    77ba:	80 e1       	ldi	r24, 0x10	; 16
    77bc:	e0 ea       	ldi	r30, 0xA0	; 160
    77be:	f8 e0       	ldi	r31, 0x08	; 8
    77c0:	83 83       	std	Z+3, r24	; 0x03
}
    77c2:	ff 91       	pop	r31
    77c4:	ef 91       	pop	r30
    77c6:	9f 91       	pop	r25
    77c8:	8f 91       	pop	r24
    77ca:	2f 91       	pop	r18
    77cc:	0f 90       	pop	r0
    77ce:	0b be       	out	0x3b, r0	; 59
    77d0:	0f 90       	pop	r0
    77d2:	08 be       	out	0x38, r0	; 56
    77d4:	0f 90       	pop	r0
    77d6:	0f be       	out	0x3f, r0	; 63
    77d8:	0f 90       	pop	r0
    77da:	1f 90       	pop	r1
    77dc:	18 95       	reti

000077de <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    77de:	80 91 8b 24 	lds	r24, 0x248B
    77e2:	90 91 8c 24 	lds	r25, 0x248C
    77e6:	0e 94 78 52 	call	0xa4f0	; 0xa4f0 <free>

}
    77ea:	08 95       	ret

000077ec <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    77ec:	8f 3f       	cpi	r24, 0xFF	; 255
    77ee:	59 f4       	brne	.+22     	; 0x7806 <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    77f0:	80 e4       	ldi	r24, 0x40	; 64
    77f2:	90 e0       	ldi	r25, 0x00	; 0
    77f4:	0e 94 cb 51 	call	0xa396	; 0xa396 <malloc>
    77f8:	80 93 8b 24 	sts	0x248B, r24
    77fc:	90 93 8c 24 	sts	0x248C, r25
 rxfifo.size = 64;
    7800:	80 e4       	ldi	r24, 0x40	; 64
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	0a c0       	rjmp	.+20     	; 0x781a <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    7806:	8e e0       	ldi	r24, 0x0E	; 14
    7808:	96 e0       	ldi	r25, 0x06	; 6
    780a:	0e 94 cb 51 	call	0xa396	; 0xa396 <malloc>
    780e:	80 93 8b 24 	sts	0x248B, r24
    7812:	90 93 8c 24 	sts	0x248C, r25
 rxfifo.size = 1550;
    7816:	8e e0       	ldi	r24, 0x0E	; 14
    7818:	96 e0       	ldi	r25, 0x06	; 6
    781a:	80 93 89 24 	sts	0x2489, r24
    781e:	90 93 8a 24 	sts	0x248A, r25
    7822:	08 95       	ret

00007824 <Handler_Init>:
  uint8_t lcv;

  // Initialize masks to FALSE
  for(lcv=0;lcv<HANDLER_MAX;lcv++)
  {
    mask[lcv] = FALSE;
    7824:	10 92 cd 2a 	sts	0x2ACD, r1
    7828:	10 92 ce 2a 	sts	0x2ACE, r1
    782c:	10 92 cf 2a 	sts	0x2ACF, r1
    7830:	10 92 d0 2a 	sts	0x2AD0, r1
    7834:	10 92 d1 2a 	sts	0x2AD1, r1
    7838:	10 92 d2 2a 	sts	0x2AD2, r1
  }

// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
  TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    783c:	e0 e0       	ldi	r30, 0x00	; 0
    783e:	fa e0       	ldi	r31, 0x0A	; 10
    7840:	82 e0       	ldi	r24, 0x02	; 2
    7842:	80 83       	st	Z, r24
  TCE0.PER   = 511;       // 256*2 - 1
    7844:	8f ef       	ldi	r24, 0xFF	; 255
    7846:	91 e0       	ldi	r25, 0x01	; 1
    7848:	86 a3       	std	Z+38, r24	; 0x26
    784a:	97 a3       	std	Z+39, r25	; 0x27
  TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    784c:	83 e0       	ldi	r24, 0x03	; 3
    784e:	86 83       	std	Z+6, r24	; 0x06
}
    7850:	08 95       	ret

00007852 <__vector_47>:


// The interrupt handler function of the timer E0 interrupt.

ISR(TCE0_OVF_vect)
{
    7852:	1f 92       	push	r1
    7854:	0f 92       	push	r0
    7856:	0f b6       	in	r0, 0x3f	; 63
    7858:	0f 92       	push	r0
    785a:	08 b6       	in	r0, 0x38	; 56
    785c:	0f 92       	push	r0
    785e:	09 b6       	in	r0, 0x39	; 57
    7860:	0f 92       	push	r0
    7862:	0a b6       	in	r0, 0x3a	; 58
    7864:	0f 92       	push	r0
    7866:	0b b6       	in	r0, 0x3b	; 59
    7868:	0f 92       	push	r0
    786a:	11 24       	eor	r1, r1
    786c:	18 be       	out	0x38, r1	; 56
    786e:	19 be       	out	0x39, r1	; 57
    7870:	1a be       	out	0x3a, r1	; 58
    7872:	1b be       	out	0x3b, r1	; 59
    7874:	ef 92       	push	r14
    7876:	ff 92       	push	r15
    7878:	0f 93       	push	r16
    787a:	1f 93       	push	r17
    787c:	2f 93       	push	r18
    787e:	3f 93       	push	r19
    7880:	4f 93       	push	r20
    7882:	5f 93       	push	r21
    7884:	6f 93       	push	r22
    7886:	7f 93       	push	r23
    7888:	8f 93       	push	r24
    788a:	9f 93       	push	r25
    788c:	af 93       	push	r26
    788e:	bf 93       	push	r27
    7890:	cf 93       	push	r28
    7892:	df 93       	push	r29
    7894:	ef 93       	push	r30
    7896:	ff 93       	push	r31
    7898:	93 ed       	ldi	r25, 0xD3	; 211
    789a:	e9 2e       	mov	r14, r25
    789c:	9a e2       	ldi	r25, 0x2A	; 42
    789e:	f9 2e       	mov	r15, r25
    78a0:	01 ec       	ldi	r16, 0xC1	; 193
    78a2:	1a e2       	ldi	r17, 0x2A	; 42
    78a4:	c0 e0       	ldi	r28, 0x00	; 0
    78a6:	d0 e0       	ldi	r29, 0x00	; 0
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
   {
     if(mask[lcv]==TRUE)			/* if int enabled check count */
    78a8:	fe 01       	movw	r30, r28
    78aa:	e3 53       	subi	r30, 0x33	; 51
    78ac:	f5 4d       	sbci	r31, 0xD5	; 213
    78ae:	80 81       	ld	r24, Z
    78b0:	81 30       	cpi	r24, 0x01	; 1
    78b2:	39 f5       	brne	.+78     	; 0x7902 <__vector_47+0xb0>
     {
       count[lcv]--;			
    78b4:	fe 01       	movw	r30, r28
    78b6:	ee 0f       	add	r30, r30
    78b8:	ff 1f       	adc	r31, r31
    78ba:	ee 0f       	add	r30, r30
    78bc:	ff 1f       	adc	r31, r31
    78be:	e5 51       	subi	r30, 0x15	; 21
    78c0:	f5 4d       	sbci	r31, 0xD5	; 213
    78c2:	80 81       	ld	r24, Z
    78c4:	91 81       	ldd	r25, Z+1	; 0x01
    78c6:	a2 81       	ldd	r26, Z+2	; 0x02
    78c8:	b3 81       	ldd	r27, Z+3	; 0x03
    78ca:	01 97       	sbiw	r24, 0x01	; 1
    78cc:	a1 09       	sbc	r26, r1
    78ce:	b1 09       	sbc	r27, r1
    78d0:	80 83       	st	Z, r24
    78d2:	91 83       	std	Z+1, r25	; 0x01
    78d4:	a2 83       	std	Z+2, r26	; 0x02
    78d6:	b3 83       	std	Z+3, r27	; 0x03
       if(count[lcv]==0)		/* if count=0, perform function call and reset */
    78d8:	80 81       	ld	r24, Z
    78da:	91 81       	ldd	r25, Z+1	; 0x01
    78dc:	a2 81       	ldd	r26, Z+2	; 0x02
    78de:	b3 81       	ldd	r27, Z+3	; 0x03
    78e0:	00 97       	sbiw	r24, 0x00	; 0
    78e2:	a1 05       	cpc	r26, r1
    78e4:	b1 05       	cpc	r27, r1
    78e6:	69 f4       	brne	.+26     	; 0x7902 <__vector_47+0xb0>
       {
         count[lcv]=start_count[lcv];
    78e8:	d7 01       	movw	r26, r14
    78ea:	2d 91       	ld	r18, X+
    78ec:	3d 91       	ld	r19, X+
    78ee:	4d 91       	ld	r20, X+
    78f0:	5c 91       	ld	r21, X
    78f2:	20 83       	st	Z, r18
    78f4:	31 83       	std	Z+1, r19	; 0x01
    78f6:	42 83       	std	Z+2, r20	; 0x02
    78f8:	53 83       	std	Z+3, r21	; 0x03
		 //*
         (*p_handler_func[lcv]) ();
    78fa:	d8 01       	movw	r26, r16
    78fc:	ed 91       	ld	r30, X+
    78fe:	fc 91       	ld	r31, X
    7900:	19 95       	eicall
    7902:	21 96       	adiw	r28, 0x01	; 1
    7904:	84 e0       	ldi	r24, 0x04	; 4
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	e8 0e       	add	r14, r24
    790a:	f9 1e       	adc	r15, r25
    790c:	0e 5f       	subi	r16, 0xFE	; 254
    790e:	1f 4f       	sbci	r17, 0xFF	; 255
 uint8_t lcv;
  
//ledToggle(1);
//xputs(PSTR("\nISR Works\n"));

   for(lcv=0;lcv<HANDLER_MAX;lcv++)		/* check and act on all vectors */
    7910:	c6 30       	cpi	r28, 0x06	; 6
    7912:	d1 05       	cpc	r29, r1
    7914:	49 f6       	brne	.-110    	; 0x78a8 <__vector_47+0x56>
     }
   }



}
    7916:	ff 91       	pop	r31
    7918:	ef 91       	pop	r30
    791a:	df 91       	pop	r29
    791c:	cf 91       	pop	r28
    791e:	bf 91       	pop	r27
    7920:	af 91       	pop	r26
    7922:	9f 91       	pop	r25
    7924:	8f 91       	pop	r24
    7926:	7f 91       	pop	r23
    7928:	6f 91       	pop	r22
    792a:	5f 91       	pop	r21
    792c:	4f 91       	pop	r20
    792e:	3f 91       	pop	r19
    7930:	2f 91       	pop	r18
    7932:	1f 91       	pop	r17
    7934:	0f 91       	pop	r16
    7936:	ff 90       	pop	r15
    7938:	ef 90       	pop	r14
    793a:	0f 90       	pop	r0
    793c:	0b be       	out	0x3b, r0	; 59
    793e:	0f 90       	pop	r0
    7940:	0a be       	out	0x3a, r0	; 58
    7942:	0f 90       	pop	r0
    7944:	09 be       	out	0x39, r0	; 57
    7946:	0f 90       	pop	r0
    7948:	08 be       	out	0x38, r0	; 56
    794a:	0f 90       	pop	r0
    794c:	0f be       	out	0x3f, r0	; 63
    794e:	0f 90       	pop	r0
    7950:	1f 90       	pop	r1
    7952:	18 95       	reti

00007954 <Reg_Handler>:
//            long s_cnt = start count of the timer
//            unsigned char priority = priority of the interrupt request
//            unsigned char msk = the mask of the interrupt. TRUE/FALSE value
            
void Reg_Handler(void* fptr,uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    7954:	0f 93       	push	r16
    7956:	cf 93       	push	r28
    7958:	df 93       	push	r29
    795a:	a2 2f       	mov	r26, r18
  mask[priority]=FALSE;             // disable while modifying vector
    795c:	b0 e0       	ldi	r27, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    795e:	fd 01       	movw	r30, r26
    7960:	ee 0f       	add	r30, r30
    7962:	ff 1f       	adc	r31, r31
    7964:	ef 53       	subi	r30, 0x3F	; 63
    7966:	f5 4d       	sbci	r31, 0xD5	; 213
    7968:	80 83       	st	Z, r24
    796a:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    796c:	fd 01       	movw	r30, r26
    796e:	ee 0f       	add	r30, r30
    7970:	ff 1f       	adc	r31, r31
    7972:	ee 0f       	add	r30, r30
    7974:	ff 1f       	adc	r31, r31
    7976:	cf 01       	movw	r24, r30
    7978:	8d 52       	subi	r24, 0x2D	; 45
    797a:	95 4d       	sbci	r25, 0xD5	; 213
    797c:	ec 01       	movw	r28, r24
    797e:	48 83       	st	Y, r20
    7980:	59 83       	std	Y+1, r21	; 0x01
    7982:	6a 83       	std	Y+2, r22	; 0x02
    7984:	7b 83       	std	Y+3, r23	; 0x03
  count[priority]=s_cnt;            // set count
    7986:	e5 51       	subi	r30, 0x15	; 21
    7988:	f5 4d       	sbci	r31, 0xD5	; 213
    798a:	40 83       	st	Z, r20
    798c:	51 83       	std	Z+1, r21	; 0x01
    798e:	62 83       	std	Z+2, r22	; 0x02
    7990:	73 83       	std	Z+3, r23	; 0x03
  mask[priority]=msk;				        // set interrupt mask
    7992:	a3 53       	subi	r26, 0x33	; 51
    7994:	b5 4d       	sbci	r27, 0xD5	; 213
    7996:	0c 93       	st	X, r16
}
    7998:	df 91       	pop	r29
    799a:	cf 91       	pop	r28
    799c:	0f 91       	pop	r16
    799e:	08 95       	ret

000079a0 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t s_cnt, uint8_t priority, uint8_t msk)
{	
    79a0:	0f 93       	push	r16
    79a2:	cf 93       	push	r28
    79a4:	df 93       	push	r29
  mask[priority]=FALSE;             // disable while modifying vector
    79a6:	c2 2f       	mov	r28, r18
    79a8:	d0 e0       	ldi	r29, 0x00	; 0
  p_handler_func[priority]=fptr;    // set function pointer
    79aa:	fe 01       	movw	r30, r28
    79ac:	ee 0f       	add	r30, r30
    79ae:	ff 1f       	adc	r31, r31
    79b0:	ef 53       	subi	r30, 0x3F	; 63
    79b2:	f5 4d       	sbci	r31, 0xD5	; 213
    79b4:	80 83       	st	Z, r24
    79b6:	91 83       	std	Z+1, r25	; 0x01
  start_count[priority]=s_cnt;      // set start count
    79b8:	ce 01       	movw	r24, r28
    79ba:	88 0f       	add	r24, r24
    79bc:	99 1f       	adc	r25, r25
    79be:	88 0f       	add	r24, r24
    79c0:	99 1f       	adc	r25, r25
    79c2:	fc 01       	movw	r30, r24
    79c4:	ed 52       	subi	r30, 0x2D	; 45
    79c6:	f5 4d       	sbci	r31, 0xD5	; 213
    79c8:	40 83       	st	Z, r20
    79ca:	51 83       	std	Z+1, r21	; 0x01
    79cc:	62 83       	std	Z+2, r22	; 0x02
    79ce:	73 83       	std	Z+3, r23	; 0x03
	
  //if current count is greater than the desired count, then reset current count
  if (count[priority] > s_cnt){
    79d0:	fc 01       	movw	r30, r24
    79d2:	e5 51       	subi	r30, 0x15	; 21
    79d4:	f5 4d       	sbci	r31, 0xD5	; 213
    79d6:	80 81       	ld	r24, Z
    79d8:	91 81       	ldd	r25, Z+1	; 0x01
    79da:	a2 81       	ldd	r26, Z+2	; 0x02
    79dc:	b3 81       	ldd	r27, Z+3	; 0x03
    79de:	48 17       	cp	r20, r24
    79e0:	59 07       	cpc	r21, r25
    79e2:	6a 07       	cpc	r22, r26
    79e4:	7b 07       	cpc	r23, r27
    79e6:	20 f4       	brcc	.+8      	; 0x79f0 <Update_Reg_Handler+0x50>
    count[priority]=s_cnt;          // set count
    79e8:	40 83       	st	Z, r20
    79ea:	51 83       	std	Z+1, r21	; 0x01
    79ec:	62 83       	std	Z+2, r22	; 0x02
    79ee:	73 83       	std	Z+3, r23	; 0x03
  }

  mask[priority]=msk;               // set interrupt mask
    79f0:	c3 53       	subi	r28, 0x33	; 51
    79f2:	d5 4d       	sbci	r29, 0xD5	; 213
    79f4:	08 83       	st	Y, r16
}
    79f6:	df 91       	pop	r29
    79f8:	cf 91       	pop	r28
    79fa:	0f 91       	pop	r16
    79fc:	08 95       	ret

000079fe <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    79fe:	dc 01       	movw	r26, r24
    7a00:	fb 01       	movw	r30, r22
	twi->interface = module;
    7a02:	6d 93       	st	X+, r22
    7a04:	7c 93       	st	X, r23
    7a06:	11 97       	sbiw	r26, 0x01	; 1
	twi->interface->MASTER.CTRLA = intLevel |
    7a08:	48 63       	ori	r20, 0x38	; 56
    7a0a:	41 83       	std	Z+1, r20	; 0x01
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    7a0c:	ed 91       	ld	r30, X+
    7a0e:	fc 91       	ld	r31, X
    7a10:	11 97       	sbiw	r26, 0x01	; 1
    7a12:	25 83       	std	Z+5, r18	; 0x05
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    7a14:	ed 91       	ld	r30, X+
    7a16:	fc 91       	ld	r31, X
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	84 83       	std	Z+4, r24	; 0x04
}
    7a1c:	08 95       	ret

00007a1e <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_IDLE_gc    Bus state is idle.
 *  \retval TWI_MASTER_BUSSTATE_OWNER_gc   Bus state is owned by the master.
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
    7a1e:	fc 01       	movw	r30, r24
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    7a20:	01 90       	ld	r0, Z+
    7a22:	f0 81       	ld	r31, Z
    7a24:	e0 2d       	mov	r30, r0
    7a26:	24 81       	ldd	r18, Z+4	; 0x04
    7a28:	30 e0       	ldi	r19, 0x00	; 0
    7a2a:	23 70       	andi	r18, 0x03	; 3
    7a2c:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    7a2e:	c9 01       	movw	r24, r18
    7a30:	08 95       	ret

00007a32 <TWI_MasterReady>:
 *
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
    7a32:	fc 01       	movw	r30, r24
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    7a34:	85 85       	ldd	r24, Z+13	; 0x0d
    7a36:	90 e0       	ldi	r25, 0x00	; 0
    7a38:	88 23       	and	r24, r24
    7a3a:	09 f4       	brne	.+2      	; 0x7a3e <TWI_MasterReady+0xc>
    7a3c:	91 e0       	ldi	r25, 0x01	; 1
	return twi_status;
}
    7a3e:	89 2f       	mov	r24, r25
    7a40:	08 95       	ret

00007a42 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    7a42:	0f 93       	push	r16
    7a44:	cf 93       	push	r28
    7a46:	df 93       	push	r29
    7a48:	dc 01       	movw	r26, r24
    7a4a:	72 2f       	mov	r23, r18
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    7a4c:	17 96       	adiw	r26, 0x07	; 7
    7a4e:	8c 91       	ld	r24, X
    7a50:	17 97       	sbiw	r26, 0x07	; 7
    7a52:	82 17       	cp	r24, r18
    7a54:	08 f4       	brcc	.+2      	; 0x7a58 <TWI_MasterWriteRead+0x16>
    7a56:	48 c0       	rjmp	.+144    	; 0x7ae8 <TWI_MasterWriteRead+0xa6>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    7a58:	18 96       	adiw	r26, 0x08	; 8
    7a5a:	8c 91       	ld	r24, X
    7a5c:	18 97       	sbiw	r26, 0x08	; 8
    7a5e:	80 17       	cp	r24, r16
    7a60:	08 f4       	brcc	.+2      	; 0x7a64 <TWI_MasterWriteRead+0x22>
    7a62:	42 c0       	rjmp	.+132    	; 0x7ae8 <TWI_MasterWriteRead+0xa6>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    7a64:	1d 96       	adiw	r26, 0x0d	; 13
    7a66:	8c 91       	ld	r24, X
    7a68:	1d 97       	sbiw	r26, 0x0d	; 13
    7a6a:	88 23       	and	r24, r24
    7a6c:	e9 f5       	brne	.+122    	; 0x7ae8 <TWI_MasterWriteRead+0xa6>

    twi->status = TWIM_STATUS_BUSY;
    7a6e:	81 e0       	ldi	r24, 0x01	; 1
    7a70:	1d 96       	adiw	r26, 0x0d	; 13
    7a72:	8c 93       	st	X, r24
    7a74:	1d 97       	sbiw	r26, 0x0d	; 13
    twi->result = TWIM_RESULT_UNKNOWN;
    7a76:	1e 96       	adiw	r26, 0x0e	; 14
    7a78:	1c 92       	st	X, r1
    7a7a:	1e 97       	sbiw	r26, 0x0e	; 14

    twi->address = address<<1;
    7a7c:	66 0f       	add	r22, r22
    7a7e:	12 96       	adiw	r26, 0x02	; 2
    7a80:	6c 93       	st	X, r22
    7a82:	12 97       	sbiw	r26, 0x02	; 2
    7a84:	ea 01       	movw	r28, r20
    7a86:	90 e0       	ldi	r25, 0x00	; 0
    7a88:	09 c0       	rjmp	.+18     	; 0x7a9c <TWI_MasterWriteRead+0x5a>

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    7a8a:	13 96       	adiw	r26, 0x03	; 3
    7a8c:	ed 91       	ld	r30, X+
    7a8e:	fc 91       	ld	r31, X
    7a90:	14 97       	sbiw	r26, 0x04	; 4
    7a92:	e9 0f       	add	r30, r25
    7a94:	f1 1d       	adc	r31, r1
    7a96:	89 91       	ld	r24, Y+
    7a98:	80 83       	st	Z, r24
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    7a9a:	9f 5f       	subi	r25, 0xFF	; 255
    7a9c:	97 17       	cp	r25, r23
    7a9e:	a8 f3       	brcs	.-22     	; 0x7a8a <TWI_MasterWriteRead+0x48>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    7aa0:	19 96       	adiw	r26, 0x09	; 9
    7aa2:	7c 93       	st	X, r23
    7aa4:	19 97       	sbiw	r26, 0x09	; 9
    twi->bytesToRead = bytesToRead;
    7aa6:	1a 96       	adiw	r26, 0x0a	; 10
    7aa8:	0c 93       	st	X, r16
    7aaa:	1a 97       	sbiw	r26, 0x0a	; 10
    twi->bytesWritten = 0;
    7aac:	1b 96       	adiw	r26, 0x0b	; 11
    7aae:	1c 92       	st	X, r1
    7ab0:	1b 97       	sbiw	r26, 0x0b	; 11
    twi->bytesRead = 0;
    7ab2:	1c 96       	adiw	r26, 0x0c	; 12
    7ab4:	1c 92       	st	X, r1
    7ab6:	1c 97       	sbiw	r26, 0x0c	; 12

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    7ab8:	19 96       	adiw	r26, 0x09	; 9
    7aba:	8c 91       	ld	r24, X
    7abc:	19 97       	sbiw	r26, 0x09	; 9
    7abe:	88 23       	and	r24, r24
    7ac0:	29 f0       	breq	.+10     	; 0x7acc <TWI_MasterWriteRead+0x8a>
      uint8_t writeAddress = twi->address & ~0x01;
    7ac2:	12 96       	adiw	r26, 0x02	; 2
    7ac4:	8c 91       	ld	r24, X
    7ac6:	12 97       	sbiw	r26, 0x02	; 2
    7ac8:	8e 7f       	andi	r24, 0xFE	; 254
    7aca:	09 c0       	rjmp	.+18     	; 0x7ade <TWI_MasterWriteRead+0x9c>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    7acc:	1a 96       	adiw	r26, 0x0a	; 10
    7ace:	8c 91       	ld	r24, X
    7ad0:	1a 97       	sbiw	r26, 0x0a	; 10
    7ad2:	88 23       	and	r24, r24
    7ad4:	39 f0       	breq	.+14     	; 0x7ae4 <TWI_MasterWriteRead+0xa2>
      uint8_t readAddress = twi->address | 0x01;
    7ad6:	12 96       	adiw	r26, 0x02	; 2
    7ad8:	8c 91       	ld	r24, X
    7ada:	12 97       	sbiw	r26, 0x02	; 2
    7adc:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    7ade:	ed 91       	ld	r30, X+
    7ae0:	fc 91       	ld	r31, X
    7ae2:	86 83       	std	Z+6, r24	; 0x06
    7ae4:	81 e0       	ldi	r24, 0x01	; 1
    7ae6:	01 c0       	rjmp	.+2      	; 0x7aea <TWI_MasterWriteRead+0xa8>
    7ae8:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
  } else {
    return false;
  }
}
    7aea:	df 91       	pop	r29
    7aec:	cf 91       	pop	r28
    7aee:	0f 91       	pop	r16
    7af0:	08 95       	ret

00007af2 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    7af2:	0f 93       	push	r16
    7af4:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    7af6:	40 e0       	ldi	r20, 0x00	; 0
    7af8:	50 e0       	ldi	r21, 0x00	; 0
    7afa:	20 e0       	ldi	r18, 0x00	; 0
    7afc:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
	return twi_status;
}
    7b00:	0f 91       	pop	r16
    7b02:	08 95       	ret

00007b04 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    7b04:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    7b06:	00 e0       	ldi	r16, 0x00	; 0
    7b08:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <TWI_MasterWriteRead>
	return twi_status;
}
    7b0c:	0f 91       	pop	r16
    7b0e:	08 95       	ret

00007b10 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    7b10:	dc 01       	movw	r26, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    7b12:	ed 91       	ld	r30, X+
    7b14:	fc 91       	ld	r31, X
    7b16:	11 97       	sbiw	r26, 0x01	; 1
    7b18:	94 81       	ldd	r25, Z+4	; 0x04

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    7b1a:	92 ff       	sbrs	r25, 2
    7b1c:	02 c0       	rjmp	.+4      	; 0x7b22 <TWI_MasterArbitrationLostBusErrorHandler+0x12>
    twi->result = TWIM_RESULT_BUS_ERROR;
    7b1e:	84 e0       	ldi	r24, 0x04	; 4
    7b20:	01 c0       	rjmp	.+2      	; 0x7b24 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    7b22:	83 e0       	ldi	r24, 0x03	; 3
    7b24:	1e 96       	adiw	r26, 0x0e	; 14
    7b26:	8c 93       	st	X, r24
    7b28:	1e 97       	sbiw	r26, 0x0e	; 14
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    7b2a:	ed 91       	ld	r30, X+
    7b2c:	fc 91       	ld	r31, X
    7b2e:	11 97       	sbiw	r26, 0x01	; 1
    7b30:	98 60       	ori	r25, 0x08	; 8
    7b32:	94 83       	std	Z+4, r25	; 0x04
  twi->status = TWIM_STATUS_READY;
    7b34:	1d 96       	adiw	r26, 0x0d	; 13
    7b36:	1c 92       	st	X, r1
}
    7b38:	08 95       	ret

00007b3a <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    7b3a:	cf 93       	push	r28
    7b3c:	df 93       	push	r29
    7b3e:	dc 01       	movw	r26, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    7b40:	19 96       	adiw	r26, 0x09	; 9
    7b42:	9c 91       	ld	r25, X
    7b44:	19 97       	sbiw	r26, 0x09	; 9
  uint8_t bytesToRead   = twi->bytesToRead;
    7b46:	1a 96       	adiw	r26, 0x0a	; 10
    7b48:	2c 91       	ld	r18, X
    7b4a:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    7b4c:	cd 91       	ld	r28, X+
    7b4e:	dc 91       	ld	r29, X
    7b50:	11 97       	sbiw	r26, 0x01	; 1
    7b52:	8c 81       	ldd	r24, Y+4	; 0x04
    7b54:	84 ff       	sbrs	r24, 4
    7b56:	04 c0       	rjmp	.+8      	; 0x7b60 <TWI_MasterWriteHandler+0x26>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    7b58:	83 e0       	ldi	r24, 0x03	; 3
    7b5a:	8b 83       	std	Y+3, r24	; 0x03
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    7b5c:	85 e0       	ldi	r24, 0x05	; 5
    7b5e:	24 c0       	rjmp	.+72     	; 0x7ba8 <TWI_MasterWriteHandler+0x6e>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    7b60:	1b 96       	adiw	r26, 0x0b	; 11
    7b62:	8c 91       	ld	r24, X
    7b64:	1b 97       	sbiw	r26, 0x0b	; 11
    7b66:	89 17       	cp	r24, r25
    7b68:	90 f4       	brcc	.+36     	; 0x7b8e <TWI_MasterWriteHandler+0x54>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    7b6a:	1b 96       	adiw	r26, 0x0b	; 11
    7b6c:	8c 91       	ld	r24, X
    7b6e:	1b 97       	sbiw	r26, 0x0b	; 11
    7b70:	13 96       	adiw	r26, 0x03	; 3
    7b72:	ed 91       	ld	r30, X+
    7b74:	fc 91       	ld	r31, X
    7b76:	14 97       	sbiw	r26, 0x04	; 4
    7b78:	e8 0f       	add	r30, r24
    7b7a:	f1 1d       	adc	r31, r1
    7b7c:	80 81       	ld	r24, Z
    twi->interface->MASTER.DATA = data;
    7b7e:	8f 83       	std	Y+7, r24	; 0x07
    ++twi->bytesWritten;
    7b80:	1b 96       	adiw	r26, 0x0b	; 11
    7b82:	8c 91       	ld	r24, X
    7b84:	1b 97       	sbiw	r26, 0x0b	; 11
    7b86:	8f 5f       	subi	r24, 0xFF	; 255
    7b88:	1b 96       	adiw	r26, 0x0b	; 11
    7b8a:	8c 93       	st	X, r24
    7b8c:	12 c0       	rjmp	.+36     	; 0x7bb2 <TWI_MasterWriteHandler+0x78>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    7b8e:	1c 96       	adiw	r26, 0x0c	; 12
    7b90:	8c 91       	ld	r24, X
    7b92:	1c 97       	sbiw	r26, 0x0c	; 12
    7b94:	82 17       	cp	r24, r18
    7b96:	28 f4       	brcc	.+10     	; 0x7ba2 <TWI_MasterWriteHandler+0x68>
    uint8_t readAddress = twi->address | 0x01;
    7b98:	12 96       	adiw	r26, 0x02	; 2
    7b9a:	8c 91       	ld	r24, X
    7b9c:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    7b9e:	8e 83       	std	Y+6, r24	; 0x06
    7ba0:	08 c0       	rjmp	.+16     	; 0x7bb2 <TWI_MasterWriteHandler+0x78>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    7ba2:	83 e0       	ldi	r24, 0x03	; 3
    7ba4:	8b 83       	std	Y+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    7ba6:	81 e0       	ldi	r24, 0x01	; 1
    7ba8:	1e 96       	adiw	r26, 0x0e	; 14
    7baa:	8c 93       	st	X, r24
    7bac:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    7bae:	1d 96       	adiw	r26, 0x0d	; 13
    7bb0:	1c 92       	st	X, r1
	}
}
    7bb2:	df 91       	pop	r29
    7bb4:	cf 91       	pop	r28
    7bb6:	08 95       	ret

00007bb8 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    7bb8:	dc 01       	movw	r26, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    7bba:	1c 96       	adiw	r26, 0x0c	; 12
    7bbc:	9c 91       	ld	r25, X
    7bbe:	1c 97       	sbiw	r26, 0x0c	; 12
    7bc0:	18 96       	adiw	r26, 0x08	; 8
    7bc2:	8c 91       	ld	r24, X
    7bc4:	18 97       	sbiw	r26, 0x08	; 8
    7bc6:	ed 91       	ld	r30, X+
    7bc8:	fc 91       	ld	r31, X
    7bca:	11 97       	sbiw	r26, 0x01	; 1
    7bcc:	98 17       	cp	r25, r24
    7bce:	98 f4       	brcc	.+38     	; 0x7bf6 <TWI_MasterReadHandler+0x3e>
    uint8_t data = twi->interface->MASTER.DATA;
    7bd0:	97 81       	ldd	r25, Z+7	; 0x07
    *(twi->PreadData + twi->bytesRead) = data;
    7bd2:	1c 96       	adiw	r26, 0x0c	; 12
    7bd4:	8c 91       	ld	r24, X
    7bd6:	1c 97       	sbiw	r26, 0x0c	; 12
    7bd8:	15 96       	adiw	r26, 0x05	; 5
    7bda:	ed 91       	ld	r30, X+
    7bdc:	fc 91       	ld	r31, X
    7bde:	16 97       	sbiw	r26, 0x06	; 6
    7be0:	e8 0f       	add	r30, r24
    7be2:	f1 1d       	adc	r31, r1
    7be4:	90 83       	st	Z, r25
    twi->bytesRead++;
    7be6:	1c 96       	adiw	r26, 0x0c	; 12
    7be8:	8c 91       	ld	r24, X
    7bea:	1c 97       	sbiw	r26, 0x0c	; 12
    7bec:	8f 5f       	subi	r24, 0xFF	; 255
    7bee:	1c 96       	adiw	r26, 0x0c	; 12
    7bf0:	8c 93       	st	X, r24
    7bf2:	1c 97       	sbiw	r26, 0x0c	; 12
    7bf4:	09 c0       	rjmp	.+18     	; 0x7c08 <TWI_MasterReadHandler+0x50>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    7bf6:	83 e0       	ldi	r24, 0x03	; 3
    7bf8:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    7bfa:	82 e0       	ldi	r24, 0x02	; 2
    7bfc:	1e 96       	adiw	r26, 0x0e	; 14
    7bfe:	8c 93       	st	X, r24
    7c00:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    7c02:	1d 96       	adiw	r26, 0x0d	; 13
    7c04:	1c 92       	st	X, r1
    7c06:	1d 97       	sbiw	r26, 0x0d	; 13
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    7c08:	1a 96       	adiw	r26, 0x0a	; 10
    7c0a:	9c 91       	ld	r25, X
    7c0c:	1a 97       	sbiw	r26, 0x0a	; 10

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    7c0e:	1c 96       	adiw	r26, 0x0c	; 12
    7c10:	8c 91       	ld	r24, X
    7c12:	1c 97       	sbiw	r26, 0x0c	; 12
    7c14:	ed 91       	ld	r30, X+
    7c16:	fc 91       	ld	r31, X
    7c18:	11 97       	sbiw	r26, 0x01	; 1
    7c1a:	89 17       	cp	r24, r25
    7c1c:	18 f4       	brcc	.+6      	; 0x7c24 <TWI_MasterReadHandler+0x6c>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    7c1e:	82 e0       	ldi	r24, 0x02	; 2
    7c20:	83 83       	std	Z+3, r24	; 0x03
    7c22:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    7c24:	87 e0       	ldi	r24, 0x07	; 7
    7c26:	83 83       	std	Z+3, r24	; 0x03
	  twi->result = TWIM_RESULT_OK;
    7c28:	81 e0       	ldi	r24, 0x01	; 1
    7c2a:	1e 96       	adiw	r26, 0x0e	; 14
    7c2c:	8c 93       	st	X, r24
    7c2e:	1e 97       	sbiw	r26, 0x0e	; 14
	  twi->status = TWIM_STATUS_READY;
    7c30:	1d 96       	adiw	r26, 0x0d	; 13
    7c32:	1c 92       	st	X, r1
    7c34:	08 95       	ret

00007c36 <TWI_MasterInterruptHandler>:
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
    7c36:	dc 01       	movw	r26, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    7c38:	ed 91       	ld	r30, X+
    7c3a:	fc 91       	ld	r31, X
    7c3c:	11 97       	sbiw	r26, 0x01	; 1
    7c3e:	44 81       	ldd	r20, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    7c40:	24 2f       	mov	r18, r20
    7c42:	30 e0       	ldi	r19, 0x00	; 0
    7c44:	c9 01       	movw	r24, r18
    7c46:	8c 70       	andi	r24, 0x0C	; 12
    7c48:	90 70       	andi	r25, 0x00	; 0
    7c4a:	89 2b       	or	r24, r25
    7c4c:	21 f0       	breq	.+8      	; 0x7c56 <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    7c4e:	cd 01       	movw	r24, r26
    7c50:	0e 94 88 3d 	call	0x7b10	; 0x7b10 <TWI_MasterArbitrationLostBusErrorHandler>
    7c54:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    7c56:	46 ff       	sbrs	r20, 6
    7c58:	04 c0       	rjmp	.+8      	; 0x7c62 <TWI_MasterInterruptHandler+0x2c>
    TWI_MasterWriteHandler(twi);
    7c5a:	cd 01       	movw	r24, r26
    7c5c:	0e 94 9d 3d 	call	0x7b3a	; 0x7b3a <TWI_MasterWriteHandler>
    7c60:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    7c62:	47 ff       	sbrs	r20, 7
    7c64:	04 c0       	rjmp	.+8      	; 0x7c6e <TWI_MasterInterruptHandler+0x38>
    TWI_MasterReadHandler(twi);
    7c66:	cd 01       	movw	r24, r26
    7c68:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <TWI_MasterReadHandler>
    7c6c:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    7c6e:	86 e0       	ldi	r24, 0x06	; 6
    7c70:	1e 96       	adiw	r26, 0x0e	; 14
    7c72:	8c 93       	st	X, r24
    7c74:	1e 97       	sbiw	r26, 0x0e	; 14
    twi->status = TWIM_STATUS_READY;
    7c76:	1d 96       	adiw	r26, 0x0d	; 13
    7c78:	1c 92       	st	X, r1
    7c7a:	08 95       	ret

00007c7c <TWI_MasterReleaseBuff>:
 }
}


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    7c7c:	0f 93       	push	r16
    7c7e:	1f 93       	push	r17
    7c80:	8c 01       	movw	r16, r24
 free(twi->PreadData);
    7c82:	fc 01       	movw	r30, r24
    7c84:	85 81       	ldd	r24, Z+5	; 0x05
    7c86:	96 81       	ldd	r25, Z+6	; 0x06
    7c88:	0e 94 78 52 	call	0xa4f0	; 0xa4f0 <free>
 free(twi->PwriteData);
    7c8c:	f8 01       	movw	r30, r16
    7c8e:	83 81       	ldd	r24, Z+3	; 0x03
    7c90:	94 81       	ldd	r25, Z+4	; 0x04
    7c92:	0e 94 78 52 	call	0xa4f0	; 0xa4f0 <free>
}
    7c96:	1f 91       	pop	r17
    7c98:	0f 91       	pop	r16
    7c9a:	08 95       	ret

00007c9c <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    7c9c:	cf 93       	push	r28
    7c9e:	df 93       	push	r29
    7ca0:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    7ca2:	6f 3f       	cpi	r22, 0xFF	; 255
    7ca4:	79 f4       	brne	.+30     	; 0x7cc4 <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    7ca6:	88 e8       	ldi	r24, 0x88	; 136
    7ca8:	90 e0       	ldi	r25, 0x00	; 0
    7caa:	0e 94 cb 51 	call	0xa396	; 0xa396 <malloc>
    7cae:	8d 83       	std	Y+5, r24	; 0x05
    7cb0:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    7cb2:	88 e8       	ldi	r24, 0x88	; 136
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	0e 94 cb 51 	call	0xa396	; 0xa396 <malloc>
    7cba:	8b 83       	std	Y+3, r24	; 0x03
    7cbc:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    7cbe:	88 e8       	ldi	r24, 0x88	; 136
    7cc0:	8f 83       	std	Y+7, r24	; 0x07
    7cc2:	0f c0       	rjmp	.+30     	; 0x7ce2 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    7cc4:	8e e1       	ldi	r24, 0x1E	; 30
    7cc6:	90 e0       	ldi	r25, 0x00	; 0
    7cc8:	0e 94 cb 51 	call	0xa396	; 0xa396 <malloc>
    7ccc:	8d 83       	std	Y+5, r24	; 0x05
    7cce:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    7cd0:	82 e3       	ldi	r24, 0x32	; 50
    7cd2:	90 e0       	ldi	r25, 0x00	; 0
    7cd4:	0e 94 cb 51 	call	0xa396	; 0xa396 <malloc>
    7cd8:	8b 83       	std	Y+3, r24	; 0x03
    7cda:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    7cdc:	84 e6       	ldi	r24, 0x64	; 100
    7cde:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    7ce0:	82 e3       	ldi	r24, 0x32	; 50
    7ce2:	88 87       	std	Y+8, r24	; 0x08
 }
}
    7ce4:	df 91       	pop	r29
    7ce6:	cf 91       	pop	r28
    7ce8:	08 95       	ret

00007cea <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7cea:	ef 92       	push	r14
    7cec:	ff 92       	push	r15
    7cee:	0f 93       	push	r16
    7cf0:	1f 93       	push	r17
    7cf2:	cf 93       	push	r28
    7cf4:	df 93       	push	r29
    7cf6:	ec 01       	movw	r28, r24
    7cf8:	7a 01       	movw	r14, r20
    7cfa:	8b 01       	movw	r16, r22
	clst -= 2;
    7cfc:	8e ef       	ldi	r24, 0xFE	; 254
    7cfe:	9f ef       	ldi	r25, 0xFF	; 255
    7d00:	af ef       	ldi	r26, 0xFF	; 255
    7d02:	bf ef       	ldi	r27, 0xFF	; 255
    7d04:	e8 0e       	add	r14, r24
    7d06:	f9 1e       	adc	r15, r25
    7d08:	0a 1f       	adc	r16, r26
    7d0a:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7d0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d10:	ac 85       	ldd	r26, Y+12	; 0x0c
    7d12:	bd 85       	ldd	r27, Y+13	; 0x0d
    7d14:	02 97       	sbiw	r24, 0x02	; 2
    7d16:	a1 09       	sbc	r26, r1
    7d18:	b1 09       	sbc	r27, r1
    7d1a:	e8 16       	cp	r14, r24
    7d1c:	f9 06       	cpc	r15, r25
    7d1e:	0a 07       	cpc	r16, r26
    7d20:	1b 07       	cpc	r17, r27
    7d22:	28 f0       	brcs	.+10     	; 0x7d2e <clust2sect+0x44>
    7d24:	20 e0       	ldi	r18, 0x00	; 0
    7d26:	30 e0       	ldi	r19, 0x00	; 0
    7d28:	40 e0       	ldi	r20, 0x00	; 0
    7d2a:	50 e0       	ldi	r21, 0x00	; 0
    7d2c:	12 c0       	rjmp	.+36     	; 0x7d52 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    7d2e:	2a 81       	ldd	r18, Y+2	; 0x02
    7d30:	30 e0       	ldi	r19, 0x00	; 0
    7d32:	40 e0       	ldi	r20, 0x00	; 0
    7d34:	50 e0       	ldi	r21, 0x00	; 0
    7d36:	c8 01       	movw	r24, r16
    7d38:	b7 01       	movw	r22, r14
    7d3a:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    7d3e:	9b 01       	movw	r18, r22
    7d40:	ac 01       	movw	r20, r24
    7d42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7d44:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7d46:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7d48:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7d4a:	28 0f       	add	r18, r24
    7d4c:	39 1f       	adc	r19, r25
    7d4e:	4a 1f       	adc	r20, r26
    7d50:	5b 1f       	adc	r21, r27
}
    7d52:	b9 01       	movw	r22, r18
    7d54:	ca 01       	movw	r24, r20
    7d56:	cd b7       	in	r28, 0x3d	; 61
    7d58:	de b7       	in	r29, 0x3e	; 62
    7d5a:	e6 e0       	ldi	r30, 0x06	; 6
    7d5c:	0c 94 b6 51 	jmp	0xa36c	; 0xa36c <__epilogue_restores__+0x18>

00007d60 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    7d60:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    7d62:	88 23       	and	r24, r24
    7d64:	19 f0       	breq	.+6      	; 0x7d6c <f_mount+0xc>
    7d66:	2b e0       	ldi	r18, 0x0B	; 11
    7d68:	30 e0       	ldi	r19, 0x00	; 0
    7d6a:	10 c0       	rjmp	.+32     	; 0x7d8c <f_mount+0x2c>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    7d6c:	e0 91 8d 24 	lds	r30, 0x248D
    7d70:	f0 91 8e 24 	lds	r31, 0x248E

	if (rfs) {
    7d74:	30 97       	sbiw	r30, 0x00	; 0
    7d76:	09 f0       	breq	.+2      	; 0x7d7a <f_mount+0x1a>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    7d78:	10 82       	st	Z, r1
	}

	if (fs) {
    7d7a:	10 97       	sbiw	r26, 0x00	; 0
    7d7c:	09 f0       	breq	.+2      	; 0x7d80 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    7d7e:	1c 92       	st	X, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    7d80:	a0 93 8d 24 	sts	0x248D, r26
    7d84:	b0 93 8e 24 	sts	0x248E, r27
    7d88:	20 e0       	ldi	r18, 0x00	; 0
    7d8a:	30 e0       	ldi	r19, 0x00	; 0

	return FR_OK;
}
    7d8c:	c9 01       	movw	r24, r18
    7d8e:	08 95       	ret

00007d90 <validate>:
)
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
    7d90:	fc 01       	movw	r30, r24
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    7d92:	a0 81       	ld	r26, Z
    7d94:	b1 81       	ldd	r27, Z+1	; 0x01
    7d96:	10 97       	sbiw	r26, 0x00	; 0
    7d98:	c1 f0       	breq	.+48     	; 0x7dca <validate+0x3a>
    7d9a:	8c 91       	ld	r24, X
    7d9c:	88 23       	and	r24, r24
    7d9e:	a9 f0       	breq	.+42     	; 0x7dca <validate+0x3a>
    7da0:	16 96       	adiw	r26, 0x06	; 6
    7da2:	2d 91       	ld	r18, X+
    7da4:	3c 91       	ld	r19, X
    7da6:	17 97       	sbiw	r26, 0x07	; 7
    7da8:	82 81       	ldd	r24, Z+2	; 0x02
    7daa:	93 81       	ldd	r25, Z+3	; 0x03
    7dac:	28 17       	cp	r18, r24
    7dae:	39 07       	cpc	r19, r25
    7db0:	61 f4       	brne	.+24     	; 0x7dca <validate+0x3a>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    7db2:	11 96       	adiw	r26, 0x01	; 1
    7db4:	8c 91       	ld	r24, X
    7db6:	0e 94 cf 4b 	call	0x979e	; 0x979e <disk_status>
    7dba:	80 fd       	sbrc	r24, 0
    7dbc:	03 c0       	rjmp	.+6      	; 0x7dc4 <validate+0x34>
    7dbe:	20 e0       	ldi	r18, 0x00	; 0
    7dc0:	30 e0       	ldi	r19, 0x00	; 0
    7dc2:	05 c0       	rjmp	.+10     	; 0x7dce <validate+0x3e>
    7dc4:	23 e0       	ldi	r18, 0x03	; 3
    7dc6:	30 e0       	ldi	r19, 0x00	; 0
    7dc8:	02 c0       	rjmp	.+4      	; 0x7dce <validate+0x3e>
    7dca:	29 e0       	ldi	r18, 0x09	; 9
    7dcc:	30 e0       	ldi	r19, 0x00	; 0
		return FR_NOT_READY;

	return FR_OK;
}
    7dce:	c9 01       	movw	r24, r18
    7dd0:	08 95       	ret

00007dd2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    7dd2:	cf 93       	push	r28
    7dd4:	df 93       	push	r29
    7dd6:	ec 01       	movw	r28, r24
	FRESULT res;


#if _FS_READONLY
	res = validate(fp);
    7dd8:	0e 94 c8 3e 	call	0x7d90	; 0x7d90 <validate>
    7ddc:	9c 01       	movw	r18, r24
	{
#if _FS_REENTRANT
		FATFS *fs = fp->fs;
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    7dde:	00 97       	sbiw	r24, 0x00	; 0
    7de0:	11 f4       	brne	.+4      	; 0x7de6 <f_close+0x14>
    7de2:	18 82       	st	Y, r1
    7de4:	19 82       	std	Y+1, r1	; 0x01
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    7de6:	c9 01       	movw	r24, r18
    7de8:	df 91       	pop	r29
    7dea:	cf 91       	pop	r28
    7dec:	08 95       	ret

00007dee <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    7dee:	cf 92       	push	r12
    7df0:	df 92       	push	r13
    7df2:	ef 92       	push	r14
    7df4:	ff 92       	push	r15
    7df6:	0f 93       	push	r16
    7df8:	cf 93       	push	r28
    7dfa:	df 93       	push	r29
    7dfc:	ec 01       	movw	r28, r24
    7dfe:	6a 01       	movw	r12, r20
    7e00:	7b 01       	movw	r14, r22
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    7e02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7e04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7e06:	a8 a1       	ldd	r26, Y+32	; 0x20
    7e08:	b9 a1       	ldd	r27, Y+33	; 0x21
    7e0a:	84 17       	cp	r24, r20
    7e0c:	95 07       	cpc	r25, r21
    7e0e:	a6 07       	cpc	r26, r22
    7e10:	b7 07       	cpc	r27, r23
    7e12:	b9 f0       	breq	.+46     	; 0x7e42 <move_window+0x54>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    7e14:	41 15       	cp	r20, r1
    7e16:	51 05       	cpc	r21, r1
    7e18:	61 05       	cpc	r22, r1
    7e1a:	71 05       	cpc	r23, r1
    7e1c:	91 f0       	breq	.+36     	; 0x7e42 <move_window+0x54>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7e1e:	be 01       	movw	r22, r28
    7e20:	6e 5d       	subi	r22, 0xDE	; 222
    7e22:	7f 4f       	sbci	r23, 0xFF	; 255
    7e24:	89 81       	ldd	r24, Y+1	; 0x01
    7e26:	a7 01       	movw	r20, r14
    7e28:	96 01       	movw	r18, r12
    7e2a:	01 e0       	ldi	r16, 0x01	; 1
    7e2c:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <disk_read>
    7e30:	89 2b       	or	r24, r25
    7e32:	19 f0       	breq	.+6      	; 0x7e3a <move_window+0x4c>
    7e34:	21 e0       	ldi	r18, 0x01	; 1
    7e36:	30 e0       	ldi	r19, 0x00	; 0
    7e38:	06 c0       	rjmp	.+12     	; 0x7e46 <move_window+0x58>
				return FR_DISK_ERR;
			fs->winsect = sector;
    7e3a:	ce 8e       	std	Y+30, r12	; 0x1e
    7e3c:	df 8e       	std	Y+31, r13	; 0x1f
    7e3e:	e8 a2       	std	Y+32, r14	; 0x20
    7e40:	f9 a2       	std	Y+33, r15	; 0x21
    7e42:	20 e0       	ldi	r18, 0x00	; 0
    7e44:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return FR_OK;
}
    7e46:	c9 01       	movw	r24, r18
    7e48:	df 91       	pop	r29
    7e4a:	cf 91       	pop	r28
    7e4c:	0f 91       	pop	r16
    7e4e:	ff 90       	pop	r15
    7e50:	ef 90       	pop	r14
    7e52:	df 90       	pop	r13
    7e54:	cf 90       	pop	r12
    7e56:	08 95       	ret

00007e58 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7e58:	a0 e0       	ldi	r26, 0x00	; 0
    7e5a:	b0 e0       	ldi	r27, 0x00	; 0
    7e5c:	e2 e3       	ldi	r30, 0x32	; 50
    7e5e:	ff e3       	ldi	r31, 0x3F	; 63
    7e60:	0c 94 97 51 	jmp	0xa32e	; 0xa32e <__prologue_saves__+0x12>
    7e64:	ec 01       	movw	r28, r24
    7e66:	7a 01       	movw	r14, r20
    7e68:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    7e6a:	42 30       	cpi	r20, 0x02	; 2
    7e6c:	51 05       	cpc	r21, r1
    7e6e:	61 05       	cpc	r22, r1
    7e70:	71 05       	cpc	r23, r1
    7e72:	08 f4       	brcc	.+2      	; 0x7e76 <get_fat+0x1e>
    7e74:	e5 c0       	rjmp	.+458    	; 0x8040 <get_fat+0x1e8>
    7e76:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e78:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e7a:	ac 85       	ldd	r26, Y+12	; 0x0c
    7e7c:	bd 85       	ldd	r27, Y+13	; 0x0d
    7e7e:	48 17       	cp	r20, r24
    7e80:	59 07       	cpc	r21, r25
    7e82:	6a 07       	cpc	r22, r26
    7e84:	7b 07       	cpc	r23, r27
    7e86:	08 f0       	brcs	.+2      	; 0x7e8a <get_fat+0x32>
    7e88:	db c0       	rjmp	.+438    	; 0x8040 <get_fat+0x1e8>
		return 1;

	switch (fs->fs_type) {
    7e8a:	88 81       	ld	r24, Y
    7e8c:	82 30       	cpi	r24, 0x02	; 2
    7e8e:	09 f4       	brne	.+2      	; 0x7e92 <get_fat+0x3a>
    7e90:	5b c0       	rjmp	.+182    	; 0x7f48 <get_fat+0xf0>
    7e92:	83 30       	cpi	r24, 0x03	; 3
    7e94:	09 f4       	brne	.+2      	; 0x7e98 <get_fat+0x40>
    7e96:	7d c0       	rjmp	.+250    	; 0x7f92 <get_fat+0x13a>
    7e98:	81 30       	cpi	r24, 0x01	; 1
    7e9a:	09 f0       	breq	.+2      	; 0x7e9e <get_fat+0x46>
    7e9c:	d7 c0       	rjmp	.+430    	; 0x804c <get_fat+0x1f4>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    7e9e:	6a 01       	movw	r12, r20
    7ea0:	d6 94       	lsr	r13
    7ea2:	c7 94       	ror	r12
    7ea4:	c4 0e       	add	r12, r20
    7ea6:	d5 1e       	adc	r13, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7ea8:	a6 01       	movw	r20, r12
    7eaa:	45 2f       	mov	r20, r21
    7eac:	55 27       	eor	r21, r21
    7eae:	46 95       	lsr	r20
    7eb0:	60 e0       	ldi	r22, 0x00	; 0
    7eb2:	70 e0       	ldi	r23, 0x00	; 0
    7eb4:	8a 89       	ldd	r24, Y+18	; 0x12
    7eb6:	9b 89       	ldd	r25, Y+19	; 0x13
    7eb8:	ac 89       	ldd	r26, Y+20	; 0x14
    7eba:	bd 89       	ldd	r27, Y+21	; 0x15
    7ebc:	48 0f       	add	r20, r24
    7ebe:	59 1f       	adc	r21, r25
    7ec0:	6a 1f       	adc	r22, r26
    7ec2:	7b 1f       	adc	r23, r27
    7ec4:	ce 01       	movw	r24, r28
    7ec6:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <move_window>
    7eca:	89 2b       	or	r24, r25
    7ecc:	09 f0       	breq	.+2      	; 0x7ed0 <get_fat+0x78>
    7ece:	be c0       	rjmp	.+380    	; 0x804c <get_fat+0x1f4>
		wc = fs->win[bc % SS(fs)]; bc++;
    7ed0:	f6 01       	movw	r30, r12
    7ed2:	f1 70       	andi	r31, 0x01	; 1
    7ed4:	ec 0f       	add	r30, r28
    7ed6:	fd 1f       	adc	r31, r29
    7ed8:	b2 a0       	ldd	r11, Z+34	; 0x22
    7eda:	08 94       	sec
    7edc:	c1 1c       	adc	r12, r1
    7ede:	d1 1c       	adc	r13, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7ee0:	a6 01       	movw	r20, r12
    7ee2:	45 2f       	mov	r20, r21
    7ee4:	55 27       	eor	r21, r21
    7ee6:	46 95       	lsr	r20
    7ee8:	60 e0       	ldi	r22, 0x00	; 0
    7eea:	70 e0       	ldi	r23, 0x00	; 0
    7eec:	8a 89       	ldd	r24, Y+18	; 0x12
    7eee:	9b 89       	ldd	r25, Y+19	; 0x13
    7ef0:	ac 89       	ldd	r26, Y+20	; 0x14
    7ef2:	bd 89       	ldd	r27, Y+21	; 0x15
    7ef4:	48 0f       	add	r20, r24
    7ef6:	59 1f       	adc	r21, r25
    7ef8:	6a 1f       	adc	r22, r26
    7efa:	7b 1f       	adc	r23, r27
    7efc:	ce 01       	movw	r24, r28
    7efe:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <move_window>
    7f02:	89 2b       	or	r24, r25
    7f04:	09 f0       	breq	.+2      	; 0x7f08 <get_fat+0xb0>
    7f06:	a2 c0       	rjmp	.+324    	; 0x804c <get_fat+0x1f4>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    7f08:	2b 2d       	mov	r18, r11
    7f0a:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    7f0c:	af ef       	ldi	r26, 0xFF	; 255
    7f0e:	b1 e0       	ldi	r27, 0x01	; 1
    7f10:	ca 22       	and	r12, r26
    7f12:	db 22       	and	r13, r27
    7f14:	cc 0e       	add	r12, r28
    7f16:	dd 1e       	adc	r13, r29
    7f18:	f6 01       	movw	r30, r12
    7f1a:	92 a1       	ldd	r25, Z+34	; 0x22
    7f1c:	80 e0       	ldi	r24, 0x00	; 0
    7f1e:	28 2b       	or	r18, r24
    7f20:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7f22:	c7 01       	movw	r24, r14
    7f24:	81 70       	andi	r24, 0x01	; 1
    7f26:	90 70       	andi	r25, 0x00	; 0
    7f28:	89 2b       	or	r24, r25
    7f2a:	31 f0       	breq	.+12     	; 0x7f38 <get_fat+0xe0>
    7f2c:	b4 e0       	ldi	r27, 0x04	; 4
    7f2e:	36 95       	lsr	r19
    7f30:	27 95       	ror	r18
    7f32:	ba 95       	dec	r27
    7f34:	e1 f7       	brne	.-8      	; 0x7f2e <get_fat+0xd6>
    7f36:	29 c0       	rjmp	.+82     	; 0x7f8a <get_fat+0x132>
    7f38:	79 01       	movw	r14, r18
    7f3a:	00 e0       	ldi	r16, 0x00	; 0
    7f3c:	10 e0       	ldi	r17, 0x00	; 0
    7f3e:	8f ef       	ldi	r24, 0xFF	; 255
    7f40:	9f e0       	ldi	r25, 0x0F	; 15
    7f42:	a0 e0       	ldi	r26, 0x00	; 0
    7f44:	b0 e0       	ldi	r27, 0x00	; 0
    7f46:	77 c0       	rjmp	.+238    	; 0x8036 <get_fat+0x1de>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7f48:	45 2f       	mov	r20, r21
    7f4a:	56 2f       	mov	r21, r22
    7f4c:	67 2f       	mov	r22, r23
    7f4e:	77 27       	eor	r23, r23
    7f50:	8a 89       	ldd	r24, Y+18	; 0x12
    7f52:	9b 89       	ldd	r25, Y+19	; 0x13
    7f54:	ac 89       	ldd	r26, Y+20	; 0x14
    7f56:	bd 89       	ldd	r27, Y+21	; 0x15
    7f58:	48 0f       	add	r20, r24
    7f5a:	59 1f       	adc	r21, r25
    7f5c:	6a 1f       	adc	r22, r26
    7f5e:	7b 1f       	adc	r23, r27
    7f60:	ce 01       	movw	r24, r28
    7f62:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <move_window>
    7f66:	89 2b       	or	r24, r25
    7f68:	09 f0       	breq	.+2      	; 0x7f6c <get_fat+0x114>
    7f6a:	70 c0       	rjmp	.+224    	; 0x804c <get_fat+0x1f4>
		p = &fs->win[clst * 2 % SS(fs)];
    7f6c:	ee 0c       	add	r14, r14
    7f6e:	ff 1c       	adc	r15, r15
    7f70:	00 1f       	adc	r16, r16
    7f72:	11 1f       	adc	r17, r17
    7f74:	d7 01       	movw	r26, r14
    7f76:	b1 70       	andi	r27, 0x01	; 1
		return LD_WORD(p);
    7f78:	fe 01       	movw	r30, r28
    7f7a:	ea 0f       	add	r30, r26
    7f7c:	fb 1f       	adc	r31, r27
    7f7e:	22 a1       	ldd	r18, Z+34	; 0x22
    7f80:	30 e0       	ldi	r19, 0x00	; 0
    7f82:	93 a1       	ldd	r25, Z+35	; 0x23
    7f84:	80 e0       	ldi	r24, 0x00	; 0
    7f86:	28 2b       	or	r18, r24
    7f88:	39 2b       	or	r19, r25
    7f8a:	79 01       	movw	r14, r18
    7f8c:	00 e0       	ldi	r16, 0x00	; 0
    7f8e:	10 e0       	ldi	r17, 0x00	; 0
    7f90:	61 c0       	rjmp	.+194    	; 0x8054 <get_fat+0x1fc>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7f92:	e7 e0       	ldi	r30, 0x07	; 7
    7f94:	76 95       	lsr	r23
    7f96:	67 95       	ror	r22
    7f98:	57 95       	ror	r21
    7f9a:	47 95       	ror	r20
    7f9c:	ea 95       	dec	r30
    7f9e:	d1 f7       	brne	.-12     	; 0x7f94 <get_fat+0x13c>
    7fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    7fa2:	9b 89       	ldd	r25, Y+19	; 0x13
    7fa4:	ac 89       	ldd	r26, Y+20	; 0x14
    7fa6:	bd 89       	ldd	r27, Y+21	; 0x15
    7fa8:	48 0f       	add	r20, r24
    7faa:	59 1f       	adc	r21, r25
    7fac:	6a 1f       	adc	r22, r26
    7fae:	7b 1f       	adc	r23, r27
    7fb0:	ce 01       	movw	r24, r28
    7fb2:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <move_window>
    7fb6:	89 2b       	or	r24, r25
    7fb8:	09 f0       	breq	.+2      	; 0x7fbc <get_fat+0x164>
    7fba:	48 c0       	rjmp	.+144    	; 0x804c <get_fat+0x1f4>
		p = &fs->win[clst * 4 % SS(fs)];
    7fbc:	62 e0       	ldi	r22, 0x02	; 2
    7fbe:	ee 0c       	add	r14, r14
    7fc0:	ff 1c       	adc	r15, r15
    7fc2:	00 1f       	adc	r16, r16
    7fc4:	11 1f       	adc	r17, r17
    7fc6:	6a 95       	dec	r22
    7fc8:	d1 f7       	brne	.-12     	; 0x7fbe <get_fat+0x166>
    7fca:	f7 01       	movw	r30, r14
    7fcc:	f1 70       	andi	r31, 0x01	; 1
    7fce:	b2 96       	adiw	r30, 0x22	; 34
    7fd0:	9e 01       	movw	r18, r28
    7fd2:	2e 0f       	add	r18, r30
    7fd4:	3f 1f       	adc	r19, r31
    7fd6:	b2 97       	sbiw	r30, 0x22	; 34
		return LD_DWORD(p) & 0x0FFFFFFF;
    7fd8:	d9 01       	movw	r26, r18
    7fda:	12 96       	adiw	r26, 0x02	; 2
    7fdc:	8c 91       	ld	r24, X
    7fde:	90 e0       	ldi	r25, 0x00	; 0
    7fe0:	a0 e0       	ldi	r26, 0x00	; 0
    7fe2:	b0 e0       	ldi	r27, 0x00	; 0
    7fe4:	8c 01       	movw	r16, r24
    7fe6:	ff 24       	eor	r15, r15
    7fe8:	ee 24       	eor	r14, r14
    7fea:	d9 01       	movw	r26, r18
    7fec:	13 96       	adiw	r26, 0x03	; 3
    7fee:	8c 91       	ld	r24, X
    7ff0:	90 e0       	ldi	r25, 0x00	; 0
    7ff2:	a0 e0       	ldi	r26, 0x00	; 0
    7ff4:	b0 e0       	ldi	r27, 0x00	; 0
    7ff6:	b8 2f       	mov	r27, r24
    7ff8:	aa 27       	eor	r26, r26
    7ffa:	99 27       	eor	r25, r25
    7ffc:	88 27       	eor	r24, r24
    7ffe:	e8 2a       	or	r14, r24
    8000:	f9 2a       	or	r15, r25
    8002:	0a 2b       	or	r16, r26
    8004:	1b 2b       	or	r17, r27
    8006:	d9 01       	movw	r26, r18
    8008:	11 96       	adiw	r26, 0x01	; 1
    800a:	9c 91       	ld	r25, X
    800c:	80 e0       	ldi	r24, 0x00	; 0
    800e:	a0 e0       	ldi	r26, 0x00	; 0
    8010:	b0 e0       	ldi	r27, 0x00	; 0
    8012:	e8 2a       	or	r14, r24
    8014:	f9 2a       	or	r15, r25
    8016:	0a 2b       	or	r16, r26
    8018:	1b 2b       	or	r17, r27
    801a:	ec 0f       	add	r30, r28
    801c:	fd 1f       	adc	r31, r29
    801e:	82 a1       	ldd	r24, Z+34	; 0x22
    8020:	90 e0       	ldi	r25, 0x00	; 0
    8022:	a0 e0       	ldi	r26, 0x00	; 0
    8024:	b0 e0       	ldi	r27, 0x00	; 0
    8026:	e8 2a       	or	r14, r24
    8028:	f9 2a       	or	r15, r25
    802a:	0a 2b       	or	r16, r26
    802c:	1b 2b       	or	r17, r27
    802e:	8f ef       	ldi	r24, 0xFF	; 255
    8030:	9f ef       	ldi	r25, 0xFF	; 255
    8032:	af ef       	ldi	r26, 0xFF	; 255
    8034:	bf e0       	ldi	r27, 0x0F	; 15
    8036:	e8 22       	and	r14, r24
    8038:	f9 22       	and	r15, r25
    803a:	0a 23       	and	r16, r26
    803c:	1b 23       	and	r17, r27
    803e:	0a c0       	rjmp	.+20     	; 0x8054 <get_fat+0x1fc>
    8040:	81 e0       	ldi	r24, 0x01	; 1
    8042:	e8 2e       	mov	r14, r24
    8044:	f1 2c       	mov	r15, r1
    8046:	01 2d       	mov	r16, r1
    8048:	11 2d       	mov	r17, r1
    804a:	04 c0       	rjmp	.+8      	; 0x8054 <get_fat+0x1fc>
    804c:	ee 24       	eor	r14, r14
    804e:	ea 94       	dec	r14
    8050:	fe 2c       	mov	r15, r14
    8052:	87 01       	movw	r16, r14
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    8054:	b7 01       	movw	r22, r14
    8056:	c8 01       	movw	r24, r16
    8058:	cd b7       	in	r28, 0x3d	; 61
    805a:	de b7       	in	r29, 0x3e	; 62
    805c:	e9 e0       	ldi	r30, 0x09	; 9
    805e:	0c 94 b3 51 	jmp	0xa366	; 0xa366 <__epilogue_restores__+0x12>

00008062 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    8062:	a4 e0       	ldi	r26, 0x04	; 4
    8064:	b0 e0       	ldi	r27, 0x00	; 0
    8066:	e7 e3       	ldi	r30, 0x37	; 55
    8068:	f0 e4       	ldi	r31, 0x40	; 64
    806a:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    806e:	8b 83       	std	Y+3, r24	; 0x03
    8070:	9c 83       	std	Y+4, r25	; 0x04
    8072:	d4 2e       	mov	r13, r20
    8074:	c5 2e       	mov	r12, r21
    8076:	b6 2e       	mov	r11, r22
    8078:	a7 2e       	mov	r10, r23
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    807a:	0e 94 c8 3e 	call	0x7d90	; 0x7d90 <validate>
    807e:	89 83       	std	Y+1, r24	; 0x01
    8080:	9a 83       	std	Y+2, r25	; 0x02
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8082:	89 2b       	or	r24, r25
    8084:	09 f0       	breq	.+2      	; 0x8088 <f_lseek+0x26>
    8086:	63 c1       	rjmp	.+710    	; 0x834e <f_lseek+0x2ec>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    8088:	ab 81       	ldd	r26, Y+3	; 0x03
    808a:	bc 81       	ldd	r27, Y+4	; 0x04
    808c:	14 96       	adiw	r26, 0x04	; 4
    808e:	8c 91       	ld	r24, X
    8090:	87 fd       	sbrc	r24, 7
    8092:	2d c1       	rjmp	.+602    	; 0x82ee <f_lseek+0x28c>
    8094:	ab 81       	ldd	r26, Y+3	; 0x03
    8096:	bc 81       	ldd	r27, Y+4	; 0x04
    8098:	1a 96       	adiw	r26, 0x0a	; 10
    809a:	ed 90       	ld	r14, X+
    809c:	fd 90       	ld	r15, X+
    809e:	0d 91       	ld	r16, X+
    80a0:	1c 91       	ld	r17, X
    80a2:	1d 97       	sbiw	r26, 0x0d	; 13
    80a4:	2d 2d       	mov	r18, r13
    80a6:	3c 2d       	mov	r19, r12
    80a8:	4b 2d       	mov	r20, r11
    80aa:	5a 2d       	mov	r21, r10
    80ac:	c9 01       	movw	r24, r18
    80ae:	da 01       	movw	r26, r20
    80b0:	3c 01       	movw	r6, r24
    80b2:	4d 01       	movw	r8, r26
    80b4:	e6 14       	cp	r14, r6
    80b6:	f7 04       	cpc	r15, r7
    80b8:	08 05       	cpc	r16, r8
    80ba:	19 05       	cpc	r17, r9
    80bc:	10 f4       	brcc	.+4      	; 0x80c2 <f_lseek+0x60>
    80be:	37 01       	movw	r6, r14
    80c0:	48 01       	movw	r8, r16
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    80c2:	eb 81       	ldd	r30, Y+3	; 0x03
    80c4:	fc 81       	ldd	r31, Y+4	; 0x04
    80c6:	e6 80       	ldd	r14, Z+6	; 0x06
    80c8:	f7 80       	ldd	r15, Z+7	; 0x07
    80ca:	00 85       	ldd	r16, Z+8	; 0x08
    80cc:	11 85       	ldd	r17, Z+9	; 0x09
		fp->fptr = nsect = 0;
    80ce:	16 82       	std	Z+6, r1	; 0x06
    80d0:	17 82       	std	Z+7, r1	; 0x07
    80d2:	10 86       	std	Z+8, r1	; 0x08
    80d4:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    80d6:	61 14       	cp	r6, r1
    80d8:	71 04       	cpc	r7, r1
    80da:	81 04       	cpc	r8, r1
    80dc:	91 04       	cpc	r9, r1
    80de:	09 f4       	brne	.+2      	; 0x80e2 <f_lseek+0x80>
    80e0:	19 c1       	rjmp	.+562    	; 0x8314 <f_lseek+0x2b2>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    80e2:	01 90       	ld	r0, Z+
    80e4:	f0 81       	ld	r31, Z
    80e6:	e0 2d       	mov	r30, r0
    80e8:	82 81       	ldd	r24, Z+2	; 0x02
    80ea:	a8 2e       	mov	r10, r24
    80ec:	bb 24       	eor	r11, r11
    80ee:	cc 24       	eor	r12, r12
    80f0:	dd 24       	eor	r13, r13
    80f2:	f9 e0       	ldi	r31, 0x09	; 9
    80f4:	aa 0c       	add	r10, r10
    80f6:	bb 1c       	adc	r11, r11
    80f8:	cc 1c       	adc	r12, r12
    80fa:	dd 1c       	adc	r13, r13
    80fc:	fa 95       	dec	r31
    80fe:	d1 f7       	brne	.-12     	; 0x80f4 <f_lseek+0x92>
			if (ifptr > 0 &&
    8100:	e1 14       	cp	r14, r1
    8102:	f1 04       	cpc	r15, r1
    8104:	01 05       	cpc	r16, r1
    8106:	11 05       	cpc	r17, r1
    8108:	c1 f1       	breq	.+112    	; 0x817a <f_lseek+0x118>
    810a:	17 01       	movw	r2, r14
    810c:	28 01       	movw	r4, r16
    810e:	08 94       	sec
    8110:	21 08       	sbc	r2, r1
    8112:	31 08       	sbc	r3, r1
    8114:	41 08       	sbc	r4, r1
    8116:	51 08       	sbc	r5, r1
    8118:	c4 01       	movw	r24, r8
    811a:	b3 01       	movw	r22, r6
    811c:	61 50       	subi	r22, 0x01	; 1
    811e:	70 40       	sbci	r23, 0x00	; 0
    8120:	80 40       	sbci	r24, 0x00	; 0
    8122:	90 40       	sbci	r25, 0x00	; 0
    8124:	a6 01       	movw	r20, r12
    8126:	95 01       	movw	r18, r10
    8128:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    812c:	79 01       	movw	r14, r18
    812e:	8a 01       	movw	r16, r20
    8130:	c2 01       	movw	r24, r4
    8132:	b1 01       	movw	r22, r2
    8134:	a6 01       	movw	r20, r12
    8136:	95 01       	movw	r18, r10
    8138:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    813c:	e2 16       	cp	r14, r18
    813e:	f3 06       	cpc	r15, r19
    8140:	04 07       	cpc	r16, r20
    8142:	15 07       	cpc	r17, r21
    8144:	d0 f0       	brcs	.+52     	; 0x817a <f_lseek+0x118>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    8146:	88 27       	eor	r24, r24
    8148:	99 27       	eor	r25, r25
    814a:	dc 01       	movw	r26, r24
    814c:	8a 19       	sub	r24, r10
    814e:	9b 09       	sbc	r25, r11
    8150:	ac 09       	sbc	r26, r12
    8152:	bd 09       	sbc	r27, r13
    8154:	82 21       	and	r24, r2
    8156:	93 21       	and	r25, r3
    8158:	a4 21       	and	r26, r4
    815a:	b5 21       	and	r27, r5
    815c:	eb 81       	ldd	r30, Y+3	; 0x03
    815e:	fc 81       	ldd	r31, Y+4	; 0x04
    8160:	86 83       	std	Z+6, r24	; 0x06
    8162:	97 83       	std	Z+7, r25	; 0x07
    8164:	a0 87       	std	Z+8, r26	; 0x08
    8166:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    8168:	68 1a       	sub	r6, r24
    816a:	79 0a       	sbc	r7, r25
    816c:	8a 0a       	sbc	r8, r26
    816e:	9b 0a       	sbc	r9, r27
				clst = fp->clust;
    8170:	42 89       	ldd	r20, Z+18	; 0x12
    8172:	53 89       	ldd	r21, Z+19	; 0x13
    8174:	64 89       	ldd	r22, Z+20	; 0x14
    8176:	75 89       	ldd	r23, Z+21	; 0x15
    8178:	0d c0       	rjmp	.+26     	; 0x8194 <f_lseek+0x132>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    817a:	ab 81       	ldd	r26, Y+3	; 0x03
    817c:	bc 81       	ldd	r27, Y+4	; 0x04
    817e:	1e 96       	adiw	r26, 0x0e	; 14
    8180:	4d 91       	ld	r20, X+
    8182:	5d 91       	ld	r21, X+
    8184:	6d 91       	ld	r22, X+
    8186:	7c 91       	ld	r23, X
    8188:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    818a:	fd 01       	movw	r30, r26
    818c:	42 8b       	std	Z+18, r20	; 0x12
    818e:	53 8b       	std	Z+19, r21	; 0x13
    8190:	64 8b       	std	Z+20, r22	; 0x14
    8192:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    8194:	41 15       	cp	r20, r1
    8196:	51 05       	cpc	r21, r1
    8198:	61 05       	cpc	r22, r1
    819a:	71 05       	cpc	r23, r1
    819c:	09 f0       	breq	.+2      	; 0x81a0 <f_lseek+0x13e>
    819e:	4e c0       	rjmp	.+156    	; 0x823c <f_lseek+0x1da>
    81a0:	b9 c0       	rjmp	.+370    	; 0x8314 <f_lseek+0x2b2>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    81a2:	ab 81       	ldd	r26, Y+3	; 0x03
    81a4:	bc 81       	ldd	r27, Y+4	; 0x04
    81a6:	8d 91       	ld	r24, X+
    81a8:	9c 91       	ld	r25, X
    81aa:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <get_fat>
    81ae:	ab 01       	movw	r20, r22
    81b0:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    81b2:	4f 3f       	cpi	r20, 0xFF	; 255
    81b4:	bf ef       	ldi	r27, 0xFF	; 255
    81b6:	5b 07       	cpc	r21, r27
    81b8:	bf ef       	ldi	r27, 0xFF	; 255
    81ba:	6b 07       	cpc	r22, r27
    81bc:	bf ef       	ldi	r27, 0xFF	; 255
    81be:	7b 07       	cpc	r23, r27
    81c0:	41 f4       	brne	.+16     	; 0x81d2 <f_lseek+0x170>
    81c2:	eb 81       	ldd	r30, Y+3	; 0x03
    81c4:	fc 81       	ldd	r31, Y+4	; 0x04
    81c6:	84 81       	ldd	r24, Z+4	; 0x04
    81c8:	80 68       	ori	r24, 0x80	; 128
    81ca:	84 83       	std	Z+4, r24	; 0x04
    81cc:	81 e0       	ldi	r24, 0x01	; 1
    81ce:	90 e0       	ldi	r25, 0x00	; 0
    81d0:	19 c0       	rjmp	.+50     	; 0x8204 <f_lseek+0x1a2>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    81d2:	42 30       	cpi	r20, 0x02	; 2
    81d4:	51 05       	cpc	r21, r1
    81d6:	61 05       	cpc	r22, r1
    81d8:	71 05       	cpc	r23, r1
    81da:	68 f0       	brcs	.+26     	; 0x81f6 <f_lseek+0x194>
    81dc:	ab 81       	ldd	r26, Y+3	; 0x03
    81de:	bc 81       	ldd	r27, Y+4	; 0x04
    81e0:	ed 91       	ld	r30, X+
    81e2:	fc 91       	ld	r31, X
    81e4:	82 85       	ldd	r24, Z+10	; 0x0a
    81e6:	93 85       	ldd	r25, Z+11	; 0x0b
    81e8:	a4 85       	ldd	r26, Z+12	; 0x0c
    81ea:	b5 85       	ldd	r27, Z+13	; 0x0d
    81ec:	48 17       	cp	r20, r24
    81ee:	59 07       	cpc	r21, r25
    81f0:	6a 07       	cpc	r22, r26
    81f2:	7b 07       	cpc	r23, r27
    81f4:	50 f0       	brcs	.+20     	; 0x820a <f_lseek+0x1a8>
    81f6:	eb 81       	ldd	r30, Y+3	; 0x03
    81f8:	fc 81       	ldd	r31, Y+4	; 0x04
    81fa:	84 81       	ldd	r24, Z+4	; 0x04
    81fc:	80 68       	ori	r24, 0x80	; 128
    81fe:	84 83       	std	Z+4, r24	; 0x04
    8200:	82 e0       	ldi	r24, 0x02	; 2
    8202:	90 e0       	ldi	r25, 0x00	; 0
    8204:	89 83       	std	Y+1, r24	; 0x01
    8206:	9a 83       	std	Y+2, r25	; 0x02
    8208:	a2 c0       	rjmp	.+324    	; 0x834e <f_lseek+0x2ec>
					fp->clust = clst;
    820a:	ab 81       	ldd	r26, Y+3	; 0x03
    820c:	bc 81       	ldd	r27, Y+4	; 0x04
    820e:	52 96       	adiw	r26, 0x12	; 18
    8210:	4d 93       	st	X+, r20
    8212:	5d 93       	st	X+, r21
    8214:	6d 93       	st	X+, r22
    8216:	7c 93       	st	X, r23
    8218:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    821a:	fd 01       	movw	r30, r26
    821c:	86 81       	ldd	r24, Z+6	; 0x06
    821e:	97 81       	ldd	r25, Z+7	; 0x07
    8220:	a0 85       	ldd	r26, Z+8	; 0x08
    8222:	b1 85       	ldd	r27, Z+9	; 0x09
    8224:	8a 0d       	add	r24, r10
    8226:	9b 1d       	adc	r25, r11
    8228:	ac 1d       	adc	r26, r12
    822a:	bd 1d       	adc	r27, r13
    822c:	86 83       	std	Z+6, r24	; 0x06
    822e:	97 83       	std	Z+7, r25	; 0x07
    8230:	a0 87       	std	Z+8, r26	; 0x08
    8232:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    8234:	6a 18       	sub	r6, r10
    8236:	7b 08       	sbc	r7, r11
    8238:	8c 08       	sbc	r8, r12
    823a:	9d 08       	sbc	r9, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    823c:	a6 14       	cp	r10, r6
    823e:	b7 04       	cpc	r11, r7
    8240:	c8 04       	cpc	r12, r8
    8242:	d9 04       	cpc	r13, r9
    8244:	08 f4       	brcc	.+2      	; 0x8248 <f_lseek+0x1e6>
    8246:	ad cf       	rjmp	.-166    	; 0x81a2 <f_lseek+0x140>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    8248:	eb 81       	ldd	r30, Y+3	; 0x03
    824a:	fc 81       	ldd	r31, Y+4	; 0x04
    824c:	86 81       	ldd	r24, Z+6	; 0x06
    824e:	97 81       	ldd	r25, Z+7	; 0x07
    8250:	a0 85       	ldd	r26, Z+8	; 0x08
    8252:	b1 85       	ldd	r27, Z+9	; 0x09
    8254:	86 0d       	add	r24, r6
    8256:	97 1d       	adc	r25, r7
    8258:	a8 1d       	adc	r26, r8
    825a:	b9 1d       	adc	r27, r9
    825c:	86 83       	std	Z+6, r24	; 0x06
    825e:	97 83       	std	Z+7, r25	; 0x07
    8260:	a0 87       	std	Z+8, r26	; 0x08
    8262:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    8264:	d4 01       	movw	r26, r8
    8266:	c3 01       	movw	r24, r6
    8268:	91 70       	andi	r25, 0x01	; 1
    826a:	a0 70       	andi	r26, 0x00	; 0
    826c:	b0 70       	andi	r27, 0x00	; 0
    826e:	00 97       	sbiw	r24, 0x00	; 0
    8270:	a1 05       	cpc	r26, r1
    8272:	b1 05       	cpc	r27, r1
    8274:	09 f4       	brne	.+2      	; 0x8278 <f_lseek+0x216>
    8276:	4e c0       	rjmp	.+156    	; 0x8314 <f_lseek+0x2b2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    8278:	c0 80       	ld	r12, Z
    827a:	d1 80       	ldd	r13, Z+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    827c:	ee ef       	ldi	r30, 0xFE	; 254
    827e:	ee 2e       	mov	r14, r30
    8280:	ef ef       	ldi	r30, 0xFF	; 255
    8282:	fe 2e       	mov	r15, r30
    8284:	ef ef       	ldi	r30, 0xFF	; 255
    8286:	0e 2f       	mov	r16, r30
    8288:	ef ef       	ldi	r30, 0xFF	; 255
    828a:	1e 2f       	mov	r17, r30
    828c:	e4 0e       	add	r14, r20
    828e:	f5 1e       	adc	r15, r21
    8290:	06 1f       	adc	r16, r22
    8292:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    8294:	f6 01       	movw	r30, r12
    8296:	82 85       	ldd	r24, Z+10	; 0x0a
    8298:	93 85       	ldd	r25, Z+11	; 0x0b
    829a:	a4 85       	ldd	r26, Z+12	; 0x0c
    829c:	b5 85       	ldd	r27, Z+13	; 0x0d
    829e:	02 97       	sbiw	r24, 0x02	; 2
    82a0:	a1 09       	sbc	r26, r1
    82a2:	b1 09       	sbc	r27, r1
    82a4:	e8 16       	cp	r14, r24
    82a6:	f9 06       	cpc	r15, r25
    82a8:	0a 07       	cpc	r16, r26
    82aa:	1b 07       	cpc	r17, r27
    82ac:	c0 f4       	brcc	.+48     	; 0x82de <f_lseek+0x27c>
	return clst * fs->csize + fs->database;
    82ae:	22 81       	ldd	r18, Z+2	; 0x02
    82b0:	30 e0       	ldi	r19, 0x00	; 0
    82b2:	40 e0       	ldi	r20, 0x00	; 0
    82b4:	50 e0       	ldi	r21, 0x00	; 0
    82b6:	c8 01       	movw	r24, r16
    82b8:	b7 01       	movw	r22, r14
    82ba:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    82be:	9b 01       	movw	r18, r22
    82c0:	ac 01       	movw	r20, r24
    82c2:	f6 01       	movw	r30, r12
    82c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    82c6:	93 8d       	ldd	r25, Z+27	; 0x1b
    82c8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    82ca:	b5 8d       	ldd	r27, Z+29	; 0x1d
    82cc:	28 0f       	add	r18, r24
    82ce:	39 1f       	adc	r19, r25
    82d0:	4a 1f       	adc	r20, r26
    82d2:	5b 1f       	adc	r21, r27
					ofs -= bcs;
				}
				fp->fptr += ofs;
				if (ofs % SS(fp->fs)) {
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    82d4:	21 15       	cp	r18, r1
    82d6:	31 05       	cpc	r19, r1
    82d8:	41 05       	cpc	r20, r1
    82da:	51 05       	cpc	r21, r1
    82dc:	69 f4       	brne	.+26     	; 0x82f8 <f_lseek+0x296>
    82de:	ab 81       	ldd	r26, Y+3	; 0x03
    82e0:	bc 81       	ldd	r27, Y+4	; 0x04
    82e2:	14 96       	adiw	r26, 0x04	; 4
    82e4:	8c 91       	ld	r24, X
    82e6:	14 97       	sbiw	r26, 0x04	; 4
    82e8:	80 68       	ori	r24, 0x80	; 128
    82ea:	14 96       	adiw	r26, 0x04	; 4
    82ec:	8c 93       	st	X, r24
    82ee:	e2 e0       	ldi	r30, 0x02	; 2
    82f0:	f0 e0       	ldi	r31, 0x00	; 0
    82f2:	e9 83       	std	Y+1, r30	; 0x01
    82f4:	fa 83       	std	Y+2, r31	; 0x02
    82f6:	2b c0       	rjmp	.+86     	; 0x834e <f_lseek+0x2ec>
					nsect += ofs / SS(fp->fs);
    82f8:	84 01       	movw	r16, r8
    82fa:	73 01       	movw	r14, r6
    82fc:	69 e0       	ldi	r22, 0x09	; 9
    82fe:	16 95       	lsr	r17
    8300:	07 95       	ror	r16
    8302:	f7 94       	ror	r15
    8304:	e7 94       	ror	r14
    8306:	6a 95       	dec	r22
    8308:	d1 f7       	brne	.-12     	; 0x82fe <f_lseek+0x29c>
    830a:	e2 0e       	add	r14, r18
    830c:	f3 1e       	adc	r15, r19
    830e:	04 1f       	adc	r16, r20
    8310:	15 1f       	adc	r17, r21
    8312:	03 c0       	rjmp	.+6      	; 0x831a <f_lseek+0x2b8>
    8314:	ee 24       	eor	r14, r14
    8316:	ff 24       	eor	r15, r15
    8318:	87 01       	movw	r16, r14
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    831a:	eb 81       	ldd	r30, Y+3	; 0x03
    831c:	fc 81       	ldd	r31, Y+4	; 0x04
    831e:	86 81       	ldd	r24, Z+6	; 0x06
    8320:	97 81       	ldd	r25, Z+7	; 0x07
    8322:	a0 85       	ldd	r26, Z+8	; 0x08
    8324:	b1 85       	ldd	r27, Z+9	; 0x09
    8326:	91 70       	andi	r25, 0x01	; 1
    8328:	a0 70       	andi	r26, 0x00	; 0
    832a:	b0 70       	andi	r27, 0x00	; 0
    832c:	00 97       	sbiw	r24, 0x00	; 0
    832e:	a1 05       	cpc	r26, r1
    8330:	b1 05       	cpc	r27, r1
    8332:	69 f0       	breq	.+26     	; 0x834e <f_lseek+0x2ec>
    8334:	86 89       	ldd	r24, Z+22	; 0x16
    8336:	97 89       	ldd	r25, Z+23	; 0x17
    8338:	a0 8d       	ldd	r26, Z+24	; 0x18
    833a:	b1 8d       	ldd	r27, Z+25	; 0x19
    833c:	e8 16       	cp	r14, r24
    833e:	f9 06       	cpc	r15, r25
    8340:	0a 07       	cpc	r16, r26
    8342:	1b 07       	cpc	r17, r27
    8344:	21 f0       	breq	.+8      	; 0x834e <f_lseek+0x2ec>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    8346:	e6 8a       	std	Z+22, r14	; 0x16
    8348:	f7 8a       	std	Z+23, r15	; 0x17
    834a:	00 8f       	std	Z+24, r16	; 0x18
    834c:	11 8f       	std	Z+25, r17	; 0x19
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    834e:	89 81       	ldd	r24, Y+1	; 0x01
    8350:	9a 81       	ldd	r25, Y+2	; 0x02
    8352:	24 96       	adiw	r28, 0x04	; 4
    8354:	e2 e1       	ldi	r30, 0x12	; 18
    8356:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

0000835a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Index of directory table */
)
{
    835a:	a0 e0       	ldi	r26, 0x00	; 0
    835c:	b0 e0       	ldi	r27, 0x00	; 0
    835e:	e3 eb       	ldi	r30, 0xB3	; 179
    8360:	f1 e4       	ldi	r31, 0x41	; 65
    8362:	0c 94 96 51 	jmp	0xa32c	; 0xa32c <__prologue_saves__+0x10>
    8366:	5c 01       	movw	r10, r24
    8368:	6b 01       	movw	r12, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    836a:	dc 01       	movw	r26, r24
    836c:	14 96       	adiw	r26, 0x04	; 4
    836e:	6d 93       	st	X+, r22
    8370:	7c 93       	st	X, r23
    8372:	15 97       	sbiw	r26, 0x05	; 5
	clst = dj->sclust;
    8374:	16 96       	adiw	r26, 0x06	; 6
    8376:	4d 91       	ld	r20, X+
    8378:	5d 91       	ld	r21, X+
    837a:	6d 91       	ld	r22, X+
    837c:	7c 91       	ld	r23, X
    837e:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    8380:	41 30       	cpi	r20, 0x01	; 1
    8382:	51 05       	cpc	r21, r1
    8384:	61 05       	cpc	r22, r1
    8386:	71 05       	cpc	r23, r1
    8388:	09 f4       	brne	.+2      	; 0x838c <dir_sdi+0x32>
    838a:	d5 c0       	rjmp	.+426    	; 0x8536 <dir_sdi+0x1dc>
    838c:	ed 91       	ld	r30, X+
    838e:	fc 91       	ld	r31, X
    8390:	82 85       	ldd	r24, Z+10	; 0x0a
    8392:	93 85       	ldd	r25, Z+11	; 0x0b
    8394:	a4 85       	ldd	r26, Z+12	; 0x0c
    8396:	b5 85       	ldd	r27, Z+13	; 0x0d
    8398:	48 17       	cp	r20, r24
    839a:	59 07       	cpc	r21, r25
    839c:	6a 07       	cpc	r22, r26
    839e:	7b 07       	cpc	r23, r27
    83a0:	08 f0       	brcs	.+2      	; 0x83a4 <dir_sdi+0x4a>
    83a2:	c9 c0       	rjmp	.+402    	; 0x8536 <dir_sdi+0x1dc>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    83a4:	41 15       	cp	r20, r1
    83a6:	51 05       	cpc	r21, r1
    83a8:	61 05       	cpc	r22, r1
    83aa:	71 05       	cpc	r23, r1
    83ac:	81 f5       	brne	.+96     	; 0x840e <dir_sdi+0xb4>
    83ae:	80 81       	ld	r24, Z
    83b0:	83 30       	cpi	r24, 0x03	; 3
    83b2:	49 f4       	brne	.+18     	; 0x83c6 <dir_sdi+0x6c>
		clst = dj->fs->dirbase;
    83b4:	46 89       	ldd	r20, Z+22	; 0x16
    83b6:	57 89       	ldd	r21, Z+23	; 0x17
    83b8:	60 8d       	ldd	r22, Z+24	; 0x18
    83ba:	71 8d       	ldd	r23, Z+25	; 0x19

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    83bc:	41 15       	cp	r20, r1
    83be:	51 05       	cpc	r21, r1
    83c0:	61 05       	cpc	r22, r1
    83c2:	71 05       	cpc	r23, r1
    83c4:	21 f5       	brne	.+72     	; 0x840e <dir_sdi+0xb4>
		dj->clust = clst;
    83c6:	f5 01       	movw	r30, r10
    83c8:	12 86       	std	Z+10, r1	; 0x0a
    83ca:	13 86       	std	Z+11, r1	; 0x0b
    83cc:	14 86       	std	Z+12, r1	; 0x0c
    83ce:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    83d0:	01 90       	ld	r0, Z+
    83d2:	f0 81       	ld	r31, Z
    83d4:	e0 2d       	mov	r30, r0
    83d6:	80 85       	ldd	r24, Z+8	; 0x08
    83d8:	91 85       	ldd	r25, Z+9	; 0x09
    83da:	c8 16       	cp	r12, r24
    83dc:	d9 06       	cpc	r13, r25
    83de:	08 f0       	brcs	.+2      	; 0x83e2 <dir_sdi+0x88>
    83e0:	aa c0       	rjmp	.+340    	; 0x8536 <dir_sdi+0x1dc>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    83e2:	c6 01       	movw	r24, r12
    83e4:	24 e0       	ldi	r18, 0x04	; 4
    83e6:	96 95       	lsr	r25
    83e8:	87 95       	ror	r24
    83ea:	2a 95       	dec	r18
    83ec:	e1 f7       	brne	.-8      	; 0x83e6 <dir_sdi+0x8c>
    83ee:	a0 e0       	ldi	r26, 0x00	; 0
    83f0:	b0 e0       	ldi	r27, 0x00	; 0
    83f2:	26 89       	ldd	r18, Z+22	; 0x16
    83f4:	37 89       	ldd	r19, Z+23	; 0x17
    83f6:	40 8d       	ldd	r20, Z+24	; 0x18
    83f8:	51 8d       	ldd	r21, Z+25	; 0x19
    83fa:	82 0f       	add	r24, r18
    83fc:	93 1f       	adc	r25, r19
    83fe:	a4 1f       	adc	r26, r20
    8400:	b5 1f       	adc	r27, r21
    8402:	f5 01       	movw	r30, r10
    8404:	86 87       	std	Z+14, r24	; 0x0e
    8406:	97 87       	std	Z+15, r25	; 0x0f
    8408:	a0 8b       	std	Z+16, r26	; 0x10
    840a:	b1 8b       	std	Z+17, r27	; 0x11
    840c:	7b c0       	rjmp	.+246    	; 0x8504 <dir_sdi+0x1aa>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    840e:	82 81       	ldd	r24, Z+2	; 0x02
    8410:	08 2f       	mov	r16, r24
    8412:	10 e0       	ldi	r17, 0x00	; 0
    8414:	94 e0       	ldi	r25, 0x04	; 4
    8416:	00 0f       	add	r16, r16
    8418:	11 1f       	adc	r17, r17
    841a:	9a 95       	dec	r25
    841c:	e1 f7       	brne	.-8      	; 0x8416 <dir_sdi+0xbc>
    841e:	25 c0       	rjmp	.+74     	; 0x846a <dir_sdi+0x110>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    8420:	ce 01       	movw	r24, r28
    8422:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <get_fat>
    8426:	ab 01       	movw	r20, r22
    8428:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    842a:	4f 3f       	cpi	r20, 0xFF	; 255
    842c:	ff ef       	ldi	r31, 0xFF	; 255
    842e:	5f 07       	cpc	r21, r31
    8430:	ff ef       	ldi	r31, 0xFF	; 255
    8432:	6f 07       	cpc	r22, r31
    8434:	ff ef       	ldi	r31, 0xFF	; 255
    8436:	7f 07       	cpc	r23, r31
    8438:	19 f4       	brne	.+6      	; 0x8440 <dir_sdi+0xe6>
    843a:	21 e0       	ldi	r18, 0x01	; 1
    843c:	30 e0       	ldi	r19, 0x00	; 0
    843e:	7d c0       	rjmp	.+250    	; 0x853a <dir_sdi+0x1e0>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    8440:	42 30       	cpi	r20, 0x02	; 2
    8442:	51 05       	cpc	r21, r1
    8444:	61 05       	cpc	r22, r1
    8446:	71 05       	cpc	r23, r1
    8448:	08 f4       	brcc	.+2      	; 0x844c <dir_sdi+0xf2>
    844a:	75 c0       	rjmp	.+234    	; 0x8536 <dir_sdi+0x1dc>
    844c:	d5 01       	movw	r26, r10
    844e:	ed 91       	ld	r30, X+
    8450:	fc 91       	ld	r31, X
    8452:	82 85       	ldd	r24, Z+10	; 0x0a
    8454:	93 85       	ldd	r25, Z+11	; 0x0b
    8456:	a4 85       	ldd	r26, Z+12	; 0x0c
    8458:	b5 85       	ldd	r27, Z+13	; 0x0d
    845a:	48 17       	cp	r20, r24
    845c:	59 07       	cpc	r21, r25
    845e:	6a 07       	cpc	r22, r26
    8460:	7b 07       	cpc	r23, r27
    8462:	08 f0       	brcs	.+2      	; 0x8466 <dir_sdi+0x10c>
    8464:	68 c0       	rjmp	.+208    	; 0x8536 <dir_sdi+0x1dc>
				return FR_INT_ERR;
			idx -= ic;
    8466:	c0 1a       	sub	r12, r16
    8468:	d1 0a       	sbc	r13, r17
    846a:	f5 01       	movw	r30, r10
    846c:	c0 81       	ld	r28, Z
    846e:	d1 81       	ldd	r29, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    8470:	c0 16       	cp	r12, r16
    8472:	d1 06       	cpc	r13, r17
    8474:	a8 f6       	brcc	.-86     	; 0x8420 <dir_sdi+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    8476:	d5 01       	movw	r26, r10
    8478:	1a 96       	adiw	r26, 0x0a	; 10
    847a:	4d 93       	st	X+, r20
    847c:	5d 93       	st	X+, r21
    847e:	6d 93       	st	X+, r22
    8480:	7c 93       	st	X, r23
    8482:	1d 97       	sbiw	r26, 0x0d	; 13
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    8484:	8e ef       	ldi	r24, 0xFE	; 254
    8486:	e8 2e       	mov	r14, r24
    8488:	8f ef       	ldi	r24, 0xFF	; 255
    848a:	f8 2e       	mov	r15, r24
    848c:	8f ef       	ldi	r24, 0xFF	; 255
    848e:	08 2f       	mov	r16, r24
    8490:	8f ef       	ldi	r24, 0xFF	; 255
    8492:	18 2f       	mov	r17, r24
    8494:	e4 0e       	add	r14, r20
    8496:	f5 1e       	adc	r15, r21
    8498:	06 1f       	adc	r16, r22
    849a:	17 1f       	adc	r17, r23
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    849c:	8a 85       	ldd	r24, Y+10	; 0x0a
    849e:	9b 85       	ldd	r25, Y+11	; 0x0b
    84a0:	ac 85       	ldd	r26, Y+12	; 0x0c
    84a2:	bd 85       	ldd	r27, Y+13	; 0x0d
    84a4:	02 97       	sbiw	r24, 0x02	; 2
    84a6:	a1 09       	sbc	r26, r1
    84a8:	b1 09       	sbc	r27, r1
    84aa:	e8 16       	cp	r14, r24
    84ac:	f9 06       	cpc	r15, r25
    84ae:	0a 07       	cpc	r16, r26
    84b0:	1b 07       	cpc	r17, r27
    84b2:	28 f0       	brcs	.+10     	; 0x84be <dir_sdi+0x164>
    84b4:	20 e0       	ldi	r18, 0x00	; 0
    84b6:	30 e0       	ldi	r19, 0x00	; 0
    84b8:	40 e0       	ldi	r20, 0x00	; 0
    84ba:	50 e0       	ldi	r21, 0x00	; 0
    84bc:	12 c0       	rjmp	.+36     	; 0x84e2 <dir_sdi+0x188>
	return clst * fs->csize + fs->database;
    84be:	2a 81       	ldd	r18, Y+2	; 0x02
    84c0:	30 e0       	ldi	r19, 0x00	; 0
    84c2:	40 e0       	ldi	r20, 0x00	; 0
    84c4:	50 e0       	ldi	r21, 0x00	; 0
    84c6:	c8 01       	movw	r24, r16
    84c8:	b7 01       	movw	r22, r14
    84ca:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    84ce:	9b 01       	movw	r18, r22
    84d0:	ac 01       	movw	r20, r24
    84d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    84d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    84d6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    84d8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    84da:	28 0f       	add	r18, r24
    84dc:	39 1f       	adc	r19, r25
    84de:	4a 1f       	adc	r20, r26
    84e0:	5b 1f       	adc	r21, r27
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    84e2:	c6 01       	movw	r24, r12
    84e4:	b4 e0       	ldi	r27, 0x04	; 4
    84e6:	96 95       	lsr	r25
    84e8:	87 95       	ror	r24
    84ea:	ba 95       	dec	r27
    84ec:	e1 f7       	brne	.-8      	; 0x84e6 <dir_sdi+0x18c>
    84ee:	a0 e0       	ldi	r26, 0x00	; 0
    84f0:	b0 e0       	ldi	r27, 0x00	; 0
    84f2:	28 0f       	add	r18, r24
    84f4:	39 1f       	adc	r19, r25
    84f6:	4a 1f       	adc	r20, r26
    84f8:	5b 1f       	adc	r21, r27
    84fa:	f5 01       	movw	r30, r10
    84fc:	26 87       	std	Z+14, r18	; 0x0e
    84fe:	37 87       	std	Z+15, r19	; 0x0f
    8500:	40 8b       	std	Z+16, r20	; 0x10
    8502:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    8504:	ff e0       	ldi	r31, 0x0F	; 15
    8506:	cf 22       	and	r12, r31
    8508:	dd 24       	eor	r13, r13
    850a:	a5 e0       	ldi	r26, 0x05	; 5
    850c:	cc 0c       	add	r12, r12
    850e:	dd 1c       	adc	r13, r13
    8510:	aa 95       	dec	r26
    8512:	e1 f7       	brne	.-8      	; 0x850c <dir_sdi+0x1b2>
    8514:	82 e2       	ldi	r24, 0x22	; 34
    8516:	90 e0       	ldi	r25, 0x00	; 0
    8518:	c8 0e       	add	r12, r24
    851a:	d9 1e       	adc	r13, r25
    851c:	d5 01       	movw	r26, r10
    851e:	8d 91       	ld	r24, X+
    8520:	9c 91       	ld	r25, X
    8522:	11 97       	sbiw	r26, 0x01	; 1
    8524:	8c 0d       	add	r24, r12
    8526:	9d 1d       	adc	r25, r13
    8528:	52 96       	adiw	r26, 0x12	; 18
    852a:	8d 93       	st	X+, r24
    852c:	9c 93       	st	X, r25
    852e:	53 97       	sbiw	r26, 0x13	; 19
    8530:	20 e0       	ldi	r18, 0x00	; 0
    8532:	30 e0       	ldi	r19, 0x00	; 0
    8534:	02 c0       	rjmp	.+4      	; 0x853a <dir_sdi+0x1e0>

	return FR_OK;	/* Seek succeeded */
    8536:	22 e0       	ldi	r18, 0x02	; 2
    8538:	30 e0       	ldi	r19, 0x00	; 0
}
    853a:	c9 01       	movw	r24, r18
    853c:	cd b7       	in	r28, 0x3d	; 61
    853e:	de b7       	in	r29, 0x3e	; 62
    8540:	ea e0       	ldi	r30, 0x0A	; 10
    8542:	0c 94 b2 51 	jmp	0xa364	; 0xa364 <__epilogue_restores__+0x10>

00008546 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    8546:	a0 e0       	ldi	r26, 0x00	; 0
    8548:	b0 e0       	ldi	r27, 0x00	; 0
    854a:	e9 ea       	ldi	r30, 0xA9	; 169
    854c:	f2 e4       	ldi	r31, 0x42	; 66
    854e:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    8552:	ec 01       	movw	r28, r24
    8554:	16 2f       	mov	r17, r22
    8556:	07 2f       	mov	r16, r23
    8558:	4a 01       	movw	r8, r20
    855a:	29 01       	movw	r4, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    855c:	f9 01       	movw	r30, r18
    855e:	10 82       	st	Z, r1
    8560:	11 82       	std	Z+1, r1	; 0x01

	res = validate(fp);							/* Check validity */
    8562:	0e 94 c8 3e 	call	0x7d90	; 0x7d90 <validate>
    8566:	5c 01       	movw	r10, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8568:	00 97       	sbiw	r24, 0x00	; 0
    856a:	09 f0       	breq	.+2      	; 0x856e <f_read+0x28>
    856c:	14 c1       	rjmp	.+552    	; 0x8796 <f_read+0x250>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    856e:	8c 81       	ldd	r24, Y+4	; 0x04
    8570:	87 fd       	sbrc	r24, 7
    8572:	59 c0       	rjmp	.+178    	; 0x8626 <f_read+0xe0>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    8574:	80 fd       	sbrc	r24, 0
    8576:	04 c0       	rjmp	.+8      	; 0x8580 <f_read+0x3a>
    8578:	e7 e0       	ldi	r30, 0x07	; 7
    857a:	ae 2e       	mov	r10, r30
    857c:	b1 2c       	mov	r11, r1
    857e:	0b c1       	rjmp	.+534    	; 0x8796 <f_read+0x250>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    8580:	2a 85       	ldd	r18, Y+10	; 0x0a
    8582:	3b 85       	ldd	r19, Y+11	; 0x0b
    8584:	4c 85       	ldd	r20, Y+12	; 0x0c
    8586:	5d 85       	ldd	r21, Y+13	; 0x0d
    8588:	8e 81       	ldd	r24, Y+6	; 0x06
    858a:	9f 81       	ldd	r25, Y+7	; 0x07
    858c:	a8 85       	ldd	r26, Y+8	; 0x08
    858e:	b9 85       	ldd	r27, Y+9	; 0x09
    8590:	28 1b       	sub	r18, r24
    8592:	39 0b       	sbc	r19, r25
    8594:	4a 0b       	sbc	r20, r26
    8596:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    8598:	c4 01       	movw	r24, r8
    859a:	a0 e0       	ldi	r26, 0x00	; 0
    859c:	b0 e0       	ldi	r27, 0x00	; 0
    859e:	28 17       	cp	r18, r24
    85a0:	39 07       	cpc	r19, r25
    85a2:	4a 07       	cpc	r20, r26
    85a4:	5b 07       	cpc	r21, r27
    85a6:	08 f4       	brcc	.+2      	; 0x85aa <f_read+0x64>
    85a8:	49 01       	movw	r8, r18
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    85aa:	81 2f       	mov	r24, r17
    85ac:	90 2f       	mov	r25, r16
    85ae:	9c 01       	movw	r18, r24
    85b0:	39 01       	movw	r6, r18
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    85b2:	21 2c       	mov	r2, r1
    85b4:	72 e0       	ldi	r23, 0x02	; 2
    85b6:	37 2e       	mov	r3, r23
    85b8:	ea c0       	rjmp	.+468    	; 0x878e <f_read+0x248>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    85ba:	2e 81       	ldd	r18, Y+6	; 0x06
    85bc:	3f 81       	ldd	r19, Y+7	; 0x07
    85be:	48 85       	ldd	r20, Y+8	; 0x08
    85c0:	59 85       	ldd	r21, Y+9	; 0x09
    85c2:	da 01       	movw	r26, r20
    85c4:	c9 01       	movw	r24, r18
    85c6:	91 70       	andi	r25, 0x01	; 1
    85c8:	a0 70       	andi	r26, 0x00	; 0
    85ca:	b0 70       	andi	r27, 0x00	; 0
    85cc:	00 97       	sbiw	r24, 0x00	; 0
    85ce:	a1 05       	cpc	r26, r1
    85d0:	b1 05       	cpc	r27, r1
    85d2:	09 f0       	breq	.+2      	; 0x85d6 <f_read+0x90>
    85d4:	91 c0       	rjmp	.+290    	; 0x86f8 <f_read+0x1b2>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    85d6:	e8 81       	ld	r30, Y
    85d8:	f9 81       	ldd	r31, Y+1	; 0x01
    85da:	da 01       	movw	r26, r20
    85dc:	c9 01       	movw	r24, r18
    85de:	69 e0       	ldi	r22, 0x09	; 9
    85e0:	b6 95       	lsr	r27
    85e2:	a7 95       	ror	r26
    85e4:	97 95       	ror	r25
    85e6:	87 95       	ror	r24
    85e8:	6a 95       	dec	r22
    85ea:	d1 f7       	brne	.-12     	; 0x85e0 <f_read+0x9a>
    85ec:	d2 80       	ldd	r13, Z+2	; 0x02
    85ee:	da 94       	dec	r13
    85f0:	d8 22       	and	r13, r24
			if (!csect) {						/* On the cluster boundary? */
    85f2:	51 f5       	brne	.+84     	; 0x8648 <f_read+0x102>
				if (fp->fptr == 0) {			/* On the top of the file? */
    85f4:	21 15       	cp	r18, r1
    85f6:	31 05       	cpc	r19, r1
    85f8:	41 05       	cpc	r20, r1
    85fa:	51 05       	cpc	r21, r1
    85fc:	29 f4       	brne	.+10     	; 0x8608 <f_read+0xc2>
					clst = fp->sclust;			/* Follow from the origin */
    85fe:	6e 85       	ldd	r22, Y+14	; 0x0e
    8600:	7f 85       	ldd	r23, Y+15	; 0x0f
    8602:	88 89       	ldd	r24, Y+16	; 0x10
    8604:	99 89       	ldd	r25, Y+17	; 0x11
    8606:	07 c0       	rjmp	.+14     	; 0x8616 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    8608:	4a 89       	ldd	r20, Y+18	; 0x12
    860a:	5b 89       	ldd	r21, Y+19	; 0x13
    860c:	6c 89       	ldd	r22, Y+20	; 0x14
    860e:	7d 89       	ldd	r23, Y+21	; 0x15
    8610:	cf 01       	movw	r24, r30
    8612:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    8616:	62 30       	cpi	r22, 0x02	; 2
    8618:	71 05       	cpc	r23, r1
    861a:	81 05       	cpc	r24, r1
    861c:	91 05       	cpc	r25, r1
    861e:	38 f4       	brcc	.+14     	; 0x862e <f_read+0xe8>
    8620:	8c 81       	ldd	r24, Y+4	; 0x04
    8622:	80 68       	ori	r24, 0x80	; 128
    8624:	8c 83       	std	Y+4, r24	; 0x04
    8626:	72 e0       	ldi	r23, 0x02	; 2
    8628:	a7 2e       	mov	r10, r23
    862a:	b1 2c       	mov	r11, r1
    862c:	b4 c0       	rjmp	.+360    	; 0x8796 <f_read+0x250>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    862e:	6f 3f       	cpi	r22, 0xFF	; 255
    8630:	ff ef       	ldi	r31, 0xFF	; 255
    8632:	7f 07       	cpc	r23, r31
    8634:	ff ef       	ldi	r31, 0xFF	; 255
    8636:	8f 07       	cpc	r24, r31
    8638:	ff ef       	ldi	r31, 0xFF	; 255
    863a:	9f 07       	cpc	r25, r31
    863c:	09 f4       	brne	.+2      	; 0x8640 <f_read+0xfa>
    863e:	6a c0       	rjmp	.+212    	; 0x8714 <f_read+0x1ce>
				fp->clust = clst;				/* Update current cluster */
    8640:	6a 8b       	std	Y+18, r22	; 0x12
    8642:	7b 8b       	std	Y+19, r23	; 0x13
    8644:	8c 8b       	std	Y+20, r24	; 0x14
    8646:	9d 8b       	std	Y+21, r25	; 0x15
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    8648:	08 81       	ld	r16, Y
    864a:	19 81       	ldd	r17, Y+1	; 0x01
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    864c:	2a 89       	ldd	r18, Y+18	; 0x12
    864e:	3b 89       	ldd	r19, Y+19	; 0x13
    8650:	4c 89       	ldd	r20, Y+20	; 0x14
    8652:	5d 89       	ldd	r21, Y+21	; 0x15
    8654:	22 50       	subi	r18, 0x02	; 2
    8656:	30 40       	sbci	r19, 0x00	; 0
    8658:	40 40       	sbci	r20, 0x00	; 0
    865a:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    865c:	f8 01       	movw	r30, r16
    865e:	82 85       	ldd	r24, Z+10	; 0x0a
    8660:	93 85       	ldd	r25, Z+11	; 0x0b
    8662:	a4 85       	ldd	r26, Z+12	; 0x0c
    8664:	b5 85       	ldd	r27, Z+13	; 0x0d
    8666:	02 97       	sbiw	r24, 0x02	; 2
    8668:	a1 09       	sbc	r26, r1
    866a:	b1 09       	sbc	r27, r1
    866c:	28 17       	cp	r18, r24
    866e:	39 07       	cpc	r19, r25
    8670:	4a 07       	cpc	r20, r26
    8672:	5b 07       	cpc	r21, r27
    8674:	a8 f6       	brcc	.-86     	; 0x8620 <f_read+0xda>
	return clst * fs->csize + fs->database;
    8676:	c2 80       	ldd	r12, Z+2	; 0x02
    8678:	6c 2d       	mov	r22, r12
    867a:	70 e0       	ldi	r23, 0x00	; 0
    867c:	80 e0       	ldi	r24, 0x00	; 0
    867e:	90 e0       	ldi	r25, 0x00	; 0
    8680:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    8684:	9b 01       	movw	r18, r22
    8686:	ac 01       	movw	r20, r24
    8688:	f8 01       	movw	r30, r16
    868a:	82 8d       	ldd	r24, Z+26	; 0x1a
    868c:	93 8d       	ldd	r25, Z+27	; 0x1b
    868e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    8690:	b5 8d       	ldd	r27, Z+29	; 0x1d
    8692:	28 0f       	add	r18, r24
    8694:	39 1f       	adc	r19, r25
    8696:	4a 1f       	adc	r20, r26
    8698:	5b 1f       	adc	r21, r27
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    869a:	21 15       	cp	r18, r1
    869c:	31 05       	cpc	r19, r1
    869e:	41 05       	cpc	r20, r1
    86a0:	51 05       	cpc	r21, r1
    86a2:	09 f4       	brne	.+2      	; 0x86a6 <f_read+0x160>
    86a4:	bd cf       	rjmp	.-134    	; 0x8620 <f_read+0xda>
			sect += csect;
    86a6:	2d 0d       	add	r18, r13
    86a8:	31 1d       	adc	r19, r1
    86aa:	41 1d       	adc	r20, r1
    86ac:	51 1d       	adc	r21, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    86ae:	74 01       	movw	r14, r8
    86b0:	ef 2c       	mov	r14, r15
    86b2:	ff 24       	eor	r15, r15
    86b4:	e6 94       	lsr	r14
			if (cc) {							/* Read maximum contiguous sectors directly */
    86b6:	e1 14       	cp	r14, r1
    86b8:	f1 04       	cpc	r15, r1
    86ba:	d1 f0       	breq	.+52     	; 0x86f0 <f_read+0x1aa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    86bc:	ed 2d       	mov	r30, r13
    86be:	f0 e0       	ldi	r31, 0x00	; 0
    86c0:	c7 01       	movw	r24, r14
    86c2:	8e 0f       	add	r24, r30
    86c4:	9f 1f       	adc	r25, r31
    86c6:	6c 2d       	mov	r22, r12
    86c8:	70 e0       	ldi	r23, 0x00	; 0
    86ca:	68 17       	cp	r22, r24
    86cc:	79 07       	cpc	r23, r25
    86ce:	18 f4       	brcc	.+6      	; 0x86d6 <f_read+0x190>
					cc = fp->fs->csize - csect;
    86d0:	7b 01       	movw	r14, r22
    86d2:	ee 1a       	sub	r14, r30
    86d4:	ff 0a       	sbc	r15, r31
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    86d6:	f8 01       	movw	r30, r16
    86d8:	81 81       	ldd	r24, Z+1	; 0x01
    86da:	b3 01       	movw	r22, r6
    86dc:	0e 2d       	mov	r16, r14
    86de:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <disk_read>
    86e2:	89 2b       	or	r24, r25
    86e4:	b9 f4       	brne	.+46     	; 0x8714 <f_read+0x1ce>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    86e6:	b7 01       	movw	r22, r14
    86e8:	76 2f       	mov	r23, r22
    86ea:	66 27       	eor	r22, r22
    86ec:	77 0f       	add	r23, r23
    86ee:	35 c0       	rjmp	.+106    	; 0x875a <f_read+0x214>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    86f0:	2e 8b       	std	Y+22, r18	; 0x16
    86f2:	3f 8b       	std	Y+23, r19	; 0x17
    86f4:	48 8f       	std	Y+24, r20	; 0x18
    86f6:	59 8f       	std	Y+25, r21	; 0x19
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    86f8:	ee 80       	ldd	r14, Y+6	; 0x06
    86fa:	ff 80       	ldd	r15, Y+7	; 0x07
    86fc:	08 85       	ldd	r16, Y+8	; 0x08
    86fe:	19 85       	ldd	r17, Y+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    8700:	4e 89       	ldd	r20, Y+22	; 0x16
    8702:	5f 89       	ldd	r21, Y+23	; 0x17
    8704:	68 8d       	ldd	r22, Y+24	; 0x18
    8706:	79 8d       	ldd	r23, Y+25	; 0x19
    8708:	88 81       	ld	r24, Y
    870a:	99 81       	ldd	r25, Y+1	; 0x01
    870c:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <move_window>
    8710:	89 2b       	or	r24, r25
    8712:	39 f0       	breq	.+14     	; 0x8722 <f_read+0x1dc>
			ABORT(fp->fs, FR_DISK_ERR);
    8714:	8c 81       	ldd	r24, Y+4	; 0x04
    8716:	80 68       	ori	r24, 0x80	; 128
    8718:	8c 83       	std	Y+4, r24	; 0x04
    871a:	31 e0       	ldi	r19, 0x01	; 1
    871c:	a3 2e       	mov	r10, r19
    871e:	b1 2c       	mov	r11, r1
    8720:	3a c0       	rjmp	.+116    	; 0x8796 <f_read+0x250>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    8722:	c7 01       	movw	r24, r14
    8724:	91 70       	andi	r25, 0x01	; 1
    8726:	91 01       	movw	r18, r2
    8728:	28 1b       	sub	r18, r24
    872a:	39 0b       	sbc	r19, r25
    872c:	b4 01       	movw	r22, r8
    872e:	28 15       	cp	r18, r8
    8730:	39 05       	cpc	r19, r9
    8732:	08 f4       	brcc	.+2      	; 0x8736 <f_read+0x1f0>
    8734:	b9 01       	movw	r22, r18

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    8736:	8e 81       	ldd	r24, Y+6	; 0x06
    8738:	9f 81       	ldd	r25, Y+7	; 0x07
    873a:	91 70       	andi	r25, 0x01	; 1
    873c:	82 96       	adiw	r24, 0x22	; 34
    873e:	e8 81       	ld	r30, Y
    8740:	f9 81       	ldd	r31, Y+1	; 0x01
    8742:	e8 0f       	add	r30, r24
    8744:	f9 1f       	adc	r31, r25
    8746:	d3 01       	movw	r26, r6
    8748:	9b 01       	movw	r18, r22
    874a:	04 c0       	rjmp	.+8      	; 0x8754 <f_read+0x20e>
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    874c:	81 91       	ld	r24, Z+
    874e:	8d 93       	st	X+, r24
    8750:	21 50       	subi	r18, 0x01	; 1
    8752:	30 40       	sbci	r19, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    8754:	21 15       	cp	r18, r1
    8756:	31 05       	cpc	r19, r1
    8758:	c9 f7       	brne	.-14     	; 0x874c <f_read+0x206>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    875a:	66 0e       	add	r6, r22
    875c:	77 1e       	adc	r7, r23
    875e:	cb 01       	movw	r24, r22
    8760:	a0 e0       	ldi	r26, 0x00	; 0
    8762:	b0 e0       	ldi	r27, 0x00	; 0
    8764:	2e 81       	ldd	r18, Y+6	; 0x06
    8766:	3f 81       	ldd	r19, Y+7	; 0x07
    8768:	48 85       	ldd	r20, Y+8	; 0x08
    876a:	59 85       	ldd	r21, Y+9	; 0x09
    876c:	28 0f       	add	r18, r24
    876e:	39 1f       	adc	r19, r25
    8770:	4a 1f       	adc	r20, r26
    8772:	5b 1f       	adc	r21, r27
    8774:	2e 83       	std	Y+6, r18	; 0x06
    8776:	3f 83       	std	Y+7, r19	; 0x07
    8778:	48 87       	std	Y+8, r20	; 0x08
    877a:	59 87       	std	Y+9, r21	; 0x09
    877c:	f2 01       	movw	r30, r4
    877e:	80 81       	ld	r24, Z
    8780:	91 81       	ldd	r25, Z+1	; 0x01
    8782:	86 0f       	add	r24, r22
    8784:	97 1f       	adc	r25, r23
    8786:	80 83       	st	Z, r24
    8788:	91 83       	std	Z+1, r25	; 0x01
    878a:	86 1a       	sub	r8, r22
    878c:	97 0a       	sbc	r9, r23
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    878e:	81 14       	cp	r8, r1
    8790:	91 04       	cpc	r9, r1
    8792:	09 f0       	breq	.+2      	; 0x8796 <f_read+0x250>
    8794:	12 cf       	rjmp	.-476    	; 0x85ba <f_read+0x74>
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    8796:	c5 01       	movw	r24, r10
    8798:	cd b7       	in	r28, 0x3d	; 61
    879a:	de b7       	in	r29, 0x3e	; 62
    879c:	e2 e1       	ldi	r30, 0x12	; 18
    879e:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>

000087a2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    87a2:	a4 e0       	ldi	r26, 0x04	; 4
    87a4:	b0 e0       	ldi	r27, 0x00	; 0
    87a6:	e7 ed       	ldi	r30, 0xD7	; 215
    87a8:	f3 e4       	ldi	r31, 0x43	; 67
    87aa:	0c 94 90 51 	jmp	0xa320	; 0xa320 <__prologue_saves__+0x4>
    87ae:	6c 01       	movw	r12, r24
    87b0:	5b 01       	movw	r10, r22
    87b2:	4a 01       	movw	r8, r20
    87b4:	7c 01       	movw	r14, r24
    87b6:	00 e0       	ldi	r16, 0x00	; 0
    87b8:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    87ba:	08 94       	sec
    87bc:	a1 08       	sbc	r10, r1
    87be:	b1 08       	sbc	r11, r1
		f_read(fil, s, 1, &rc);
    87c0:	f3 e0       	ldi	r31, 0x03	; 3
    87c2:	4f 2e       	mov	r4, r31
    87c4:	51 2c       	mov	r5, r1
    87c6:	4c 0e       	add	r4, r28
    87c8:	5d 1e       	adc	r5, r29
    87ca:	3e 01       	movw	r6, r28
    87cc:	08 94       	sec
    87ce:	61 1c       	adc	r6, r1
    87d0:	71 1c       	adc	r7, r1
    87d2:	15 c0       	rjmp	.+42     	; 0x87fe <f_gets+0x5c>
    87d4:	c4 01       	movw	r24, r8
    87d6:	b3 01       	movw	r22, r6
    87d8:	41 e0       	ldi	r20, 0x01	; 1
    87da:	50 e0       	ldi	r21, 0x00	; 0
    87dc:	92 01       	movw	r18, r4
    87de:	0e 94 a3 42 	call	0x8546	; 0x8546 <f_read>
		if (rc != 1) break;			/* Break on EOF or error */
    87e2:	8b 81       	ldd	r24, Y+3	; 0x03
    87e4:	9c 81       	ldd	r25, Y+4	; 0x04
    87e6:	01 97       	sbiw	r24, 0x01	; 1
    87e8:	69 f4       	brne	.+26     	; 0x8804 <f_gets+0x62>
		c = s[0];
    87ea:	89 81       	ldd	r24, Y+1	; 0x01
				}
			}
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
    87ec:	8d 30       	cpi	r24, 0x0D	; 13
    87ee:	39 f0       	breq	.+14     	; 0x87fe <f_gets+0x5c>
#endif
		*p++ = c;
    87f0:	f7 01       	movw	r30, r14
    87f2:	81 93       	st	Z+, r24
    87f4:	7f 01       	movw	r14, r30
		n++;
    87f6:	0f 5f       	subi	r16, 0xFF	; 255
    87f8:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
    87fa:	8a 30       	cpi	r24, 0x0A	; 10
    87fc:	19 f0       	breq	.+6      	; 0x8804 <f_gets+0x62>
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    87fe:	0a 15       	cp	r16, r10
    8800:	1b 05       	cpc	r17, r11
    8802:	44 f3       	brlt	.-48     	; 0x87d4 <f_gets+0x32>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
    8804:	f7 01       	movw	r30, r14
    8806:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    8808:	01 15       	cp	r16, r1
    880a:	11 05       	cpc	r17, r1
    880c:	11 f4       	brne	.+4      	; 0x8812 <f_gets+0x70>
    880e:	cc 24       	eor	r12, r12
    8810:	dd 24       	eor	r13, r13
}
    8812:	c6 01       	movw	r24, r12
    8814:	24 96       	adiw	r28, 0x04	; 4
    8816:	e0 e1       	ldi	r30, 0x10	; 16
    8818:	0c 94 ac 51 	jmp	0xa358	; 0xa358 <__epilogue_restores__+0x4>

0000881c <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    881c:	0f 93       	push	r16
    881e:	cf 93       	push	r28
    8820:	df 93       	push	r29
    8822:	ec 01       	movw	r28, r24
    8824:	9a 01       	movw	r18, r20
    8826:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    8828:	bc 01       	movw	r22, r24
    882a:	6e 5d       	subi	r22, 0xDE	; 222
    882c:	7f 4f       	sbci	r23, 0xFF	; 255
    882e:	89 81       	ldd	r24, Y+1	; 0x01
    8830:	01 e0       	ldi	r16, 0x01	; 1
    8832:	0e 94 d6 4b 	call	0x97ac	; 0x97ac <disk_read>
    8836:	89 2b       	or	r24, r25
    8838:	11 f0       	breq	.+4      	; 0x883e <check_fs+0x22>
    883a:	63 e0       	ldi	r22, 0x03	; 3
    883c:	6d c0       	rjmp	.+218    	; 0x8918 <check_fs+0xfc>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    883e:	cf 5d       	subi	r28, 0xDF	; 223
    8840:	dd 4f       	sbci	r29, 0xFD	; 253
    8842:	98 81       	ld	r25, Y
    8844:	80 e0       	ldi	r24, 0x00	; 0
    8846:	2a 91       	ld	r18, -Y
    8848:	c0 52       	subi	r28, 0x20	; 32
    884a:	d2 40       	sbci	r29, 0x02	; 2
    884c:	30 e0       	ldi	r19, 0x00	; 0
    884e:	82 2b       	or	r24, r18
    8850:	93 2b       	or	r25, r19
    8852:	85 55       	subi	r24, 0x55	; 85
    8854:	9a 4a       	sbci	r25, 0xAA	; 170
    8856:	11 f0       	breq	.+4      	; 0x885c <check_fs+0x40>
    8858:	62 e0       	ldi	r22, 0x02	; 2
    885a:	5e c0       	rjmp	.+188    	; 0x8918 <check_fs+0xfc>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    885c:	c5 5a       	subi	r28, 0xA5	; 165
    885e:	df 4f       	sbci	r29, 0xFF	; 255
    8860:	28 81       	ld	r18, Y
    8862:	30 e0       	ldi	r19, 0x00	; 0
    8864:	40 e0       	ldi	r20, 0x00	; 0
    8866:	50 e0       	ldi	r21, 0x00	; 0
    8868:	52 2f       	mov	r21, r18
    886a:	44 27       	eor	r20, r20
    886c:	33 27       	eor	r19, r19
    886e:	22 27       	eor	r18, r18
    8870:	8a 91       	ld	r24, -Y
    8872:	90 e0       	ldi	r25, 0x00	; 0
    8874:	a0 e0       	ldi	r26, 0x00	; 0
    8876:	b0 e0       	ldi	r27, 0x00	; 0
    8878:	dc 01       	movw	r26, r24
    887a:	99 27       	eor	r25, r25
    887c:	88 27       	eor	r24, r24
    887e:	28 2b       	or	r18, r24
    8880:	39 2b       	or	r19, r25
    8882:	4a 2b       	or	r20, r26
    8884:	5b 2b       	or	r21, r27
    8886:	22 97       	sbiw	r28, 0x02	; 2
    8888:	89 91       	ld	r24, Y+
    888a:	90 e0       	ldi	r25, 0x00	; 0
    888c:	a0 e0       	ldi	r26, 0x00	; 0
    888e:	b0 e0       	ldi	r27, 0x00	; 0
    8890:	28 2b       	or	r18, r24
    8892:	39 2b       	or	r19, r25
    8894:	4a 2b       	or	r20, r26
    8896:	5b 2b       	or	r21, r27
    8898:	98 81       	ld	r25, Y
    889a:	c9 55       	subi	r28, 0x59	; 89
    889c:	d0 40       	sbci	r29, 0x00	; 0
    889e:	80 e0       	ldi	r24, 0x00	; 0
    88a0:	a0 e0       	ldi	r26, 0x00	; 0
    88a2:	b0 e0       	ldi	r27, 0x00	; 0
    88a4:	28 2b       	or	r18, r24
    88a6:	39 2b       	or	r19, r25
    88a8:	4a 2b       	or	r20, r26
    88aa:	5b 2b       	or	r21, r27
    88ac:	50 70       	andi	r21, 0x00	; 0
    88ae:	26 54       	subi	r18, 0x46	; 70
    88b0:	31 44       	sbci	r19, 0x41	; 65
    88b2:	44 45       	sbci	r20, 0x54	; 84
    88b4:	50 40       	sbci	r21, 0x00	; 0
    88b6:	11 f4       	brne	.+4      	; 0x88bc <check_fs+0xa0>
    88b8:	60 e0       	ldi	r22, 0x00	; 0
    88ba:	2e c0       	rjmp	.+92     	; 0x8918 <check_fs+0xfc>
    88bc:	60 e0       	ldi	r22, 0x00	; 0
    88be:	c9 58       	subi	r28, 0x89	; 137
    88c0:	df 4f       	sbci	r29, 0xFF	; 255
    88c2:	28 81       	ld	r18, Y
    88c4:	30 e0       	ldi	r19, 0x00	; 0
    88c6:	40 e0       	ldi	r20, 0x00	; 0
    88c8:	50 e0       	ldi	r21, 0x00	; 0
    88ca:	52 2f       	mov	r21, r18
    88cc:	44 27       	eor	r20, r20
    88ce:	33 27       	eor	r19, r19
    88d0:	22 27       	eor	r18, r18
    88d2:	8a 91       	ld	r24, -Y
    88d4:	90 e0       	ldi	r25, 0x00	; 0
    88d6:	a0 e0       	ldi	r26, 0x00	; 0
    88d8:	b0 e0       	ldi	r27, 0x00	; 0
    88da:	dc 01       	movw	r26, r24
    88dc:	99 27       	eor	r25, r25
    88de:	88 27       	eor	r24, r24
    88e0:	28 2b       	or	r18, r24
    88e2:	39 2b       	or	r19, r25
    88e4:	4a 2b       	or	r20, r26
    88e6:	5b 2b       	or	r21, r27
    88e8:	22 97       	sbiw	r28, 0x02	; 2
    88ea:	89 91       	ld	r24, Y+
    88ec:	90 e0       	ldi	r25, 0x00	; 0
    88ee:	a0 e0       	ldi	r26, 0x00	; 0
    88f0:	b0 e0       	ldi	r27, 0x00	; 0
    88f2:	28 2b       	or	r18, r24
    88f4:	39 2b       	or	r19, r25
    88f6:	4a 2b       	or	r20, r26
    88f8:	5b 2b       	or	r21, r27
    88fa:	98 81       	ld	r25, Y
    88fc:	80 e0       	ldi	r24, 0x00	; 0
    88fe:	a0 e0       	ldi	r26, 0x00	; 0
    8900:	b0 e0       	ldi	r27, 0x00	; 0
    8902:	28 2b       	or	r18, r24
    8904:	39 2b       	or	r19, r25
    8906:	4a 2b       	or	r20, r26
    8908:	5b 2b       	or	r21, r27
    890a:	50 70       	andi	r21, 0x00	; 0
    890c:	26 54       	subi	r18, 0x46	; 70
    890e:	31 44       	sbci	r19, 0x41	; 65
    8910:	44 45       	sbci	r20, 0x54	; 84
    8912:	50 40       	sbci	r21, 0x00	; 0
    8914:	09 f0       	breq	.+2      	; 0x8918 <check_fs+0xfc>
    8916:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    8918:	86 2f       	mov	r24, r22
    891a:	df 91       	pop	r29
    891c:	cf 91       	pop	r28
    891e:	0f 91       	pop	r16
    8920:	08 95       	ret

00008922 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    8922:	a3 e3       	ldi	r26, 0x33	; 51
    8924:	b0 e0       	ldi	r27, 0x00	; 0
    8926:	e7 e9       	ldi	r30, 0x97	; 151
    8928:	f4 e4       	ldi	r31, 0x44	; 68
    892a:	0c 94 8e 51 	jmp	0xa31c	; 0xa31c <__prologue_saves__>
    892e:	8f a7       	std	Y+47, r24	; 0x2f
    8930:	98 ab       	std	Y+48, r25	; 0x30
    8932:	1b 01       	movw	r2, r22
    8934:	49 ab       	std	Y+49, r20	; 0x31
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    8936:	89 2b       	or	r24, r25
    8938:	19 f4       	brne	.+6      	; 0x8940 <f_open+0x1e>
    893a:	09 e0       	ldi	r16, 0x09	; 9
    893c:	10 e0       	ldi	r17, 0x00	; 0
    893e:	f4 c4       	rjmp	.+2536   	; 0x9328 <f_open+0xa06>
	fp->fs = 0;			/* Clear file object */
    8940:	af a5       	ldd	r26, Y+47	; 0x2f
    8942:	b8 a9       	ldd	r27, Y+48	; 0x30
    8944:	1d 92       	st	X+, r1
    8946:	1c 92       	st	X, r1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    8948:	fb 01       	movw	r30, r22
    894a:	80 81       	ld	r24, Z
    894c:	28 2f       	mov	r18, r24
    894e:	33 27       	eor	r19, r19
    8950:	27 fd       	sbrc	r18, 7
    8952:	30 95       	com	r19
    8954:	20 53       	subi	r18, 0x30	; 48
    8956:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    8958:	2a 30       	cpi	r18, 0x0A	; 10
    895a:	31 05       	cpc	r19, r1
    895c:	50 f4       	brcc	.+20     	; 0x8972 <f_open+0x50>
    895e:	81 81       	ldd	r24, Z+1	; 0x01
    8960:	8a 33       	cpi	r24, 0x3A	; 58
    8962:	39 f4       	brne	.+14     	; 0x8972 <f_open+0x50>
		p += 2; *path = p;				/* Return pointer to the path name */
    8964:	42 e0       	ldi	r20, 0x02	; 2
    8966:	50 e0       	ldi	r21, 0x00	; 0
    8968:	24 0e       	add	r2, r20
    896a:	35 1e       	adc	r3, r21
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    896c:	23 2b       	or	r18, r19
    896e:	09 f0       	breq	.+2      	; 0x8972 <f_open+0x50>
    8970:	63 c2       	rjmp	.+1222   	; 0x8e38 <f_open+0x516>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    8972:	00 91 8d 24 	lds	r16, 0x248D
    8976:	10 91 8e 24 	lds	r17, 0x248E
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    897a:	01 15       	cp	r16, r1
    897c:	11 05       	cpc	r17, r1
    897e:	19 f4       	brne	.+6      	; 0x8986 <f_open+0x64>
    8980:	0c e0       	ldi	r16, 0x0C	; 12
    8982:	10 e0       	ldi	r17, 0x00	; 0
    8984:	d1 c4       	rjmp	.+2466   	; 0x9328 <f_open+0xa06>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    8986:	0d 87       	std	Y+13, r16	; 0x0d
    8988:	1e 87       	std	Y+14, r17	; 0x0e
	if (fs->fs_type) {					/* If the volume has been mounted */
    898a:	d8 01       	movw	r26, r16
    898c:	8c 91       	ld	r24, X
    898e:	88 23       	and	r24, r24
    8990:	31 f0       	breq	.+12     	; 0x899e <f_open+0x7c>
		stat = disk_status(fs->drv);
    8992:	11 96       	adiw	r26, 0x01	; 1
    8994:	8c 91       	ld	r24, X
    8996:	0e 94 cf 4b 	call	0x979e	; 0x979e <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    899a:	80 ff       	sbrs	r24, 0
    899c:	cd c4       	rjmp	.+2458   	; 0x9338 <f_open+0xa16>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    899e:	f8 01       	movw	r30, r16
    89a0:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    89a2:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    89a4:	80 e0       	ldi	r24, 0x00	; 0
    89a6:	0e 94 f3 4a 	call	0x95e6	; 0x95e6 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    89aa:	80 ff       	sbrs	r24, 0
    89ac:	03 c0       	rjmp	.+6      	; 0x89b4 <f_open+0x92>
    89ae:	03 e0       	ldi	r16, 0x03	; 3
    89b0:	10 e0       	ldi	r17, 0x00	; 0
    89b2:	ba c4       	rjmp	.+2420   	; 0x9328 <f_open+0xa06>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    89b4:	c8 01       	movw	r24, r16
    89b6:	40 e0       	ldi	r20, 0x00	; 0
    89b8:	50 e0       	ldi	r21, 0x00	; 0
    89ba:	60 e0       	ldi	r22, 0x00	; 0
    89bc:	70 e0       	ldi	r23, 0x00	; 0
    89be:	0e 94 0e 44 	call	0x881c	; 0x881c <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    89c2:	81 30       	cpi	r24, 0x01	; 1
    89c4:	29 f0       	breq	.+10     	; 0x89d0 <f_open+0xae>
    89c6:	1b a6       	std	Y+43, r1	; 0x2b
    89c8:	1c a6       	std	Y+44, r1	; 0x2c
    89ca:	1d a6       	std	Y+45, r1	; 0x2d
    89cc:	1e a6       	std	Y+46, r1	; 0x2e
    89ce:	33 c0       	rjmp	.+102    	; 0x8a36 <f_open+0x114>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    89d0:	f8 01       	movw	r30, r16
    89d2:	e0 52       	subi	r30, 0x20	; 32
    89d4:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {						/* Is the partition existing? */
    89d6:	84 81       	ldd	r24, Z+4	; 0x04
    89d8:	88 23       	and	r24, r24
    89da:	09 f4       	brne	.+2      	; 0x89de <f_open+0xbc>
    89dc:	30 c2       	rjmp	.+1120   	; 0x8e3e <f_open+0x51c>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    89de:	83 85       	ldd	r24, Z+11	; 0x0b
    89e0:	90 e0       	ldi	r25, 0x00	; 0
    89e2:	a0 e0       	ldi	r26, 0x00	; 0
    89e4:	b0 e0       	ldi	r27, 0x00	; 0
    89e6:	58 2f       	mov	r21, r24
    89e8:	44 27       	eor	r20, r20
    89ea:	33 27       	eor	r19, r19
    89ec:	22 27       	eor	r18, r18
    89ee:	82 85       	ldd	r24, Z+10	; 0x0a
    89f0:	90 e0       	ldi	r25, 0x00	; 0
    89f2:	a0 e0       	ldi	r26, 0x00	; 0
    89f4:	b0 e0       	ldi	r27, 0x00	; 0
    89f6:	dc 01       	movw	r26, r24
    89f8:	99 27       	eor	r25, r25
    89fa:	88 27       	eor	r24, r24
    89fc:	28 2b       	or	r18, r24
    89fe:	39 2b       	or	r19, r25
    8a00:	4a 2b       	or	r20, r26
    8a02:	5b 2b       	or	r21, r27
    8a04:	80 85       	ldd	r24, Z+8	; 0x08
    8a06:	90 e0       	ldi	r25, 0x00	; 0
    8a08:	a0 e0       	ldi	r26, 0x00	; 0
    8a0a:	b0 e0       	ldi	r27, 0x00	; 0
    8a0c:	28 2b       	or	r18, r24
    8a0e:	39 2b       	or	r19, r25
    8a10:	4a 2b       	or	r20, r26
    8a12:	5b 2b       	or	r21, r27
    8a14:	91 85       	ldd	r25, Z+9	; 0x09
    8a16:	80 e0       	ldi	r24, 0x00	; 0
    8a18:	a0 e0       	ldi	r26, 0x00	; 0
    8a1a:	b0 e0       	ldi	r27, 0x00	; 0
    8a1c:	28 2b       	or	r18, r24
    8a1e:	39 2b       	or	r19, r25
    8a20:	4a 2b       	or	r20, r26
    8a22:	5b 2b       	or	r21, r27
    8a24:	2b a7       	std	Y+43, r18	; 0x2b
    8a26:	3c a7       	std	Y+44, r19	; 0x2c
    8a28:	4d a7       	std	Y+45, r20	; 0x2d
    8a2a:	5e a7       	std	Y+46, r21	; 0x2e
			fmt = check_fs(fs, bsect);		/* Check the partition */
    8a2c:	c8 01       	movw	r24, r16
    8a2e:	ba 01       	movw	r22, r20
    8a30:	a9 01       	movw	r20, r18
    8a32:	0e 94 0e 44 	call	0x881c	; 0x881c <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    8a36:	83 30       	cpi	r24, 0x03	; 3
    8a38:	19 f4       	brne	.+6      	; 0x8a40 <f_open+0x11e>
    8a3a:	01 e0       	ldi	r16, 0x01	; 1
    8a3c:	10 e0       	ldi	r17, 0x00	; 0
    8a3e:	74 c4       	rjmp	.+2280   	; 0x9328 <f_open+0xa06>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    8a40:	88 23       	and	r24, r24
    8a42:	09 f0       	breq	.+2      	; 0x8a46 <f_open+0x124>
    8a44:	fc c1       	rjmp	.+1016   	; 0x8e3e <f_open+0x51c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    8a46:	d8 01       	movw	r26, r16
    8a48:	9e 96       	adiw	r26, 0x2e	; 46
    8a4a:	9c 91       	ld	r25, X
    8a4c:	9e 97       	sbiw	r26, 0x2e	; 46
    8a4e:	80 e0       	ldi	r24, 0x00	; 0
    8a50:	9d 96       	adiw	r26, 0x2d	; 45
    8a52:	2c 91       	ld	r18, X
    8a54:	30 e0       	ldi	r19, 0x00	; 0
    8a56:	82 2b       	or	r24, r18
    8a58:	93 2b       	or	r25, r19
    8a5a:	80 50       	subi	r24, 0x00	; 0
    8a5c:	92 40       	sbci	r25, 0x02	; 2
    8a5e:	09 f0       	breq	.+2      	; 0x8a62 <f_open+0x140>
    8a60:	ee c1       	rjmp	.+988    	; 0x8e3e <f_open+0x51c>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    8a62:	f8 01       	movw	r30, r16
    8a64:	91 ad       	ldd	r25, Z+57	; 0x39
    8a66:	80 e0       	ldi	r24, 0x00	; 0
    8a68:	20 ad       	ldd	r18, Z+56	; 0x38
    8a6a:	30 e0       	ldi	r19, 0x00	; 0
    8a6c:	82 2b       	or	r24, r18
    8a6e:	93 2b       	or	r25, r19
    8a70:	3c 01       	movw	r6, r24
    8a72:	88 24       	eor	r8, r8
    8a74:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    8a76:	61 14       	cp	r6, r1
    8a78:	71 04       	cpc	r7, r1
    8a7a:	81 04       	cpc	r8, r1
    8a7c:	91 04       	cpc	r9, r1
    8a7e:	79 f5       	brne	.+94     	; 0x8ade <f_open+0x1bc>
    8a80:	07 5b       	subi	r16, 0xB7	; 183
    8a82:	1f 4f       	sbci	r17, 0xFF	; 255
    8a84:	d8 01       	movw	r26, r16
    8a86:	8c 91       	ld	r24, X
    8a88:	90 e0       	ldi	r25, 0x00	; 0
    8a8a:	a0 e0       	ldi	r26, 0x00	; 0
    8a8c:	b0 e0       	ldi	r27, 0x00	; 0
    8a8e:	98 2e       	mov	r9, r24
    8a90:	88 24       	eor	r8, r8
    8a92:	77 24       	eor	r7, r7
    8a94:	66 24       	eor	r6, r6
    8a96:	f8 01       	movw	r30, r16
    8a98:	82 91       	ld	r24, -Z
    8a9a:	8f 01       	movw	r16, r30
    8a9c:	90 e0       	ldi	r25, 0x00	; 0
    8a9e:	a0 e0       	ldi	r26, 0x00	; 0
    8aa0:	b0 e0       	ldi	r27, 0x00	; 0
    8aa2:	dc 01       	movw	r26, r24
    8aa4:	99 27       	eor	r25, r25
    8aa6:	88 27       	eor	r24, r24
    8aa8:	68 2a       	or	r6, r24
    8aaa:	79 2a       	or	r7, r25
    8aac:	8a 2a       	or	r8, r26
    8aae:	9b 2a       	or	r9, r27
    8ab0:	02 50       	subi	r16, 0x02	; 2
    8ab2:	10 40       	sbci	r17, 0x00	; 0
    8ab4:	d8 01       	movw	r26, r16
    8ab6:	8d 91       	ld	r24, X+
    8ab8:	8d 01       	movw	r16, r26
    8aba:	90 e0       	ldi	r25, 0x00	; 0
    8abc:	a0 e0       	ldi	r26, 0x00	; 0
    8abe:	b0 e0       	ldi	r27, 0x00	; 0
    8ac0:	68 2a       	or	r6, r24
    8ac2:	79 2a       	or	r7, r25
    8ac4:	8a 2a       	or	r8, r26
    8ac6:	9b 2a       	or	r9, r27
    8ac8:	f8 01       	movw	r30, r16
    8aca:	90 81       	ld	r25, Z
    8acc:	07 54       	subi	r16, 0x47	; 71
    8ace:	10 40       	sbci	r17, 0x00	; 0
    8ad0:	80 e0       	ldi	r24, 0x00	; 0
    8ad2:	a0 e0       	ldi	r26, 0x00	; 0
    8ad4:	b0 e0       	ldi	r27, 0x00	; 0
    8ad6:	68 2a       	or	r6, r24
    8ad8:	79 2a       	or	r7, r25
    8ada:	8a 2a       	or	r8, r26
    8adc:	9b 2a       	or	r9, r27
	fs->fsize = fasize;
    8ade:	d8 01       	movw	r26, r16
    8ae0:	1e 96       	adiw	r26, 0x0e	; 14
    8ae2:	6d 92       	st	X+, r6
    8ae4:	7d 92       	st	X+, r7
    8ae6:	8d 92       	st	X+, r8
    8ae8:	9c 92       	st	X, r9
    8aea:	51 97       	sbiw	r26, 0x11	; 17

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    8aec:	d2 96       	adiw	r26, 0x32	; 50
    8aee:	4c 91       	ld	r20, X
    8af0:	d2 97       	sbiw	r26, 0x32	; 50
    8af2:	13 96       	adiw	r26, 0x03	; 3
    8af4:	4c 93       	st	X, r20
    8af6:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    8af8:	84 2f       	mov	r24, r20
    8afa:	81 50       	subi	r24, 0x01	; 1
    8afc:	82 30       	cpi	r24, 0x02	; 2
    8afe:	08 f0       	brcs	.+2      	; 0x8b02 <f_open+0x1e0>
    8b00:	9e c1       	rjmp	.+828    	; 0x8e3e <f_open+0x51c>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    8b02:	9f 96       	adiw	r26, 0x2f	; 47
    8b04:	2c 91       	ld	r18, X
    8b06:	9f 97       	sbiw	r26, 0x2f	; 47
    8b08:	12 96       	adiw	r26, 0x02	; 2
    8b0a:	2c 93       	st	X, r18
    8b0c:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    8b0e:	22 23       	and	r18, r18
    8b10:	09 f4       	brne	.+2      	; 0x8b14 <f_open+0x1f2>
    8b12:	95 c1       	rjmp	.+810    	; 0x8e3e <f_open+0x51c>
    8b14:	30 e0       	ldi	r19, 0x00	; 0
    8b16:	c9 01       	movw	r24, r18
    8b18:	01 97       	sbiw	r24, 0x01	; 1
    8b1a:	82 23       	and	r24, r18
    8b1c:	93 23       	and	r25, r19
    8b1e:	89 2b       	or	r24, r25
    8b20:	09 f0       	breq	.+2      	; 0x8b24 <f_open+0x202>
    8b22:	8d c1       	rjmp	.+794    	; 0x8e3e <f_open+0x51c>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    8b24:	d4 96       	adiw	r26, 0x34	; 52
    8b26:	9c 91       	ld	r25, X
    8b28:	d4 97       	sbiw	r26, 0x34	; 52
    8b2a:	80 e0       	ldi	r24, 0x00	; 0
    8b2c:	d3 96       	adiw	r26, 0x33	; 51
    8b2e:	2c 91       	ld	r18, X
    8b30:	d3 97       	sbiw	r26, 0x33	; 51
    8b32:	42 2e       	mov	r4, r18
    8b34:	55 24       	eor	r5, r5
    8b36:	48 2a       	or	r4, r24
    8b38:	59 2a       	or	r5, r25
    8b3a:	18 96       	adiw	r26, 0x08	; 8
    8b3c:	4d 92       	st	X+, r4
    8b3e:	5c 92       	st	X, r5
    8b40:	19 97       	sbiw	r26, 0x09	; 9
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    8b42:	c2 01       	movw	r24, r4
    8b44:	8f 70       	andi	r24, 0x0F	; 15
    8b46:	90 70       	andi	r25, 0x00	; 0
    8b48:	89 2b       	or	r24, r25
    8b4a:	09 f0       	breq	.+2      	; 0x8b4e <f_open+0x22c>
    8b4c:	78 c1       	rjmp	.+752    	; 0x8e3e <f_open+0x51c>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    8b4e:	d6 96       	adiw	r26, 0x36	; 54
    8b50:	9c 91       	ld	r25, X
    8b52:	d6 97       	sbiw	r26, 0x36	; 54
    8b54:	80 e0       	ldi	r24, 0x00	; 0
    8b56:	d5 96       	adiw	r26, 0x35	; 53
    8b58:	2c 91       	ld	r18, X
    8b5a:	30 e0       	ldi	r19, 0x00	; 0
    8b5c:	82 2b       	or	r24, r18
    8b5e:	93 2b       	or	r25, r19
    8b60:	6c 01       	movw	r12, r24
    8b62:	ee 24       	eor	r14, r14
    8b64:	ff 24       	eor	r15, r15
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    8b66:	c1 14       	cp	r12, r1
    8b68:	d1 04       	cpc	r13, r1
    8b6a:	e1 04       	cpc	r14, r1
    8b6c:	f1 04       	cpc	r15, r1
    8b6e:	71 f5       	brne	.+92     	; 0x8bcc <f_open+0x2aa>
    8b70:	0b 5b       	subi	r16, 0xBB	; 187
    8b72:	1f 4f       	sbci	r17, 0xFF	; 255
    8b74:	f8 01       	movw	r30, r16
    8b76:	80 81       	ld	r24, Z
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	a0 e0       	ldi	r26, 0x00	; 0
    8b7c:	b0 e0       	ldi	r27, 0x00	; 0
    8b7e:	f8 2e       	mov	r15, r24
    8b80:	ee 24       	eor	r14, r14
    8b82:	dd 24       	eor	r13, r13
    8b84:	cc 24       	eor	r12, r12
    8b86:	d8 01       	movw	r26, r16
    8b88:	8e 91       	ld	r24, -X
    8b8a:	8d 01       	movw	r16, r26
    8b8c:	90 e0       	ldi	r25, 0x00	; 0
    8b8e:	a0 e0       	ldi	r26, 0x00	; 0
    8b90:	b0 e0       	ldi	r27, 0x00	; 0
    8b92:	dc 01       	movw	r26, r24
    8b94:	99 27       	eor	r25, r25
    8b96:	88 27       	eor	r24, r24
    8b98:	c8 2a       	or	r12, r24
    8b9a:	d9 2a       	or	r13, r25
    8b9c:	ea 2a       	or	r14, r26
    8b9e:	fb 2a       	or	r15, r27
    8ba0:	02 50       	subi	r16, 0x02	; 2
    8ba2:	10 40       	sbci	r17, 0x00	; 0
    8ba4:	f8 01       	movw	r30, r16
    8ba6:	81 91       	ld	r24, Z+
    8ba8:	8f 01       	movw	r16, r30
    8baa:	90 e0       	ldi	r25, 0x00	; 0
    8bac:	a0 e0       	ldi	r26, 0x00	; 0
    8bae:	b0 e0       	ldi	r27, 0x00	; 0
    8bb0:	c8 2a       	or	r12, r24
    8bb2:	d9 2a       	or	r13, r25
    8bb4:	ea 2a       	or	r14, r26
    8bb6:	fb 2a       	or	r15, r27
    8bb8:	90 81       	ld	r25, Z
    8bba:	03 54       	subi	r16, 0x43	; 67
    8bbc:	10 40       	sbci	r17, 0x00	; 0
    8bbe:	80 e0       	ldi	r24, 0x00	; 0
    8bc0:	a0 e0       	ldi	r26, 0x00	; 0
    8bc2:	b0 e0       	ldi	r27, 0x00	; 0
    8bc4:	c8 2a       	or	r12, r24
    8bc6:	d9 2a       	or	r13, r25
    8bc8:	ea 2a       	or	r14, r26
    8bca:	fb 2a       	or	r15, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    8bcc:	d8 01       	movw	r26, r16
    8bce:	d1 96       	adiw	r26, 0x31	; 49
    8bd0:	9c 91       	ld	r25, X
    8bd2:	d1 97       	sbiw	r26, 0x31	; 49
    8bd4:	80 e0       	ldi	r24, 0x00	; 0
    8bd6:	d0 96       	adiw	r26, 0x30	; 48
    8bd8:	2c 91       	ld	r18, X
    8bda:	a2 2e       	mov	r10, r18
    8bdc:	bb 24       	eor	r11, r11
    8bde:	a8 2a       	or	r10, r24
    8be0:	b9 2a       	or	r11, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    8be2:	a1 14       	cp	r10, r1
    8be4:	b1 04       	cpc	r11, r1
    8be6:	09 f4       	brne	.+2      	; 0x8bea <f_open+0x2c8>
    8be8:	2a c1       	rjmp	.+596    	; 0x8e3e <f_open+0x51c>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    8bea:	24 2f       	mov	r18, r20
    8bec:	30 e0       	ldi	r19, 0x00	; 0
    8bee:	40 e0       	ldi	r20, 0x00	; 0
    8bf0:	50 e0       	ldi	r21, 0x00	; 0
    8bf2:	c4 01       	movw	r24, r8
    8bf4:	b3 01       	movw	r22, r6
    8bf6:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    8bfa:	6b a3       	std	Y+35, r22	; 0x23
    8bfc:	7c a3       	std	Y+36, r23	; 0x24
    8bfe:	8d a3       	std	Y+37, r24	; 0x25
    8c00:	9e a3       	std	Y+38, r25	; 0x26

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    8c02:	95 01       	movw	r18, r10
    8c04:	40 e0       	ldi	r20, 0x00	; 0
    8c06:	50 e0       	ldi	r21, 0x00	; 0
    8c08:	2f a3       	std	Y+39, r18	; 0x27
    8c0a:	38 a7       	std	Y+40, r19	; 0x28
    8c0c:	49 a7       	std	Y+41, r20	; 0x29
    8c0e:	5a a7       	std	Y+42, r21	; 0x2a
    8c10:	a4 e0       	ldi	r26, 0x04	; 4
    8c12:	56 94       	lsr	r5
    8c14:	47 94       	ror	r4
    8c16:	aa 95       	dec	r26
    8c18:	e1 f7       	brne	.-8      	; 0x8c12 <f_open+0x2f0>
    8c1a:	42 01       	movw	r8, r4
    8c1c:	aa 24       	eor	r10, r10
    8c1e:	bb 24       	eor	r11, r11
    8c20:	82 0e       	add	r8, r18
    8c22:	93 1e       	adc	r9, r19
    8c24:	a4 1e       	adc	r10, r20
    8c26:	b5 1e       	adc	r11, r21
    8c28:	86 0e       	add	r8, r22
    8c2a:	97 1e       	adc	r9, r23
    8c2c:	a8 1e       	adc	r10, r24
    8c2e:	b9 1e       	adc	r11, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8c30:	c8 14       	cp	r12, r8
    8c32:	d9 04       	cpc	r13, r9
    8c34:	ea 04       	cpc	r14, r10
    8c36:	fb 04       	cpc	r15, r11
    8c38:	08 f4       	brcc	.+2      	; 0x8c3c <f_open+0x31a>
    8c3a:	01 c1       	rjmp	.+514    	; 0x8e3e <f_open+0x51c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    8c3c:	c8 18       	sub	r12, r8
    8c3e:	d9 08       	sbc	r13, r9
    8c40:	ea 08       	sbc	r14, r10
    8c42:	fb 08       	sbc	r15, r11
    8c44:	d8 01       	movw	r26, r16
    8c46:	12 96       	adiw	r26, 0x02	; 2
    8c48:	2c 91       	ld	r18, X
    8c4a:	30 e0       	ldi	r19, 0x00	; 0
    8c4c:	40 e0       	ldi	r20, 0x00	; 0
    8c4e:	50 e0       	ldi	r21, 0x00	; 0
    8c50:	c7 01       	movw	r24, r14
    8c52:	b6 01       	movw	r22, r12
    8c54:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    8c58:	c9 01       	movw	r24, r18
    8c5a:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    8c5c:	00 97       	sbiw	r24, 0x00	; 0
    8c5e:	a1 05       	cpc	r26, r1
    8c60:	b1 05       	cpc	r27, r1
    8c62:	09 f4       	brne	.+2      	; 0x8c66 <f_open+0x344>
    8c64:	ec c0       	rjmp	.+472    	; 0x8e3e <f_open+0x51c>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    8c66:	86 3f       	cpi	r24, 0xF6	; 246
    8c68:	ef e0       	ldi	r30, 0x0F	; 15
    8c6a:	9e 07       	cpc	r25, r30
    8c6c:	e0 e0       	ldi	r30, 0x00	; 0
    8c6e:	ae 07       	cpc	r26, r30
    8c70:	e0 e0       	ldi	r30, 0x00	; 0
    8c72:	be 07       	cpc	r27, r30
    8c74:	10 f4       	brcc	.+4      	; 0x8c7a <f_open+0x358>
    8c76:	61 e0       	ldi	r22, 0x01	; 1
    8c78:	0b c0       	rjmp	.+22     	; 0x8c90 <f_open+0x36e>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    8c7a:	86 3f       	cpi	r24, 0xF6	; 246
    8c7c:	ff ef       	ldi	r31, 0xFF	; 255
    8c7e:	9f 07       	cpc	r25, r31
    8c80:	f0 e0       	ldi	r31, 0x00	; 0
    8c82:	af 07       	cpc	r26, r31
    8c84:	f0 e0       	ldi	r31, 0x00	; 0
    8c86:	bf 07       	cpc	r27, r31
    8c88:	10 f0       	brcs	.+4      	; 0x8c8e <f_open+0x36c>
    8c8a:	63 e0       	ldi	r22, 0x03	; 3
    8c8c:	01 c0       	rjmp	.+2      	; 0x8c90 <f_open+0x36e>
    8c8e:	62 e0       	ldi	r22, 0x02	; 2

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    8c90:	f2 e0       	ldi	r31, 0x02	; 2
    8c92:	cf 2e       	mov	r12, r31
    8c94:	d1 2c       	mov	r13, r1
    8c96:	e1 2c       	mov	r14, r1
    8c98:	f1 2c       	mov	r15, r1
    8c9a:	c8 0e       	add	r12, r24
    8c9c:	d9 1e       	adc	r13, r25
    8c9e:	ea 1e       	adc	r14, r26
    8ca0:	fb 1e       	adc	r15, r27
    8ca2:	d8 01       	movw	r26, r16
    8ca4:	1a 96       	adiw	r26, 0x0a	; 10
    8ca6:	cd 92       	st	X+, r12
    8ca8:	dd 92       	st	X+, r13
    8caa:	ed 92       	st	X+, r14
    8cac:	fc 92       	st	X, r15
    8cae:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->database = bsect + sysect;						/* Data start sector */
    8cb0:	2b a5       	ldd	r18, Y+43	; 0x2b
    8cb2:	3c a5       	ldd	r19, Y+44	; 0x2c
    8cb4:	4d a5       	ldd	r20, Y+45	; 0x2d
    8cb6:	5e a5       	ldd	r21, Y+46	; 0x2e
    8cb8:	82 0e       	add	r8, r18
    8cba:	93 1e       	adc	r9, r19
    8cbc:	a4 1e       	adc	r10, r20
    8cbe:	b5 1e       	adc	r11, r21
    8cc0:	5a 96       	adiw	r26, 0x1a	; 26
    8cc2:	8d 92       	st	X+, r8
    8cc4:	9d 92       	st	X+, r9
    8cc6:	ad 92       	st	X+, r10
    8cc8:	bc 92       	st	X, r11
    8cca:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    8ccc:	8f a1       	ldd	r24, Y+39	; 0x27
    8cce:	98 a5       	ldd	r25, Y+40	; 0x28
    8cd0:	a9 a5       	ldd	r26, Y+41	; 0x29
    8cd2:	ba a5       	ldd	r27, Y+42	; 0x2a
    8cd4:	28 0f       	add	r18, r24
    8cd6:	39 1f       	adc	r19, r25
    8cd8:	4a 1f       	adc	r20, r26
    8cda:	5b 1f       	adc	r21, r27
    8cdc:	d8 01       	movw	r26, r16
    8cde:	52 96       	adiw	r26, 0x12	; 18
    8ce0:	2d 93       	st	X+, r18
    8ce2:	3d 93       	st	X+, r19
    8ce4:	4d 93       	st	X+, r20
    8ce6:	5c 93       	st	X, r21
    8ce8:	55 97       	sbiw	r26, 0x15	; 21
    8cea:	18 96       	adiw	r26, 0x08	; 8
    8cec:	8d 91       	ld	r24, X+
    8cee:	9c 91       	ld	r25, X
    8cf0:	19 97       	sbiw	r26, 0x09	; 9
	if (fmt == FS_FAT32) {
    8cf2:	63 30       	cpi	r22, 0x03	; 3
    8cf4:	09 f0       	breq	.+2      	; 0x8cf8 <f_open+0x3d6>
    8cf6:	42 c0       	rjmp	.+132    	; 0x8d7c <f_open+0x45a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    8cf8:	89 2b       	or	r24, r25
    8cfa:	09 f0       	breq	.+2      	; 0x8cfe <f_open+0x3dc>
    8cfc:	a0 c0       	rjmp	.+320    	; 0x8e3e <f_open+0x51c>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    8cfe:	0f 5a       	subi	r16, 0xAF	; 175
    8d00:	1f 4f       	sbci	r17, 0xFF	; 255
    8d02:	f8 01       	movw	r30, r16
    8d04:	20 81       	ld	r18, Z
    8d06:	30 e0       	ldi	r19, 0x00	; 0
    8d08:	40 e0       	ldi	r20, 0x00	; 0
    8d0a:	50 e0       	ldi	r21, 0x00	; 0
    8d0c:	52 2f       	mov	r21, r18
    8d0e:	44 27       	eor	r20, r20
    8d10:	33 27       	eor	r19, r19
    8d12:	22 27       	eor	r18, r18
    8d14:	d8 01       	movw	r26, r16
    8d16:	8e 91       	ld	r24, -X
    8d18:	8d 01       	movw	r16, r26
    8d1a:	90 e0       	ldi	r25, 0x00	; 0
    8d1c:	a0 e0       	ldi	r26, 0x00	; 0
    8d1e:	b0 e0       	ldi	r27, 0x00	; 0
    8d20:	dc 01       	movw	r26, r24
    8d22:	99 27       	eor	r25, r25
    8d24:	88 27       	eor	r24, r24
    8d26:	28 2b       	or	r18, r24
    8d28:	39 2b       	or	r19, r25
    8d2a:	4a 2b       	or	r20, r26
    8d2c:	5b 2b       	or	r21, r27
    8d2e:	02 50       	subi	r16, 0x02	; 2
    8d30:	10 40       	sbci	r17, 0x00	; 0
    8d32:	f8 01       	movw	r30, r16
    8d34:	81 91       	ld	r24, Z+
    8d36:	8f 01       	movw	r16, r30
    8d38:	90 e0       	ldi	r25, 0x00	; 0
    8d3a:	a0 e0       	ldi	r26, 0x00	; 0
    8d3c:	b0 e0       	ldi	r27, 0x00	; 0
    8d3e:	28 2b       	or	r18, r24
    8d40:	39 2b       	or	r19, r25
    8d42:	4a 2b       	or	r20, r26
    8d44:	5b 2b       	or	r21, r27
    8d46:	90 81       	ld	r25, Z
    8d48:	0f 54       	subi	r16, 0x4F	; 79
    8d4a:	10 40       	sbci	r17, 0x00	; 0
    8d4c:	80 e0       	ldi	r24, 0x00	; 0
    8d4e:	a0 e0       	ldi	r26, 0x00	; 0
    8d50:	b0 e0       	ldi	r27, 0x00	; 0
    8d52:	28 2b       	or	r18, r24
    8d54:	39 2b       	or	r19, r25
    8d56:	4a 2b       	or	r20, r26
    8d58:	5b 2b       	or	r21, r27
    8d5a:	d8 01       	movw	r26, r16
    8d5c:	56 96       	adiw	r26, 0x16	; 22
    8d5e:	2d 93       	st	X+, r18
    8d60:	3d 93       	st	X+, r19
    8d62:	4d 93       	st	X+, r20
    8d64:	5c 93       	st	X, r21
    8d66:	59 97       	sbiw	r26, 0x19	; 25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    8d68:	a7 01       	movw	r20, r14
    8d6a:	96 01       	movw	r18, r12
    8d6c:	f2 e0       	ldi	r31, 0x02	; 2
    8d6e:	22 0f       	add	r18, r18
    8d70:	33 1f       	adc	r19, r19
    8d72:	44 1f       	adc	r20, r20
    8d74:	55 1f       	adc	r21, r21
    8d76:	fa 95       	dec	r31
    8d78:	d1 f7       	brne	.-12     	; 0x8d6e <f_open+0x44c>
    8d7a:	33 c0       	rjmp	.+102    	; 0x8de2 <f_open+0x4c0>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    8d7c:	89 2b       	or	r24, r25
    8d7e:	09 f4       	brne	.+2      	; 0x8d82 <f_open+0x460>
    8d80:	5e c0       	rjmp	.+188    	; 0x8e3e <f_open+0x51c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    8d82:	8b a1       	ldd	r24, Y+35	; 0x23
    8d84:	9c a1       	ldd	r25, Y+36	; 0x24
    8d86:	ad a1       	ldd	r26, Y+37	; 0x25
    8d88:	be a1       	ldd	r27, Y+38	; 0x26
    8d8a:	28 0f       	add	r18, r24
    8d8c:	39 1f       	adc	r19, r25
    8d8e:	4a 1f       	adc	r20, r26
    8d90:	5b 1f       	adc	r21, r27
    8d92:	d8 01       	movw	r26, r16
    8d94:	56 96       	adiw	r26, 0x16	; 22
    8d96:	2d 93       	st	X+, r18
    8d98:	3d 93       	st	X+, r19
    8d9a:	4d 93       	st	X+, r20
    8d9c:	5c 93       	st	X, r21
    8d9e:	59 97       	sbiw	r26, 0x19	; 25
    8da0:	d7 01       	movw	r26, r14
    8da2:	c6 01       	movw	r24, r12
    8da4:	88 0f       	add	r24, r24
    8da6:	99 1f       	adc	r25, r25
    8da8:	aa 1f       	adc	r26, r26
    8daa:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    8dac:	62 30       	cpi	r22, 0x02	; 2
    8dae:	19 f4       	brne	.+6      	; 0x8db6 <f_open+0x494>
    8db0:	9c 01       	movw	r18, r24
    8db2:	ad 01       	movw	r20, r26
    8db4:	16 c0       	rjmp	.+44     	; 0x8de2 <f_open+0x4c0>
    8db6:	9c 01       	movw	r18, r24
    8db8:	ad 01       	movw	r20, r26
    8dba:	2c 0d       	add	r18, r12
    8dbc:	3d 1d       	adc	r19, r13
    8dbe:	4e 1d       	adc	r20, r14
    8dc0:	5f 1d       	adc	r21, r15
    8dc2:	56 95       	lsr	r21
    8dc4:	47 95       	ror	r20
    8dc6:	37 95       	ror	r19
    8dc8:	27 95       	ror	r18
    8dca:	81 e0       	ldi	r24, 0x01	; 1
    8dcc:	90 e0       	ldi	r25, 0x00	; 0
    8dce:	a0 e0       	ldi	r26, 0x00	; 0
    8dd0:	b0 e0       	ldi	r27, 0x00	; 0
    8dd2:	c8 22       	and	r12, r24
    8dd4:	d9 22       	and	r13, r25
    8dd6:	ea 22       	and	r14, r26
    8dd8:	fb 22       	and	r15, r27
    8dda:	2c 0d       	add	r18, r12
    8ddc:	3d 1d       	adc	r19, r13
    8dde:	4e 1d       	adc	r20, r14
    8de0:	5f 1d       	adc	r21, r15
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    8de2:	21 50       	subi	r18, 0x01	; 1
    8de4:	3e 4f       	sbci	r19, 0xFE	; 254
    8de6:	4f 4f       	sbci	r20, 0xFF	; 255
    8de8:	5f 4f       	sbci	r21, 0xFF	; 255
    8dea:	99 e0       	ldi	r25, 0x09	; 9
    8dec:	56 95       	lsr	r21
    8dee:	47 95       	ror	r20
    8df0:	37 95       	ror	r19
    8df2:	27 95       	ror	r18
    8df4:	9a 95       	dec	r25
    8df6:	d1 f7       	brne	.-12     	; 0x8dec <f_open+0x4ca>
    8df8:	f8 01       	movw	r30, r16
    8dfa:	86 85       	ldd	r24, Z+14	; 0x0e
    8dfc:	97 85       	ldd	r25, Z+15	; 0x0f
    8dfe:	a0 89       	ldd	r26, Z+16	; 0x10
    8e00:	b1 89       	ldd	r27, Z+17	; 0x11
    8e02:	82 17       	cp	r24, r18
    8e04:	93 07       	cpc	r25, r19
    8e06:	a4 07       	cpc	r26, r20
    8e08:	b5 07       	cpc	r27, r21
    8e0a:	c8 f0       	brcs	.+50     	; 0x8e3e <f_open+0x51c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    8e0c:	60 83       	st	Z, r22
	fs->id = ++Fsid;		/* File system mount ID */
    8e0e:	80 91 8f 24 	lds	r24, 0x248F
    8e12:	90 91 90 24 	lds	r25, 0x2490
    8e16:	01 96       	adiw	r24, 0x01	; 1
    8e18:	80 93 8f 24 	sts	0x248F, r24
    8e1c:	90 93 90 24 	sts	0x2490, r25
    8e20:	86 83       	std	Z+6, r24	; 0x06
    8e22:	97 83       	std	Z+7, r25	; 0x07
	fs->winsect = 0;		/* Invalidate sector cache */
    8e24:	d8 01       	movw	r26, r16
    8e26:	5e 96       	adiw	r26, 0x1e	; 30
    8e28:	1d 92       	st	X+, r1
    8e2a:	1d 92       	st	X+, r1
    8e2c:	1d 92       	st	X+, r1
    8e2e:	1c 92       	st	X, r1
    8e30:	91 97       	sbiw	r26, 0x21	; 33
	fs->wflag = 0;
    8e32:	14 96       	adiw	r26, 0x04	; 4
    8e34:	1c 92       	st	X, r1
    8e36:	80 c2       	rjmp	.+1280   	; 0x9338 <f_open+0xa16>
    8e38:	0b e0       	ldi	r16, 0x0B	; 11
    8e3a:	10 e0       	ldi	r17, 0x00	; 0
    8e3c:	75 c2       	rjmp	.+1258   	; 0x9328 <f_open+0xa06>
    8e3e:	0d e0       	ldi	r16, 0x0D	; 13
    8e40:	10 e0       	ldi	r17, 0x00	; 0
    8e42:	72 c2       	rjmp	.+1252   	; 0x9328 <f_open+0xa06>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    8e44:	8c 35       	cpi	r24, 0x5C	; 92
    8e46:	19 f4       	brne	.+6      	; 0x8e4e <f_open+0x52c>
		path++;
    8e48:	08 94       	sec
    8e4a:	21 1c       	adc	r2, r1
    8e4c:	31 1c       	adc	r3, r1
	dj->sclust = 0;						/* Start from the root dir */
    8e4e:	1b 8a       	std	Y+19, r1	; 0x13
    8e50:	1c 8a       	std	Y+20, r1	; 0x14
    8e52:	1d 8a       	std	Y+21, r1	; 0x15
    8e54:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    8e56:	f1 01       	movw	r30, r2
    8e58:	80 81       	ld	r24, Z
    8e5a:	80 32       	cpi	r24, 0x20	; 32
    8e5c:	68 f4       	brcc	.+26     	; 0x8e78 <f_open+0x556>
		res = dir_sdi(dj, 0);
    8e5e:	ce 01       	movw	r24, r28
    8e60:	0d 96       	adiw	r24, 0x0d	; 13
    8e62:	60 e0       	ldi	r22, 0x00	; 0
    8e64:	70 e0       	ldi	r23, 0x00	; 0
    8e66:	0e 94 ad 41 	call	0x835a	; 0x835a <dir_sdi>
    8e6a:	8c 01       	movw	r16, r24
		dj->dir = 0;
    8e6c:	1f 8e       	std	Y+31, r1	; 0x1f
    8e6e:	18 a2       	std	Y+32, r1	; 0x20
    8e70:	e4 c1       	rjmp	.+968    	; 0x923a <f_open+0x918>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8e72:	08 94       	sec
    8e74:	21 1c       	adc	r2, r1
    8e76:	31 1c       	adc	r3, r1
    8e78:	d1 01       	movw	r26, r2
    8e7a:	8c 91       	ld	r24, X
    8e7c:	8f 32       	cpi	r24, 0x2F	; 47
    8e7e:	c9 f3       	breq	.-14     	; 0x8e72 <f_open+0x550>
    8e80:	8c 35       	cpi	r24, 0x5C	; 92
    8e82:	b9 f3       	breq	.-18     	; 0x8e72 <f_open+0x550>
	sfn = dj->fn;
    8e84:	a9 a1       	ldd	r26, Y+33	; 0x21
    8e86:	ba a1       	ldd	r27, Y+34	; 0x22
    8e88:	fd 01       	movw	r30, r26
    8e8a:	8b e0       	ldi	r24, 0x0B	; 11
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	02 c0       	rjmp	.+4      	; 0x8e94 <f_open+0x572>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    8e90:	20 e2       	ldi	r18, 0x20	; 32
    8e92:	21 93       	st	Z+, r18
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    8e94:	01 97       	sbiw	r24, 0x01	; 1
    8e96:	3f ef       	ldi	r19, 0xFF	; 255
    8e98:	8f 3f       	cpi	r24, 0xFF	; 255
    8e9a:	93 07       	cpc	r25, r19
    8e9c:	c9 f7       	brne	.-14     	; 0x8e90 <f_open+0x56e>
    8e9e:	40 e0       	ldi	r20, 0x00	; 0
    8ea0:	50 e0       	ldi	r21, 0x00	; 0
    8ea2:	66 24       	eor	r6, r6
    8ea4:	77 24       	eor	r7, r7
    8ea6:	88 e0       	ldi	r24, 0x08	; 8
    8ea8:	e8 2e       	mov	r14, r24
    8eaa:	f1 2c       	mov	r15, r1
    8eac:	10 e0       	ldi	r17, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    8eae:	f1 01       	movw	r30, r2
    8eb0:	e6 0d       	add	r30, r6
    8eb2:	f7 1d       	adc	r31, r7
    8eb4:	20 81       	ld	r18, Z
    8eb6:	08 94       	sec
    8eb8:	61 1c       	adc	r6, r1
    8eba:	71 1c       	adc	r7, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    8ebc:	21 32       	cpi	r18, 0x21	; 33
    8ebe:	08 f4       	brcc	.+2      	; 0x8ec2 <f_open+0x5a0>
    8ec0:	68 c0       	rjmp	.+208    	; 0x8f92 <f_open+0x670>
    8ec2:	2f 32       	cpi	r18, 0x2F	; 47
    8ec4:	09 f4       	brne	.+2      	; 0x8ec8 <f_open+0x5a6>
    8ec6:	42 c2       	rjmp	.+1156   	; 0x934c <f_open+0xa2a>
    8ec8:	2c 35       	cpi	r18, 0x5C	; 92
    8eca:	09 f4       	brne	.+2      	; 0x8ece <f_open+0x5ac>
    8ecc:	3f c2       	rjmp	.+1150   	; 0x934c <f_open+0xa2a>
		if (c == '.' || i >= ni) {
    8ece:	2e 32       	cpi	r18, 0x2E	; 46
    8ed0:	19 f0       	breq	.+6      	; 0x8ed8 <f_open+0x5b6>
    8ed2:	4e 15       	cp	r20, r14
    8ed4:	5f 05       	cpc	r21, r15
    8ed6:	80 f0       	brcs	.+32     	; 0x8ef8 <f_open+0x5d6>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    8ed8:	48 e0       	ldi	r20, 0x08	; 8
    8eda:	e4 16       	cp	r14, r20
    8edc:	f1 04       	cpc	r15, r1
    8ede:	09 f0       	breq	.+2      	; 0x8ee2 <f_open+0x5c0>
    8ee0:	a5 c1       	rjmp	.+842    	; 0x922c <f_open+0x90a>
    8ee2:	2e 32       	cpi	r18, 0x2E	; 46
    8ee4:	09 f0       	breq	.+2      	; 0x8ee8 <f_open+0x5c6>
    8ee6:	a2 c1       	rjmp	.+836    	; 0x922c <f_open+0x90a>
			i = 8; ni = 11;
			b <<= 2; continue;
    8ee8:	11 0f       	add	r17, r17
    8eea:	11 0f       	add	r17, r17
    8eec:	48 e0       	ldi	r20, 0x08	; 8
    8eee:	50 e0       	ldi	r21, 0x00	; 0
    8ef0:	0b e0       	ldi	r16, 0x0B	; 11
    8ef2:	e0 2e       	mov	r14, r16
    8ef4:	f1 2c       	mov	r15, r1
    8ef6:	db cf       	rjmp	.-74     	; 0x8eae <f_open+0x58c>
		}
		if (c >= 0x80) {				/* Extended char? */
    8ef8:	27 fd       	sbrc	r18, 7
			b |= 3;						/* Eliminate NT flag */
    8efa:	13 60       	ori	r17, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    8efc:	82 2f       	mov	r24, r18
    8efe:	81 58       	subi	r24, 0x81	; 129
    8f00:	8f 31       	cpi	r24, 0x1F	; 31
    8f02:	18 f0       	brcs	.+6      	; 0x8f0a <f_open+0x5e8>
    8f04:	8f 55       	subi	r24, 0x5F	; 95
    8f06:	8d 31       	cpi	r24, 0x1D	; 29
    8f08:	08 f5       	brcc	.+66     	; 0x8f4c <f_open+0x62a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    8f0a:	f1 01       	movw	r30, r2
    8f0c:	e6 0d       	add	r30, r6
    8f0e:	f7 1d       	adc	r31, r7
    8f10:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    8f12:	83 2f       	mov	r24, r19
    8f14:	80 54       	subi	r24, 0x40	; 64
    8f16:	8f 33       	cpi	r24, 0x3F	; 63
    8f18:	20 f0       	brcs	.+8      	; 0x8f22 <f_open+0x600>
    8f1a:	80 54       	subi	r24, 0x40	; 64
    8f1c:	8d 37       	cpi	r24, 0x7D	; 125
    8f1e:	08 f0       	brcs	.+2      	; 0x8f22 <f_open+0x600>
    8f20:	85 c1       	rjmp	.+778    	; 0x922c <f_open+0x90a>
    8f22:	c7 01       	movw	r24, r14
    8f24:	01 97       	sbiw	r24, 0x01	; 1
    8f26:	48 17       	cp	r20, r24
    8f28:	59 07       	cpc	r21, r25
    8f2a:	08 f0       	brcs	.+2      	; 0x8f2e <f_open+0x60c>
    8f2c:	7f c1       	rjmp	.+766    	; 0x922c <f_open+0x90a>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    8f2e:	08 94       	sec
    8f30:	61 1c       	adc	r6, r1
    8f32:	71 1c       	adc	r7, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    8f34:	fd 01       	movw	r30, r26
    8f36:	e4 0f       	add	r30, r20
    8f38:	f5 1f       	adc	r31, r21
    8f3a:	20 83       	st	Z, r18
    8f3c:	ca 01       	movw	r24, r20
    8f3e:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    8f40:	fd 01       	movw	r30, r26
    8f42:	e8 0f       	add	r30, r24
    8f44:	f9 1f       	adc	r31, r25
    8f46:	30 83       	st	Z, r19
    8f48:	ac 01       	movw	r20, r24
    8f4a:	20 c0       	rjmp	.+64     	; 0x8f8c <f_open+0x66a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    8f4c:	62 2f       	mov	r22, r18
    8f4e:	70 e0       	ldi	r23, 0x00	; 0
    8f50:	e4 ee       	ldi	r30, 0xE4	; 228
    8f52:	f3 e2       	ldi	r31, 0x23	; 35
    8f54:	01 c0       	rjmp	.+2      	; 0x8f58 <f_open+0x636>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    8f56:	31 96       	adiw	r30, 0x01	; 1
    8f58:	80 81       	ld	r24, Z
    8f5a:	88 23       	and	r24, r24
    8f5c:	39 f0       	breq	.+14     	; 0x8f6c <f_open+0x64a>
    8f5e:	99 27       	eor	r25, r25
    8f60:	87 fd       	sbrc	r24, 7
    8f62:	90 95       	com	r25
    8f64:	86 17       	cp	r24, r22
    8f66:	97 07       	cpc	r25, r23
    8f68:	b1 f7       	brne	.-20     	; 0x8f56 <f_open+0x634>
    8f6a:	60 c1       	rjmp	.+704    	; 0x922c <f_open+0x90a>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    8f6c:	82 2f       	mov	r24, r18
    8f6e:	81 54       	subi	r24, 0x41	; 65
    8f70:	8a 31       	cpi	r24, 0x1A	; 26
    8f72:	10 f4       	brcc	.+4      	; 0x8f78 <f_open+0x656>
				b |= 2;
    8f74:	12 60       	ori	r17, 0x02	; 2
    8f76:	06 c0       	rjmp	.+12     	; 0x8f84 <f_open+0x662>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    8f78:	82 2f       	mov	r24, r18
    8f7a:	81 56       	subi	r24, 0x61	; 97
    8f7c:	8a 31       	cpi	r24, 0x1A	; 26
    8f7e:	10 f4       	brcc	.+4      	; 0x8f84 <f_open+0x662>
					b |= 1; c -= 0x20;
    8f80:	11 60       	ori	r17, 0x01	; 1
    8f82:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    8f84:	fd 01       	movw	r30, r26
    8f86:	e4 0f       	add	r30, r20
    8f88:	f5 1f       	adc	r31, r21
    8f8a:	20 83       	st	Z, r18
    8f8c:	4f 5f       	subi	r20, 0xFF	; 255
    8f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    8f90:	8e cf       	rjmp	.-228    	; 0x8eae <f_open+0x58c>
    8f92:	91 2f       	mov	r25, r17
    8f94:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    8f96:	45 2b       	or	r20, r21
    8f98:	09 f4       	brne	.+2      	; 0x8f9c <f_open+0x67a>
    8f9a:	48 c1       	rjmp	.+656    	; 0x922c <f_open+0x90a>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    8f9c:	8c 91       	ld	r24, X
    8f9e:	85 3e       	cpi	r24, 0xE5	; 229
    8fa0:	11 f4       	brne	.+4      	; 0x8fa6 <f_open+0x684>
    8fa2:	55 e0       	ldi	r21, 0x05	; 5
    8fa4:	5c 93       	st	X, r21

	if (ni == 8) b <<= 2;
    8fa6:	78 e0       	ldi	r23, 0x08	; 8
    8fa8:	e7 16       	cp	r14, r23
    8faa:	f1 04       	cpc	r15, r1
    8fac:	19 f4       	brne	.+6      	; 0x8fb4 <f_open+0x692>
    8fae:	91 2f       	mov	r25, r17
    8fb0:	99 0f       	add	r25, r25
    8fb2:	99 0f       	add	r25, r25
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    8fb4:	29 2f       	mov	r18, r25
    8fb6:	30 e0       	ldi	r19, 0x00	; 0
    8fb8:	c9 01       	movw	r24, r18
    8fba:	83 70       	andi	r24, 0x03	; 3
    8fbc:	90 70       	andi	r25, 0x00	; 0
    8fbe:	01 97       	sbiw	r24, 0x01	; 1
    8fc0:	09 f4       	brne	.+2      	; 0x8fc4 <f_open+0x6a2>
    8fc2:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    8fc4:	2c 70       	andi	r18, 0x0C	; 12
    8fc6:	30 70       	andi	r19, 0x00	; 0
    8fc8:	24 30       	cpi	r18, 0x04	; 4
    8fca:	31 05       	cpc	r19, r1
    8fcc:	09 f4       	brne	.+2      	; 0x8fd0 <f_open+0x6ae>
    8fce:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    8fd0:	1b 96       	adiw	r26, 0x0b	; 11
    8fd2:	6c 93       	st	X, r22
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    8fd4:	ce 01       	movw	r24, r28
    8fd6:	0d 96       	adiw	r24, 0x0d	; 13
    8fd8:	60 e0       	ldi	r22, 0x00	; 0
    8fda:	70 e0       	ldi	r23, 0x00	; 0
    8fdc:	0e 94 ad 41 	call	0x835a	; 0x835a <dir_sdi>
    8fe0:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    8fe2:	00 97       	sbiw	r24, 0x00	; 0
    8fe4:	09 f0       	breq	.+2      	; 0x8fe8 <f_open+0x6c6>
    8fe6:	de c0       	rjmp	.+444    	; 0x91a4 <f_open+0x882>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8fe8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8fea:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8fec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    8fee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    8ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    8ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    8ff4:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <move_window>
    8ff8:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    8ffa:	00 97       	sbiw	r24, 0x00	; 0
    8ffc:	09 f0       	breq	.+2      	; 0x9000 <f_open+0x6de>
    8ffe:	d2 c0       	rjmp	.+420    	; 0x91a4 <f_open+0x882>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    9000:	ef 8d       	ldd	r30, Y+31	; 0x1f
    9002:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    9004:	80 81       	ld	r24, Z
    9006:	88 23       	and	r24, r24
    9008:	09 f4       	brne	.+2      	; 0x900c <f_open+0x6ea>
    900a:	ca c0       	rjmp	.+404    	; 0x91a0 <f_open+0x87e>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    900c:	83 85       	ldd	r24, Z+11	; 0x0b
    900e:	83 fd       	sbrc	r24, 3
    9010:	14 c0       	rjmp	.+40     	; 0x903a <f_open+0x718>
    9012:	89 a1       	ldd	r24, Y+33	; 0x21
    9014:	9a a1       	ldd	r25, Y+34	; 0x22
    9016:	9c 01       	movw	r18, r24
    9018:	d9 01       	movw	r26, r18
    901a:	2b e0       	ldi	r18, 0x0B	; 11
    901c:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    901e:	21 50       	subi	r18, 0x01	; 1
    9020:	30 40       	sbci	r19, 0x00	; 0
    9022:	8f ef       	ldi	r24, 0xFF	; 255
    9024:	2f 3f       	cpi	r18, 0xFF	; 255
    9026:	38 07       	cpc	r19, r24
    9028:	09 f4       	brne	.+2      	; 0x902c <f_open+0x70a>
    902a:	bc c0       	rjmp	.+376    	; 0x91a4 <f_open+0x882>
    902c:	90 81       	ld	r25, Z
    902e:	8c 91       	ld	r24, X
    9030:	98 17       	cp	r25, r24
    9032:	19 f4       	brne	.+6      	; 0x903a <f_open+0x718>
    9034:	31 96       	adiw	r30, 0x01	; 1
    9036:	11 96       	adiw	r26, 0x01	; 1
    9038:	f2 cf       	rjmp	.-28     	; 0x901e <f_open+0x6fc>
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    903a:	a9 88       	ldd	r10, Y+17	; 0x11
    903c:	ba 88       	ldd	r11, Y+18	; 0x12
    903e:	08 94       	sec
    9040:	a1 1c       	adc	r10, r1
    9042:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    9044:	a1 14       	cp	r10, r1
    9046:	b1 04       	cpc	r11, r1
    9048:	09 f4       	brne	.+2      	; 0x904c <f_open+0x72a>
    904a:	aa c0       	rjmp	.+340    	; 0x91a0 <f_open+0x87e>
    904c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    904e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    9050:	ad 8d       	ldd	r26, Y+29	; 0x1d
    9052:	be 8d       	ldd	r27, Y+30	; 0x1e
    9054:	00 97       	sbiw	r24, 0x00	; 0
    9056:	a1 05       	cpc	r26, r1
    9058:	b1 05       	cpc	r27, r1
    905a:	09 f4       	brne	.+2      	; 0x905e <f_open+0x73c>
    905c:	a1 c0       	rjmp	.+322    	; 0x91a0 <f_open+0x87e>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    905e:	1f e0       	ldi	r17, 0x0F	; 15
    9060:	81 2e       	mov	r8, r17
    9062:	91 2c       	mov	r9, r1
    9064:	8a 20       	and	r8, r10
    9066:	9b 20       	and	r9, r11
    9068:	81 14       	cp	r8, r1
    906a:	91 04       	cpc	r9, r1
    906c:	09 f0       	breq	.+2      	; 0x9070 <f_open+0x74e>
    906e:	86 c0       	rjmp	.+268    	; 0x917c <f_open+0x85a>
		dj->sect++;					/* Next sector */
    9070:	01 96       	adiw	r24, 0x01	; 1
    9072:	a1 1d       	adc	r26, r1
    9074:	b1 1d       	adc	r27, r1
    9076:	8b 8f       	std	Y+27, r24	; 0x1b
    9078:	9c 8f       	std	Y+28, r25	; 0x1c
    907a:	ad 8f       	std	Y+29, r26	; 0x1d
    907c:	be 8f       	std	Y+30, r27	; 0x1e

		if (dj->clust == 0) {	/* Static table */
    907e:	4f 89       	ldd	r20, Y+23	; 0x17
    9080:	58 8d       	ldd	r21, Y+24	; 0x18
    9082:	69 8d       	ldd	r22, Y+25	; 0x19
    9084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    9086:	ed 85       	ldd	r30, Y+13	; 0x0d
    9088:	fe 85       	ldd	r31, Y+14	; 0x0e
    908a:	41 15       	cp	r20, r1
    908c:	51 05       	cpc	r21, r1
    908e:	61 05       	cpc	r22, r1
    9090:	71 05       	cpc	r23, r1
    9092:	39 f4       	brne	.+14     	; 0x90a2 <f_open+0x780>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    9094:	80 85       	ldd	r24, Z+8	; 0x08
    9096:	91 85       	ldd	r25, Z+9	; 0x09
    9098:	a8 16       	cp	r10, r24
    909a:	b9 06       	cpc	r11, r25
    909c:	08 f0       	brcs	.+2      	; 0x90a0 <f_open+0x77e>
    909e:	80 c0       	rjmp	.+256    	; 0x91a0 <f_open+0x87e>
    90a0:	6d c0       	rjmp	.+218    	; 0x917c <f_open+0x85a>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    90a2:	82 81       	ldd	r24, Z+2	; 0x02
    90a4:	90 e0       	ldi	r25, 0x00	; 0
    90a6:	01 97       	sbiw	r24, 0x01	; 1
    90a8:	95 01       	movw	r18, r10
    90aa:	b4 e0       	ldi	r27, 0x04	; 4
    90ac:	36 95       	lsr	r19
    90ae:	27 95       	ror	r18
    90b0:	ba 95       	dec	r27
    90b2:	e1 f7       	brne	.-8      	; 0x90ac <f_open+0x78a>
    90b4:	82 23       	and	r24, r18
    90b6:	93 23       	and	r25, r19
    90b8:	89 2b       	or	r24, r25
    90ba:	09 f0       	breq	.+2      	; 0x90be <f_open+0x79c>
    90bc:	5f c0       	rjmp	.+190    	; 0x917c <f_open+0x85a>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    90be:	cf 01       	movw	r24, r30
    90c0:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <get_fat>
    90c4:	9b 01       	movw	r18, r22
    90c6:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_INT_ERR;
    90c8:	62 30       	cpi	r22, 0x02	; 2
    90ca:	71 05       	cpc	r23, r1
    90cc:	81 05       	cpc	r24, r1
    90ce:	91 05       	cpc	r25, r1
    90d0:	18 f4       	brcc	.+6      	; 0x90d8 <f_open+0x7b6>
    90d2:	42 e0       	ldi	r20, 0x02	; 2
    90d4:	50 e0       	ldi	r21, 0x00	; 0
    90d6:	66 c0       	rjmp	.+204    	; 0x91a4 <f_open+0x882>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    90d8:	2f 3f       	cpi	r18, 0xFF	; 255
    90da:	9f ef       	ldi	r25, 0xFF	; 255
    90dc:	39 07       	cpc	r19, r25
    90de:	9f ef       	ldi	r25, 0xFF	; 255
    90e0:	49 07       	cpc	r20, r25
    90e2:	9f ef       	ldi	r25, 0xFF	; 255
    90e4:	59 07       	cpc	r21, r25
    90e6:	19 f4       	brne	.+6      	; 0x90ee <f_open+0x7cc>
    90e8:	41 e0       	ldi	r20, 0x01	; 1
    90ea:	50 e0       	ldi	r21, 0x00	; 0
    90ec:	5b c0       	rjmp	.+182    	; 0x91a4 <f_open+0x882>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    90ee:	cd 84       	ldd	r12, Y+13	; 0x0d
    90f0:	de 84       	ldd	r13, Y+14	; 0x0e
    90f2:	f6 01       	movw	r30, r12
    90f4:	82 85       	ldd	r24, Z+10	; 0x0a
    90f6:	93 85       	ldd	r25, Z+11	; 0x0b
    90f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    90fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    90fc:	28 17       	cp	r18, r24
    90fe:	39 07       	cpc	r19, r25
    9100:	4a 07       	cpc	r20, r26
    9102:	5b 07       	cpc	r21, r27
    9104:	08 f0       	brcs	.+2      	; 0x9108 <f_open+0x7e6>
    9106:	4c c0       	rjmp	.+152    	; 0x91a0 <f_open+0x87e>
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    9108:	2f 8b       	std	Y+23, r18	; 0x17
    910a:	38 8f       	std	Y+24, r19	; 0x18
    910c:	49 8f       	std	Y+25, r20	; 0x19
    910e:	5a 8f       	std	Y+26, r21	; 0x1a
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    9110:	ae ef       	ldi	r26, 0xFE	; 254
    9112:	ea 2e       	mov	r14, r26
    9114:	af ef       	ldi	r26, 0xFF	; 255
    9116:	fa 2e       	mov	r15, r26
    9118:	af ef       	ldi	r26, 0xFF	; 255
    911a:	0a 2f       	mov	r16, r26
    911c:	af ef       	ldi	r26, 0xFF	; 255
    911e:	1a 2f       	mov	r17, r26
    9120:	e2 0e       	add	r14, r18
    9122:	f3 1e       	adc	r15, r19
    9124:	04 1f       	adc	r16, r20
    9126:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    9128:	82 85       	ldd	r24, Z+10	; 0x0a
    912a:	93 85       	ldd	r25, Z+11	; 0x0b
    912c:	a4 85       	ldd	r26, Z+12	; 0x0c
    912e:	b5 85       	ldd	r27, Z+13	; 0x0d
    9130:	02 97       	sbiw	r24, 0x02	; 2
    9132:	a1 09       	sbc	r26, r1
    9134:	b1 09       	sbc	r27, r1
    9136:	e8 16       	cp	r14, r24
    9138:	f9 06       	cpc	r15, r25
    913a:	0a 07       	cpc	r16, r26
    913c:	1b 07       	cpc	r17, r27
    913e:	28 f0       	brcs	.+10     	; 0x914a <f_open+0x828>
    9140:	20 e0       	ldi	r18, 0x00	; 0
    9142:	30 e0       	ldi	r19, 0x00	; 0
    9144:	40 e0       	ldi	r20, 0x00	; 0
    9146:	50 e0       	ldi	r21, 0x00	; 0
    9148:	15 c0       	rjmp	.+42     	; 0x9174 <f_open+0x852>
	return clst * fs->csize + fs->database;
    914a:	d6 01       	movw	r26, r12
    914c:	12 96       	adiw	r26, 0x02	; 2
    914e:	2c 91       	ld	r18, X
    9150:	30 e0       	ldi	r19, 0x00	; 0
    9152:	40 e0       	ldi	r20, 0x00	; 0
    9154:	50 e0       	ldi	r21, 0x00	; 0
    9156:	c8 01       	movw	r24, r16
    9158:	b7 01       	movw	r22, r14
    915a:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    915e:	9b 01       	movw	r18, r22
    9160:	ac 01       	movw	r20, r24
    9162:	f6 01       	movw	r30, r12
    9164:	82 8d       	ldd	r24, Z+26	; 0x1a
    9166:	93 8d       	ldd	r25, Z+27	; 0x1b
    9168:	a4 8d       	ldd	r26, Z+28	; 0x1c
    916a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    916c:	28 0f       	add	r18, r24
    916e:	39 1f       	adc	r19, r25
    9170:	4a 1f       	adc	r20, r26
    9172:	5b 1f       	adc	r21, r27
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(dj->fs, clst);
    9174:	2b 8f       	std	Y+27, r18	; 0x1b
    9176:	3c 8f       	std	Y+28, r19	; 0x1c
    9178:	4d 8f       	std	Y+29, r20	; 0x1d
    917a:	5e 8f       	std	Y+30, r21	; 0x1e
			}
		}
	}

	dj->index = i;
    917c:	a9 8a       	std	Y+17, r10	; 0x11
    917e:	ba 8a       	std	Y+18, r11	; 0x12
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    9180:	75 e0       	ldi	r23, 0x05	; 5
    9182:	88 0c       	add	r8, r8
    9184:	99 1c       	adc	r9, r9
    9186:	7a 95       	dec	r23
    9188:	e1 f7       	brne	.-8      	; 0x9182 <f_open+0x860>
    918a:	22 e2       	ldi	r18, 0x22	; 34
    918c:	30 e0       	ldi	r19, 0x00	; 0
    918e:	82 0e       	add	r8, r18
    9190:	93 1e       	adc	r9, r19
    9192:	8d 85       	ldd	r24, Y+13	; 0x0d
    9194:	9e 85       	ldd	r25, Y+14	; 0x0e
    9196:	88 0d       	add	r24, r8
    9198:	99 1d       	adc	r25, r9
    919a:	8f 8f       	std	Y+31, r24	; 0x1f
    919c:	98 a3       	std	Y+32, r25	; 0x20
    919e:	24 cf       	rjmp	.-440    	; 0x8fe8 <f_open+0x6c6>
    91a0:	44 e0       	ldi	r20, 0x04	; 4
    91a2:	50 e0       	ldi	r21, 0x00	; 0
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    91a4:	e9 a1       	ldd	r30, Y+33	; 0x21
    91a6:	fa a1       	ldd	r31, Y+34	; 0x22
    91a8:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    91aa:	41 15       	cp	r20, r1
    91ac:	51 05       	cpc	r21, r1
    91ae:	39 f0       	breq	.+14     	; 0x91be <f_open+0x89c>
    91b0:	8a 01       	movw	r16, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    91b2:	44 30       	cpi	r20, 0x04	; 4
    91b4:	51 05       	cpc	r21, r1
    91b6:	e9 f5       	brne	.+122    	; 0x9232 <f_open+0x910>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    91b8:	82 ff       	sbrs	r24, 2
    91ba:	3d c0       	rjmp	.+122    	; 0x9236 <f_open+0x914>
    91bc:	3e c0       	rjmp	.+124    	; 0x923a <f_open+0x918>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    91be:	82 fd       	sbrc	r24, 2
    91c0:	38 c0       	rjmp	.+112    	; 0x9232 <f_open+0x910>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    91c2:	af 8d       	ldd	r26, Y+31	; 0x1f
    91c4:	b8 a1       	ldd	r27, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    91c6:	1b 96       	adiw	r26, 0x0b	; 11
    91c8:	8c 91       	ld	r24, X
    91ca:	1b 97       	sbiw	r26, 0x0b	; 11
    91cc:	84 ff       	sbrs	r24, 4
    91ce:	33 c0       	rjmp	.+102    	; 0x9236 <f_open+0x914>
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    91d0:	5b 96       	adiw	r26, 0x1b	; 27
    91d2:	5c 90       	ld	r5, X
    91d4:	5b 97       	sbiw	r26, 0x1b	; 27
    91d6:	44 24       	eor	r4, r4
    91d8:	5a 96       	adiw	r26, 0x1a	; 26
    91da:	8c 91       	ld	r24, X
    91dc:	5a 97       	sbiw	r26, 0x1a	; 26
    91de:	90 e0       	ldi	r25, 0x00	; 0
    91e0:	84 29       	or	r24, r4
    91e2:	95 29       	or	r25, r5
    91e4:	9c 01       	movw	r18, r24
    91e6:	40 e0       	ldi	r20, 0x00	; 0
    91e8:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    91ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    91ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    91ee:	80 81       	ld	r24, Z
    91f0:	83 30       	cpi	r24, 0x03	; 3
    91f2:	a9 f4       	brne	.+42     	; 0x921e <f_open+0x8fc>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    91f4:	55 96       	adiw	r26, 0x15	; 21
    91f6:	6c 91       	ld	r22, X
    91f8:	55 97       	sbiw	r26, 0x15	; 21
    91fa:	6b ab       	std	Y+51, r22	; 0x33
    91fc:	1a aa       	std	Y+50, r1	; 0x32
    91fe:	54 96       	adiw	r26, 0x14	; 20
    9200:	8c 91       	ld	r24, X
    9202:	90 e0       	ldi	r25, 0x00	; 0
    9204:	aa a9       	ldd	r26, Y+50	; 0x32
    9206:	bb a9       	ldd	r27, Y+51	; 0x33
    9208:	8a 2b       	or	r24, r26
    920a:	9b 2b       	or	r25, r27
    920c:	a0 e0       	ldi	r26, 0x00	; 0
    920e:	b0 e0       	ldi	r27, 0x00	; 0
    9210:	dc 01       	movw	r26, r24
    9212:	99 27       	eor	r25, r25
    9214:	88 27       	eor	r24, r24
    9216:	28 2b       	or	r18, r24
    9218:	39 2b       	or	r19, r25
    921a:	4a 2b       	or	r20, r26
    921c:	5b 2b       	or	r21, r27
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    921e:	26 0c       	add	r2, r6
    9220:	37 1c       	adc	r3, r7
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    9222:	2b 8b       	std	Y+19, r18	; 0x13
    9224:	3c 8b       	std	Y+20, r19	; 0x14
    9226:	4d 8b       	std	Y+21, r20	; 0x15
    9228:	5e 8b       	std	Y+22, r21	; 0x16
    922a:	26 ce       	rjmp	.-948    	; 0x8e78 <f_open+0x556>
    922c:	06 e0       	ldi	r16, 0x06	; 6
    922e:	10 e0       	ldi	r17, 0x00	; 0
    9230:	04 c0       	rjmp	.+8      	; 0x923a <f_open+0x918>
    9232:	8a 01       	movw	r16, r20
    9234:	02 c0       	rjmp	.+4      	; 0x923a <f_open+0x918>
    9236:	05 e0       	ldi	r16, 0x05	; 5
    9238:	10 e0       	ldi	r17, 0x00	; 0
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    923a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    923c:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
    923e:	01 15       	cp	r16, r1
    9240:	11 05       	cpc	r17, r1
    9242:	09 f0       	breq	.+2      	; 0x9246 <f_open+0x924>
    9244:	71 c0       	rjmp	.+226    	; 0x9328 <f_open+0xa06>
			dir = dj.dir;
			if (!dir) {						/* Current dir itself */
    9246:	30 97       	sbiw	r30, 0x00	; 0
    9248:	19 f4       	brne	.+6      	; 0x9250 <f_open+0x92e>
    924a:	06 e0       	ldi	r16, 0x06	; 6
    924c:	10 e0       	ldi	r17, 0x00	; 0
    924e:	6c c0       	rjmp	.+216    	; 0x9328 <f_open+0xa06>
				res = FR_INVALID_NAME;
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
    9250:	83 85       	ldd	r24, Z+11	; 0x0b
    9252:	84 fd       	sbrc	r24, 4
    9254:	6e c0       	rjmp	.+220    	; 0x9332 <f_open+0xa10>
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    9256:	b9 a9       	ldd	r27, Y+49	; 0x31
    9258:	b1 70       	andi	r27, 0x01	; 1
    925a:	2b 2f       	mov	r18, r27
    925c:	af a5       	ldd	r26, Y+47	; 0x2f
    925e:	b8 a9       	ldd	r27, Y+48	; 0x30
    9260:	14 96       	adiw	r26, 0x04	; 4
    9262:	2c 93       	st	X, r18
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    9264:	ed 84       	ldd	r14, Y+13	; 0x0d
    9266:	fe 84       	ldd	r15, Y+14	; 0x0e
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    9268:	93 8d       	ldd	r25, Z+27	; 0x1b
    926a:	80 e0       	ldi	r24, 0x00	; 0
    926c:	22 8d       	ldd	r18, Z+26	; 0x1a
    926e:	30 e0       	ldi	r19, 0x00	; 0
    9270:	82 2b       	or	r24, r18
    9272:	93 2b       	or	r25, r19
    9274:	ac 01       	movw	r20, r24
    9276:	60 e0       	ldi	r22, 0x00	; 0
    9278:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    927a:	d7 01       	movw	r26, r14
    927c:	8c 91       	ld	r24, X
    927e:	83 30       	cpi	r24, 0x03	; 3
    9280:	79 f4       	brne	.+30     	; 0x92a0 <f_open+0x97e>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    9282:	95 89       	ldd	r25, Z+21	; 0x15
    9284:	80 e0       	ldi	r24, 0x00	; 0
    9286:	24 89       	ldd	r18, Z+20	; 0x14
    9288:	30 e0       	ldi	r19, 0x00	; 0
    928a:	82 2b       	or	r24, r18
    928c:	93 2b       	or	r25, r19
    928e:	a0 e0       	ldi	r26, 0x00	; 0
    9290:	b0 e0       	ldi	r27, 0x00	; 0
    9292:	dc 01       	movw	r26, r24
    9294:	99 27       	eor	r25, r25
    9296:	88 27       	eor	r24, r24
    9298:	48 2b       	or	r20, r24
    929a:	59 2b       	or	r21, r25
    929c:	6a 2b       	or	r22, r26
    929e:	7b 2b       	or	r23, r27
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    92a0:	af a5       	ldd	r26, Y+47	; 0x2f
    92a2:	b8 a9       	ldd	r27, Y+48	; 0x30
    92a4:	1e 96       	adiw	r26, 0x0e	; 14
    92a6:	4d 93       	st	X+, r20
    92a8:	5d 93       	st	X+, r21
    92aa:	6d 93       	st	X+, r22
    92ac:	7c 93       	st	X, r23
    92ae:	51 97       	sbiw	r26, 0x11	; 17
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    92b0:	27 8d       	ldd	r18, Z+31	; 0x1f
    92b2:	30 e0       	ldi	r19, 0x00	; 0
    92b4:	40 e0       	ldi	r20, 0x00	; 0
    92b6:	50 e0       	ldi	r21, 0x00	; 0
    92b8:	52 2f       	mov	r21, r18
    92ba:	44 27       	eor	r20, r20
    92bc:	33 27       	eor	r19, r19
    92be:	22 27       	eor	r18, r18
    92c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    92c2:	90 e0       	ldi	r25, 0x00	; 0
    92c4:	a0 e0       	ldi	r26, 0x00	; 0
    92c6:	b0 e0       	ldi	r27, 0x00	; 0
    92c8:	dc 01       	movw	r26, r24
    92ca:	99 27       	eor	r25, r25
    92cc:	88 27       	eor	r24, r24
    92ce:	28 2b       	or	r18, r24
    92d0:	39 2b       	or	r19, r25
    92d2:	4a 2b       	or	r20, r26
    92d4:	5b 2b       	or	r21, r27
    92d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    92d8:	90 e0       	ldi	r25, 0x00	; 0
    92da:	a0 e0       	ldi	r26, 0x00	; 0
    92dc:	b0 e0       	ldi	r27, 0x00	; 0
    92de:	28 2b       	or	r18, r24
    92e0:	39 2b       	or	r19, r25
    92e2:	4a 2b       	or	r20, r26
    92e4:	5b 2b       	or	r21, r27
    92e6:	95 8d       	ldd	r25, Z+29	; 0x1d
    92e8:	80 e0       	ldi	r24, 0x00	; 0
    92ea:	a0 e0       	ldi	r26, 0x00	; 0
    92ec:	b0 e0       	ldi	r27, 0x00	; 0
    92ee:	28 2b       	or	r18, r24
    92f0:	39 2b       	or	r19, r25
    92f2:	4a 2b       	or	r20, r26
    92f4:	5b 2b       	or	r21, r27
    92f6:	ef a5       	ldd	r30, Y+47	; 0x2f
    92f8:	f8 a9       	ldd	r31, Y+48	; 0x30
    92fa:	22 87       	std	Z+10, r18	; 0x0a
    92fc:	33 87       	std	Z+11, r19	; 0x0b
    92fe:	44 87       	std	Z+12, r20	; 0x0c
    9300:	55 87       	std	Z+13, r21	; 0x0d
			fp->fptr = 0;						/* File pointer */
    9302:	df 01       	movw	r26, r30
    9304:	16 82       	std	Z+6, r1	; 0x06
    9306:	17 82       	std	Z+7, r1	; 0x07
    9308:	10 86       	std	Z+8, r1	; 0x08
    930a:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    930c:	16 8a       	std	Z+22, r1	; 0x16
    930e:	17 8a       	std	Z+23, r1	; 0x17
    9310:	10 8e       	std	Z+24, r1	; 0x18
    9312:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9314:	e0 82       	st	Z, r14
    9316:	f1 82       	std	Z+1, r15	; 0x01
    9318:	ed 85       	ldd	r30, Y+13	; 0x0d
    931a:	fe 85       	ldd	r31, Y+14	; 0x0e
    931c:	86 81       	ldd	r24, Z+6	; 0x06
    931e:	97 81       	ldd	r25, Z+7	; 0x07
    9320:	12 96       	adiw	r26, 0x02	; 2
    9322:	8d 93       	st	X+, r24
    9324:	9c 93       	st	X, r25
    9326:	13 97       	sbiw	r26, 0x03	; 3
		}
	}

	LEAVE_FF(dj.fs, res);
}
    9328:	c8 01       	movw	r24, r16
    932a:	e3 96       	adiw	r28, 0x33	; 51
    932c:	e2 e1       	ldi	r30, 0x12	; 18
    932e:	0c 94 aa 51 	jmp	0xa354	; 0xa354 <__epilogue_restores__>
			fp->fptr = 0;						/* File pointer */
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9332:	04 e0       	ldi	r16, 0x04	; 4
    9334:	10 e0       	ldi	r17, 0x00	; 0
    9336:	f8 cf       	rjmp	.-16     	; 0x9328 <f_open+0xa06>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    9338:	ce 01       	movw	r24, r28
    933a:	01 96       	adiw	r24, 0x01	; 1
    933c:	89 a3       	std	Y+33, r24	; 0x21
    933e:	9a a3       	std	Y+34, r25	; 0x22
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    9340:	f1 01       	movw	r30, r2
    9342:	80 81       	ld	r24, Z
    9344:	8f 32       	cpi	r24, 0x2F	; 47
    9346:	09 f0       	breq	.+2      	; 0x934a <f_open+0xa28>
    9348:	7d cd       	rjmp	.-1286   	; 0x8e44 <f_open+0x522>
    934a:	7e cd       	rjmp	.-1284   	; 0x8e48 <f_open+0x526>
    934c:	91 2f       	mov	r25, r17
    934e:	60 e0       	ldi	r22, 0x00	; 0
    9350:	22 ce       	rjmp	.-956    	; 0x8f96 <f_open+0x674>

00009352 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    9352:	80 e1       	ldi	r24, 0x10	; 16
    9354:	e0 e8       	ldi	r30, 0x80	; 128
    9356:	f6 e0       	ldi	r31, 0x06	; 6
    9358:	86 83       	std	Z+6, r24	; 0x06
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    935a:	8f ef       	ldi	r24, 0xFF	; 255
    935c:	e0 ec       	ldi	r30, 0xC0	; 192
    935e:	fa e0       	ldi	r31, 0x0A	; 10
    9360:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9362:	80 91 c2 0a 	lds	r24, 0x0AC2
    9366:	87 ff       	sbrs	r24, 7
    9368:	fc cf       	rjmp	.-8      	; 0x9362 <select+0x10>
	return SPIE.DATA;
    936a:	80 91 c3 0a 	lds	r24, 0x0AC3
int wait_ready (void)
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    936e:	82 e3       	ldi	r24, 0x32	; 50
    9370:	80 93 92 24 	sts	0x2492, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9374:	e0 ec       	ldi	r30, 0xC0	; 192
    9376:	fa e0       	ldi	r31, 0x0A	; 10
    9378:	9f ef       	ldi	r25, 0xFF	; 255
    937a:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    937c:	80 91 c2 0a 	lds	r24, 0x0AC2
    9380:	87 ff       	sbrs	r24, 7
    9382:	fc cf       	rjmp	.-8      	; 0x937c <select+0x2a>
	return SPIE.DATA;
    9384:	80 91 c3 0a 	lds	r24, 0x0AC3


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    9388:	8f 3f       	cpi	r24, 0xFF	; 255
    938a:	19 f4       	brne	.+6      	; 0x9392 <select+0x40>
    938c:	21 e0       	ldi	r18, 0x01	; 1
    938e:	30 e0       	ldi	r19, 0x00	; 0
    9390:	14 c0       	rjmp	.+40     	; 0x93ba <select+0x68>
    9392:	80 91 92 24 	lds	r24, 0x2492
    9396:	88 23       	and	r24, r24
    9398:	81 f7       	brne	.-32     	; 0x937a <select+0x28>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    939a:	80 e1       	ldi	r24, 0x10	; 16
    939c:	e0 e8       	ldi	r30, 0x80	; 128
    939e:	f6 e0       	ldi	r31, 0x06	; 6
    93a0:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    93a2:	8f ef       	ldi	r24, 0xFF	; 255
    93a4:	e0 ec       	ldi	r30, 0xC0	; 192
    93a6:	fa e0       	ldi	r31, 0x0A	; 10
    93a8:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    93aa:	80 91 c2 0a 	lds	r24, 0x0AC2
    93ae:	87 ff       	sbrs	r24, 7
    93b0:	fc cf       	rjmp	.-8      	; 0x93aa <select+0x58>
	return SPIE.DATA;
    93b2:	80 91 c3 0a 	lds	r24, 0x0AC3
    93b6:	20 e0       	ldi	r18, 0x00	; 0
    93b8:	30 e0       	ldi	r19, 0x00	; 0
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
	deselect();
	return 0;	/* Timeout */
}
    93ba:	c9 01       	movw	r24, r18
    93bc:	08 95       	ret

000093be <power_off>:
}

static
void power_off (void)
{
  CS_LOW();        /* Wait for card ready */
    93be:	80 e1       	ldi	r24, 0x10	; 16
    93c0:	e0 e8       	ldi	r30, 0x80	; 128
    93c2:	f6 e0       	ldi	r31, 0x06	; 6
    93c4:	86 83       	std	Z+6, r24	; 0x06
int wait_ready (void)
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    93c6:	82 e3       	ldi	r24, 0x32	; 50
    93c8:	80 93 92 24 	sts	0x2492, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    93cc:	e0 ec       	ldi	r30, 0xC0	; 192
    93ce:	fa e0       	ldi	r31, 0x0A	; 10
    93d0:	9f ef       	ldi	r25, 0xFF	; 255
    93d2:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    93d4:	80 91 c2 0a 	lds	r24, 0x0AC2
    93d8:	87 ff       	sbrs	r24, 7
    93da:	fc cf       	rjmp	.-8      	; 0x93d4 <power_off+0x16>
	return SPIE.DATA;
    93dc:	80 91 c3 0a 	lds	r24, 0x0AC3


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    93e0:	8f 3f       	cpi	r24, 0xFF	; 255
    93e2:	21 f0       	breq	.+8      	; 0x93ec <power_off+0x2e>
    93e4:	80 91 92 24 	lds	r24, 0x2492
    93e8:	88 23       	and	r24, r24
    93ea:	99 f7       	brne	.-26     	; 0x93d2 <power_off+0x14>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    93ec:	80 e1       	ldi	r24, 0x10	; 16
    93ee:	e0 e8       	ldi	r30, 0x80	; 128
    93f0:	f6 e0       	ldi	r31, 0x06	; 6
    93f2:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    93f4:	8f ef       	ldi	r24, 0xFF	; 255
    93f6:	e0 ec       	ldi	r30, 0xC0	; 192
    93f8:	fa e0       	ldi	r31, 0x0A	; 10
    93fa:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    93fc:	80 91 c2 0a 	lds	r24, 0x0AC2
    9400:	87 ff       	sbrs	r24, 7
    9402:	fc cf       	rjmp	.-8      	; 0x93fc <power_off+0x3e>
	return SPIE.DATA;
    9404:	80 91 c3 0a 	lds	r24, 0x0AC3
void power_off (void)
{
  CS_LOW();        /* Wait for card ready */
  wait_ready();
  deselect();
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    9408:	80 91 f3 23 	lds	r24, 0x23F3
    940c:	81 60       	ori	r24, 0x01	; 1
    940e:	80 93 f3 23 	sts	0x23F3, r24
	}
    9412:	08 95       	ret

00009414 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    9414:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    9416:	84 e1       	ldi	r24, 0x14	; 20
    9418:	80 93 91 24 	sts	0x2491, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    941c:	a0 ec       	ldi	r26, 0xC0	; 192
    941e:	ba e0       	ldi	r27, 0x0A	; 10
    9420:	9f ef       	ldi	r25, 0xFF	; 255
    9422:	13 96       	adiw	r26, 0x03	; 3
    9424:	9c 93       	st	X, r25
    9426:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9428:	80 91 c2 0a 	lds	r24, 0x0AC2
    942c:	87 ff       	sbrs	r24, 7
    942e:	fc cf       	rjmp	.-8      	; 0x9428 <rcvr_datablock+0x14>
	return SPIE.DATA;
    9430:	80 91 c3 0a 	lds	r24, 0x0AC3


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    9434:	8f 3f       	cpi	r24, 0xFF	; 255
    9436:	29 f4       	brne	.+10     	; 0x9442 <rcvr_datablock+0x2e>
    9438:	80 91 91 24 	lds	r24, 0x2491
    943c:	88 23       	and	r24, r24
    943e:	89 f7       	brne	.-30     	; 0x9422 <rcvr_datablock+0xe>
    9440:	35 c0       	rjmp	.+106    	; 0x94ac <rcvr_datablock+0x98>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    9442:	8e 3f       	cpi	r24, 0xFE	; 254
    9444:	99 f5       	brne	.+102    	; 0x94ac <rcvr_datablock+0x98>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPIE.DATA = 0xFF; loop_until_bit_is_set(SPIE.STATUS,7); *p++ = SPIE.DATA;
    9446:	a0 ec       	ldi	r26, 0xC0	; 192
    9448:	ba e0       	ldi	r27, 0x0A	; 10
    944a:	9f ef       	ldi	r25, 0xFF	; 255
    944c:	13 96       	adiw	r26, 0x03	; 3
    944e:	9c 93       	st	X, r25
    9450:	13 97       	sbiw	r26, 0x03	; 3
    9452:	80 91 c2 0a 	lds	r24, 0x0AC2
    9456:	87 ff       	sbrs	r24, 7
    9458:	fc cf       	rjmp	.-8      	; 0x9452 <rcvr_datablock+0x3e>
    945a:	80 91 c3 0a 	lds	r24, 0x0AC3
    945e:	80 83       	st	Z, r24
		SPIE.DATA = 0xFF; loop_until_bit_is_set(SPIE.STATUS,7); *p++ = SPIE.DATA;
    9460:	13 96       	adiw	r26, 0x03	; 3
    9462:	9c 93       	st	X, r25
    9464:	13 97       	sbiw	r26, 0x03	; 3
    9466:	80 91 c2 0a 	lds	r24, 0x0AC2
    946a:	87 ff       	sbrs	r24, 7
    946c:	fc cf       	rjmp	.-8      	; 0x9466 <rcvr_datablock+0x52>
    946e:	80 91 c3 0a 	lds	r24, 0x0AC3
    9472:	81 83       	std	Z+1, r24	; 0x01
	} while (cnt -= 2);
    9474:	62 50       	subi	r22, 0x02	; 2
    9476:	70 40       	sbci	r23, 0x00	; 0
    9478:	11 f0       	breq	.+4      	; 0x947e <rcvr_datablock+0x6a>
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    947a:	32 96       	adiw	r30, 0x02	; 2
    947c:	e7 cf       	rjmp	.-50     	; 0x944c <rcvr_datablock+0x38>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    947e:	8f ef       	ldi	r24, 0xFF	; 255
    9480:	e0 ec       	ldi	r30, 0xC0	; 192
    9482:	fa e0       	ldi	r31, 0x0A	; 10
    9484:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9486:	80 91 c2 0a 	lds	r24, 0x0AC2
    948a:	87 ff       	sbrs	r24, 7
    948c:	fc cf       	rjmp	.-8      	; 0x9486 <rcvr_datablock+0x72>
	return SPIE.DATA;
    948e:	80 91 c3 0a 	lds	r24, 0x0AC3
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9492:	8f ef       	ldi	r24, 0xFF	; 255
    9494:	e0 ec       	ldi	r30, 0xC0	; 192
    9496:	fa e0       	ldi	r31, 0x0A	; 10
    9498:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    949a:	80 91 c2 0a 	lds	r24, 0x0AC2
    949e:	87 ff       	sbrs	r24, 7
    94a0:	fc cf       	rjmp	.-8      	; 0x949a <rcvr_datablock+0x86>
	return SPIE.DATA;
    94a2:	80 91 c3 0a 	lds	r24, 0x0AC3
    94a6:	21 e0       	ldi	r18, 0x01	; 1
    94a8:	30 e0       	ldi	r19, 0x00	; 0
    94aa:	02 c0       	rjmp	.+4      	; 0x94b0 <rcvr_datablock+0x9c>

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
    94ac:	20 e0       	ldi	r18, 0x00	; 0
    94ae:	30 e0       	ldi	r19, 0x00	; 0
}
    94b0:	c9 01       	movw	r24, r18
    94b2:	08 95       	ret

000094b4 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    94b4:	df 92       	push	r13
    94b6:	ef 92       	push	r14
    94b8:	ff 92       	push	r15
    94ba:	0f 93       	push	r16
    94bc:	1f 93       	push	r17
    94be:	d8 2e       	mov	r13, r24
    94c0:	7a 01       	movw	r14, r20
    94c2:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    94c4:	87 ff       	sbrs	r24, 7
    94c6:	0c c0       	rjmp	.+24     	; 0x94e0 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    94c8:	87 e3       	ldi	r24, 0x37	; 55
    94ca:	40 e0       	ldi	r20, 0x00	; 0
    94cc:	50 e0       	ldi	r21, 0x00	; 0
    94ce:	60 e0       	ldi	r22, 0x00	; 0
    94d0:	70 e0       	ldi	r23, 0x00	; 0
    94d2:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
		if (res > 1) return res;
    94d6:	82 30       	cpi	r24, 0x02	; 2
    94d8:	08 f0       	brcs	.+2      	; 0x94dc <send_cmd+0x28>
    94da:	7f c0       	rjmp	.+254    	; 0x95da <send_cmd+0x126>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    94dc:	8f e7       	ldi	r24, 0x7F	; 127
    94de:	d8 22       	and	r13, r24
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    94e0:	80 e1       	ldi	r24, 0x10	; 16
    94e2:	e0 e8       	ldi	r30, 0x80	; 128
    94e4:	f6 e0       	ldi	r31, 0x06	; 6
    94e6:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    94e8:	8f ef       	ldi	r24, 0xFF	; 255
    94ea:	e0 ec       	ldi	r30, 0xC0	; 192
    94ec:	fa e0       	ldi	r31, 0x0A	; 10
    94ee:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    94f0:	80 91 c2 0a 	lds	r24, 0x0AC2
    94f4:	87 ff       	sbrs	r24, 7
    94f6:	fc cf       	rjmp	.-8      	; 0x94f0 <send_cmd+0x3c>
	return SPIE.DATA;
    94f8:	80 91 c3 0a 	lds	r24, 0x0AC3
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
  if (!select()) return 0xFF;
    94fc:	0e 94 a9 49 	call	0x9352	; 0x9352 <select>
    9500:	89 2b       	or	r24, r25
    9502:	11 f4       	brne	.+4      	; 0x9508 <send_cmd+0x54>
    9504:	8f ef       	ldi	r24, 0xFF	; 255
    9506:	69 c0       	rjmp	.+210    	; 0x95da <send_cmd+0x126>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    9508:	8d 2d       	mov	r24, r13
    950a:	80 64       	ori	r24, 0x40	; 64
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    950c:	e0 ec       	ldi	r30, 0xC0	; 192
    950e:	fa e0       	ldi	r31, 0x0A	; 10
    9510:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9512:	80 91 c2 0a 	lds	r24, 0x0AC2
    9516:	87 ff       	sbrs	r24, 7
    9518:	fc cf       	rjmp	.-8      	; 0x9512 <send_cmd+0x5e>
	return SPIE.DATA;
    951a:	80 91 c3 0a 	lds	r24, 0x0AC3
	deselect();
  if (!select()) return 0xFF;

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    951e:	81 2f       	mov	r24, r17
    9520:	99 27       	eor	r25, r25
    9522:	aa 27       	eor	r26, r26
    9524:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9526:	e0 ec       	ldi	r30, 0xC0	; 192
    9528:	fa e0       	ldi	r31, 0x0A	; 10
    952a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    952c:	80 91 c2 0a 	lds	r24, 0x0AC2
    9530:	87 ff       	sbrs	r24, 7
    9532:	fc cf       	rjmp	.-8      	; 0x952c <send_cmd+0x78>
	return SPIE.DATA;
    9534:	80 91 c3 0a 	lds	r24, 0x0AC3
  if (!select()) return 0xFF;

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    9538:	c8 01       	movw	r24, r16
    953a:	aa 27       	eor	r26, r26
    953c:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    953e:	e0 ec       	ldi	r30, 0xC0	; 192
    9540:	fa e0       	ldi	r31, 0x0A	; 10
    9542:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9544:	80 91 c2 0a 	lds	r24, 0x0AC2
    9548:	87 ff       	sbrs	r24, 7
    954a:	fc cf       	rjmp	.-8      	; 0x9544 <send_cmd+0x90>
	return SPIE.DATA;
    954c:	80 91 c3 0a 	lds	r24, 0x0AC3

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    9550:	bb 27       	eor	r27, r27
    9552:	a1 2f       	mov	r26, r17
    9554:	90 2f       	mov	r25, r16
    9556:	8f 2d       	mov	r24, r15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9558:	e0 ec       	ldi	r30, 0xC0	; 192
    955a:	fa e0       	ldi	r31, 0x0A	; 10
    955c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    955e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9562:	87 ff       	sbrs	r24, 7
    9564:	fc cf       	rjmp	.-8      	; 0x955e <send_cmd+0xaa>
	return SPIE.DATA;
    9566:	80 91 c3 0a 	lds	r24, 0x0AC3
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    956a:	e0 ec       	ldi	r30, 0xC0	; 192
    956c:	fa e0       	ldi	r31, 0x0A	; 10
    956e:	e3 82       	std	Z+3, r14	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9570:	80 91 c2 0a 	lds	r24, 0x0AC2
    9574:	87 ff       	sbrs	r24, 7
    9576:	fc cf       	rjmp	.-8      	; 0x9570 <send_cmd+0xbc>
	return SPIE.DATA;
    9578:	80 91 c3 0a 	lds	r24, 0x0AC3
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    957c:	dd 20       	and	r13, r13
    957e:	11 f4       	brne	.+4      	; 0x9584 <send_cmd+0xd0>
    9580:	85 e9       	ldi	r24, 0x95	; 149
    9582:	06 c0       	rjmp	.+12     	; 0x9590 <send_cmd+0xdc>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    9584:	88 e0       	ldi	r24, 0x08	; 8
    9586:	d8 16       	cp	r13, r24
    9588:	11 f4       	brne	.+4      	; 0x958e <send_cmd+0xda>
    958a:	87 e8       	ldi	r24, 0x87	; 135
    958c:	01 c0       	rjmp	.+2      	; 0x9590 <send_cmd+0xdc>
    958e:	81 e0       	ldi	r24, 0x01	; 1
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9590:	e0 ec       	ldi	r30, 0xC0	; 192
    9592:	fa e0       	ldi	r31, 0x0A	; 10
    9594:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9596:	80 91 c2 0a 	lds	r24, 0x0AC2
    959a:	87 ff       	sbrs	r24, 7
    959c:	fc cf       	rjmp	.-8      	; 0x9596 <send_cmd+0xe2>
	return SPIE.DATA;
    959e:	80 91 c3 0a 	lds	r24, 0x0AC3
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    95a2:	8c e0       	ldi	r24, 0x0C	; 12
    95a4:	d8 16       	cp	r13, r24
    95a6:	51 f4       	brne	.+20     	; 0x95bc <send_cmd+0x108>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    95a8:	8f ef       	ldi	r24, 0xFF	; 255
    95aa:	e0 ec       	ldi	r30, 0xC0	; 192
    95ac:	fa e0       	ldi	r31, 0x0A	; 10
    95ae:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    95b0:	80 91 c2 0a 	lds	r24, 0x0AC2
    95b4:	87 ff       	sbrs	r24, 7
    95b6:	fc cf       	rjmp	.-8      	; 0x95b0 <send_cmd+0xfc>
	return SPIE.DATA;
    95b8:	80 91 c3 0a 	lds	r24, 0x0AC3
    95bc:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    95be:	e0 ec       	ldi	r30, 0xC0	; 192
    95c0:	fa e0       	ldi	r31, 0x0A	; 10
    95c2:	2f ef       	ldi	r18, 0xFF	; 255
    95c4:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    95c6:	80 91 c2 0a 	lds	r24, 0x0AC2
    95ca:	87 ff       	sbrs	r24, 7
    95cc:	fc cf       	rjmp	.-8      	; 0x95c6 <send_cmd+0x112>
	return SPIE.DATA;
    95ce:	80 91 c3 0a 	lds	r24, 0x0AC3
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    95d2:	87 ff       	sbrs	r24, 7
    95d4:	02 c0       	rjmp	.+4      	; 0x95da <send_cmd+0x126>
    95d6:	91 50       	subi	r25, 0x01	; 1
    95d8:	a9 f7       	brne	.-22     	; 0x95c4 <send_cmd+0x110>

	return res;			/* Return with the response value */
}
    95da:	1f 91       	pop	r17
    95dc:	0f 91       	pop	r16
    95de:	ff 90       	pop	r15
    95e0:	ef 90       	pop	r14
    95e2:	df 90       	pop	r13
    95e4:	08 95       	ret

000095e6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    95e6:	a4 e0       	ldi	r26, 0x04	; 4
    95e8:	b0 e0       	ldi	r27, 0x00	; 0
    95ea:	e9 ef       	ldi	r30, 0xF9	; 249
    95ec:	fa e4       	ldi	r31, 0x4A	; 74
    95ee:	0c 94 9a 51 	jmp	0xa334	; 0xa334 <__prologue_saves__+0x18>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    95f2:	88 23       	and	r24, r24
    95f4:	11 f0       	breq	.+4      	; 0x95fa <disk_initialize+0x14>
    95f6:	81 e0       	ldi	r24, 0x01	; 1
    95f8:	ce c0       	rjmp	.+412    	; 0x9796 <disk_initialize+0x1b0>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    95fa:	80 91 f3 23 	lds	r24, 0x23F3
    95fe:	81 fd       	sbrc	r24, 1
    9600:	c8 c0       	rjmp	.+400    	; 0x9792 <disk_initialize+0x1ac>
}

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    9602:	83 e0       	ldi	r24, 0x03	; 3
    9604:	80 93 91 24 	sts	0x2491, r24
    9608:	80 91 91 24 	lds	r24, 0x2491
    960c:	88 23       	and	r24, r24
    960e:	e1 f7       	brne	.-8      	; 0x9608 <disk_initialize+0x22>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    9610:	83 e5       	ldi	r24, 0x53	; 83
    9612:	80 93 c0 0a 	sts	0x0AC0, r24
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
	FCLK_SLOW();
    9616:	80 93 c0 0a 	sts	0x0AC0, r24
    961a:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    961c:	e0 ec       	ldi	r30, 0xC0	; 192
    961e:	fa e0       	ldi	r31, 0x0A	; 10
    9620:	2f ef       	ldi	r18, 0xFF	; 255
    9622:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9624:	80 91 c2 0a 	lds	r24, 0x0AC2
    9628:	87 ff       	sbrs	r24, 7
    962a:	fc cf       	rjmp	.-8      	; 0x9624 <disk_initialize+0x3e>
	return SPIE.DATA;
    962c:	80 91 c3 0a 	lds	r24, 0x0AC3
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    9630:	91 50       	subi	r25, 0x01	; 1
    9632:	b9 f7       	brne	.-18     	; 0x9622 <disk_initialize+0x3c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    9634:	80 e0       	ldi	r24, 0x00	; 0
    9636:	40 e0       	ldi	r20, 0x00	; 0
    9638:	50 e0       	ldi	r21, 0x00	; 0
    963a:	60 e0       	ldi	r22, 0x00	; 0
    963c:	70 e0       	ldi	r23, 0x00	; 0
    963e:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9642:	81 30       	cpi	r24, 0x01	; 1
    9644:	09 f0       	breq	.+2      	; 0x9648 <disk_initialize+0x62>
    9646:	87 c0       	rjmp	.+270    	; 0x9756 <disk_initialize+0x170>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    9648:	84 e6       	ldi	r24, 0x64	; 100
    964a:	80 93 91 24 	sts	0x2491, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    964e:	88 e0       	ldi	r24, 0x08	; 8
    9650:	4a ea       	ldi	r20, 0xAA	; 170
    9652:	51 e0       	ldi	r21, 0x01	; 1
    9654:	60 e0       	ldi	r22, 0x00	; 0
    9656:	70 e0       	ldi	r23, 0x00	; 0
    9658:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    965c:	81 30       	cpi	r24, 0x01	; 1
    965e:	09 f0       	breq	.+2      	; 0x9662 <disk_initialize+0x7c>
    9660:	53 c0       	rjmp	.+166    	; 0x9708 <disk_initialize+0x122>
    9662:	7e 01       	movw	r14, r28
    9664:	08 94       	sec
    9666:	e1 1c       	adc	r14, r1
    9668:	f1 1c       	adc	r15, r1
    966a:	87 01       	movw	r16, r14
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    966c:	e0 ec       	ldi	r30, 0xC0	; 192
    966e:	fa e0       	ldi	r31, 0x0A	; 10
    9670:	9f ef       	ldi	r25, 0xFF	; 255

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    9672:	9e 01       	movw	r18, r28
    9674:	2b 5f       	subi	r18, 0xFB	; 251
    9676:	3f 4f       	sbci	r19, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9678:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    967a:	80 91 c2 0a 	lds	r24, 0x0AC2
    967e:	87 ff       	sbrs	r24, 7
    9680:	fc cf       	rjmp	.-8      	; 0x967a <disk_initialize+0x94>
	return SPIE.DATA;
    9682:	80 91 c3 0a 	lds	r24, 0x0AC3

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    9686:	d8 01       	movw	r26, r16
    9688:	8d 93       	st	X+, r24
    968a:	8d 01       	movw	r16, r26
    968c:	a2 17       	cp	r26, r18
    968e:	b3 07       	cpc	r27, r19
    9690:	99 f7       	brne	.-26     	; 0x9678 <disk_initialize+0x92>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    9692:	8b 81       	ldd	r24, Y+3	; 0x03
    9694:	81 30       	cpi	r24, 0x01	; 1
    9696:	09 f0       	breq	.+2      	; 0x969a <disk_initialize+0xb4>
    9698:	5e c0       	rjmp	.+188    	; 0x9756 <disk_initialize+0x170>
    969a:	8c 81       	ldd	r24, Y+4	; 0x04
    969c:	8a 3a       	cpi	r24, 0xAA	; 170
    969e:	09 f0       	breq	.+2      	; 0x96a2 <disk_initialize+0xbc>
    96a0:	5a c0       	rjmp	.+180    	; 0x9756 <disk_initialize+0x170>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    96a2:	80 91 91 24 	lds	r24, 0x2491
    96a6:	88 23       	and	r24, r24
    96a8:	49 f0       	breq	.+18     	; 0x96bc <disk_initialize+0xd6>
    96aa:	89 ea       	ldi	r24, 0xA9	; 169
    96ac:	40 e0       	ldi	r20, 0x00	; 0
    96ae:	50 e0       	ldi	r21, 0x00	; 0
    96b0:	60 e0       	ldi	r22, 0x00	; 0
    96b2:	70 e4       	ldi	r23, 0x40	; 64
    96b4:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    96b8:	88 23       	and	r24, r24
    96ba:	99 f7       	brne	.-26     	; 0x96a2 <disk_initialize+0xbc>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    96bc:	80 91 91 24 	lds	r24, 0x2491
    96c0:	88 23       	and	r24, r24
    96c2:	09 f4       	brne	.+2      	; 0x96c6 <disk_initialize+0xe0>
    96c4:	48 c0       	rjmp	.+144    	; 0x9756 <disk_initialize+0x170>
    96c6:	8a e3       	ldi	r24, 0x3A	; 58
    96c8:	40 e0       	ldi	r20, 0x00	; 0
    96ca:	50 e0       	ldi	r21, 0x00	; 0
    96cc:	60 e0       	ldi	r22, 0x00	; 0
    96ce:	70 e0       	ldi	r23, 0x00	; 0
    96d0:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    96d4:	88 23       	and	r24, r24
    96d6:	09 f0       	breq	.+2      	; 0x96da <disk_initialize+0xf4>
    96d8:	3e c0       	rjmp	.+124    	; 0x9756 <disk_initialize+0x170>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    96da:	e0 ec       	ldi	r30, 0xC0	; 192
    96dc:	fa e0       	ldi	r31, 0x0A	; 10
    96de:	9f ef       	ldi	r25, 0xFF	; 255
    96e0:	93 83       	std	Z+3, r25	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    96e2:	80 91 c2 0a 	lds	r24, 0x0AC2
    96e6:	87 ff       	sbrs	r24, 7
    96e8:	fc cf       	rjmp	.-8      	; 0x96e2 <disk_initialize+0xfc>
	return SPIE.DATA;
    96ea:	80 91 c3 0a 	lds	r24, 0x0AC3
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    96ee:	d7 01       	movw	r26, r14
    96f0:	8d 93       	st	X+, r24
    96f2:	7d 01       	movw	r14, r26
    96f4:	a0 17       	cp	r26, r16
    96f6:	b1 07       	cpc	r27, r17
    96f8:	99 f7       	brne	.-26     	; 0x96e0 <disk_initialize+0xfa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    96fa:	89 81       	ldd	r24, Y+1	; 0x01
    96fc:	86 fd       	sbrc	r24, 6
    96fe:	02 c0       	rjmp	.+4      	; 0x9704 <disk_initialize+0x11e>
    9700:	14 e0       	ldi	r17, 0x04	; 4
    9702:	2a c0       	rjmp	.+84     	; 0x9758 <disk_initialize+0x172>
    9704:	1c e0       	ldi	r17, 0x0C	; 12
    9706:	28 c0       	rjmp	.+80     	; 0x9758 <disk_initialize+0x172>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    9708:	89 ea       	ldi	r24, 0xA9	; 169
    970a:	40 e0       	ldi	r20, 0x00	; 0
    970c:	50 e0       	ldi	r21, 0x00	; 0
    970e:	60 e0       	ldi	r22, 0x00	; 0
    9710:	70 e0       	ldi	r23, 0x00	; 0
    9712:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9716:	82 30       	cpi	r24, 0x02	; 2
    9718:	18 f0       	brcs	.+6      	; 0x9720 <disk_initialize+0x13a>
    971a:	01 e0       	ldi	r16, 0x01	; 1
    971c:	11 e0       	ldi	r17, 0x01	; 1
    971e:	02 c0       	rjmp	.+4      	; 0x9724 <disk_initialize+0x13e>
    9720:	09 ea       	ldi	r16, 0xA9	; 169
    9722:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    9724:	80 91 91 24 	lds	r24, 0x2491
    9728:	88 23       	and	r24, r24
    972a:	49 f0       	breq	.+18     	; 0x973e <disk_initialize+0x158>
    972c:	80 2f       	mov	r24, r16
    972e:	40 e0       	ldi	r20, 0x00	; 0
    9730:	50 e0       	ldi	r21, 0x00	; 0
    9732:	60 e0       	ldi	r22, 0x00	; 0
    9734:	70 e0       	ldi	r23, 0x00	; 0
    9736:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    973a:	88 23       	and	r24, r24
    973c:	99 f7       	brne	.-26     	; 0x9724 <disk_initialize+0x13e>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    973e:	80 91 91 24 	lds	r24, 0x2491
    9742:	88 23       	and	r24, r24
    9744:	41 f0       	breq	.+16     	; 0x9756 <disk_initialize+0x170>
    9746:	80 e1       	ldi	r24, 0x10	; 16
    9748:	40 e0       	ldi	r20, 0x00	; 0
    974a:	52 e0       	ldi	r21, 0x02	; 2
    974c:	60 e0       	ldi	r22, 0x00	; 0
    974e:	70 e0       	ldi	r23, 0x00	; 0
    9750:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9754:	81 11       	cpse	r24, r1
    9756:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
    9758:	10 93 93 24 	sts	0x2493, r17
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    975c:	80 e1       	ldi	r24, 0x10	; 16
    975e:	e0 e8       	ldi	r30, 0x80	; 128
    9760:	f6 e0       	ldi	r31, 0x06	; 6
    9762:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9764:	8f ef       	ldi	r24, 0xFF	; 255
    9766:	e0 ec       	ldi	r30, 0xC0	; 192
    9768:	fa e0       	ldi	r31, 0x0A	; 10
    976a:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    976c:	80 91 c2 0a 	lds	r24, 0x0AC2
    9770:	87 ff       	sbrs	r24, 7
    9772:	fc cf       	rjmp	.-8      	; 0x976c <disk_initialize+0x186>
	return SPIE.DATA;
    9774:	80 91 c3 0a 	lds	r24, 0x0AC3
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    9778:	11 23       	and	r17, r17
    977a:	49 f0       	breq	.+18     	; 0x978e <disk_initialize+0x1a8>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    977c:	80 91 f3 23 	lds	r24, 0x23F3
    9780:	8e 7f       	andi	r24, 0xFE	; 254
    9782:	80 93 f3 23 	sts	0x23F3, r24
		FCLK_FAST();
    9786:	80 ed       	ldi	r24, 0xD0	; 208
    9788:	80 93 c0 0a 	sts	0x0AC0, r24
    978c:	02 c0       	rjmp	.+4      	; 0x9792 <disk_initialize+0x1ac>
	} else {			/* Initialization failed */
		power_off();
    978e:	0e 94 df 49 	call	0x93be	; 0x93be <power_off>
	}

 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
	return Stat;
    9792:	80 91 f3 23 	lds	r24, 0x23F3
}
    9796:	24 96       	adiw	r28, 0x04	; 4
    9798:	e6 e0       	ldi	r30, 0x06	; 6
    979a:	0c 94 b6 51 	jmp	0xa36c	; 0xa36c <__epilogue_restores__+0x18>

0000979e <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    979e:	88 23       	and	r24, r24
    97a0:	11 f0       	breq	.+4      	; 0x97a6 <disk_status+0x8>
    97a2:	81 e0       	ldi	r24, 0x01	; 1
    97a4:	08 95       	ret
	return Stat;
    97a6:	80 91 f3 23 	lds	r24, 0x23F3
}
    97aa:	08 95       	ret

000097ac <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    97ac:	0f 93       	push	r16
    97ae:	cf 93       	push	r28
    97b0:	df 93       	push	r29
    97b2:	eb 01       	movw	r28, r22
	if (drv || !count) return RES_PARERR;
    97b4:	88 23       	and	r24, r24
    97b6:	09 f0       	breq	.+2      	; 0x97ba <disk_read+0xe>
    97b8:	57 c0       	rjmp	.+174    	; 0x9868 <disk_read+0xbc>
    97ba:	00 23       	and	r16, r16
    97bc:	09 f4       	brne	.+2      	; 0x97c0 <disk_read+0x14>
    97be:	54 c0       	rjmp	.+168    	; 0x9868 <disk_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    97c0:	80 91 f3 23 	lds	r24, 0x23F3
    97c4:	80 ff       	sbrs	r24, 0
    97c6:	03 c0       	rjmp	.+6      	; 0x97ce <disk_read+0x22>
    97c8:	23 e0       	ldi	r18, 0x03	; 3
    97ca:	30 e0       	ldi	r19, 0x00	; 0
    97cc:	4f c0       	rjmp	.+158    	; 0x986c <disk_read+0xc0>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    97ce:	80 91 93 24 	lds	r24, 0x2493
    97d2:	83 fd       	sbrc	r24, 3
    97d4:	07 c0       	rjmp	.+14     	; 0x97e4 <disk_read+0x38>
    97d6:	69 e0       	ldi	r22, 0x09	; 9
    97d8:	22 0f       	add	r18, r18
    97da:	33 1f       	adc	r19, r19
    97dc:	44 1f       	adc	r20, r20
    97de:	55 1f       	adc	r21, r21
    97e0:	6a 95       	dec	r22
    97e2:	d1 f7       	brne	.-12     	; 0x97d8 <disk_read+0x2c>

	if (count == 1) {	/* Single block read */
    97e4:	01 30       	cpi	r16, 0x01	; 1
    97e6:	89 f4       	brne	.+34     	; 0x980a <disk_read+0x5e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    97e8:	81 e1       	ldi	r24, 0x11	; 17
    97ea:	ba 01       	movw	r22, r20
    97ec:	a9 01       	movw	r20, r18
    97ee:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    97f2:	88 23       	and	r24, r24
    97f4:	21 f5       	brne	.+72     	; 0x983e <disk_read+0x92>
    97f6:	ce 01       	movw	r24, r28
    97f8:	60 e0       	ldi	r22, 0x00	; 0
    97fa:	72 e0       	ldi	r23, 0x02	; 2
    97fc:	0e 94 0a 4a 	call	0x9414	; 0x9414 <rcvr_datablock>
    9800:	00 e0       	ldi	r16, 0x00	; 0
    9802:	89 2b       	or	r24, r25
    9804:	e1 f4       	brne	.+56     	; 0x983e <disk_read+0x92>
    9806:	01 e0       	ldi	r16, 0x01	; 1
    9808:	1a c0       	rjmp	.+52     	; 0x983e <disk_read+0x92>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    980a:	82 e1       	ldi	r24, 0x12	; 18
    980c:	ba 01       	movw	r22, r20
    980e:	a9 01       	movw	r20, r18
    9810:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9814:	88 23       	and	r24, r24
    9816:	99 f4       	brne	.+38     	; 0x983e <disk_read+0x92>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    9818:	ce 01       	movw	r24, r28
    981a:	60 e0       	ldi	r22, 0x00	; 0
    981c:	72 e0       	ldi	r23, 0x02	; 2
    981e:	0e 94 0a 4a 	call	0x9414	; 0x9414 <rcvr_datablock>
    9822:	89 2b       	or	r24, r25
    9824:	29 f0       	breq	.+10     	; 0x9830 <disk_read+0x84>
				buff += 512;
			} while (--count);
    9826:	01 50       	subi	r16, 0x01	; 1
    9828:	19 f0       	breq	.+6      	; 0x9830 <disk_read+0x84>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    982a:	c0 50       	subi	r28, 0x00	; 0
    982c:	de 4f       	sbci	r29, 0xFE	; 254
    982e:	f4 cf       	rjmp	.-24     	; 0x9818 <disk_read+0x6c>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    9830:	8c e0       	ldi	r24, 0x0C	; 12
    9832:	40 e0       	ldi	r20, 0x00	; 0
    9834:	50 e0       	ldi	r21, 0x00	; 0
    9836:	60 e0       	ldi	r22, 0x00	; 0
    9838:	70 e0       	ldi	r23, 0x00	; 0
    983a:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    983e:	80 e1       	ldi	r24, 0x10	; 16
    9840:	e0 e8       	ldi	r30, 0x80	; 128
    9842:	f6 e0       	ldi	r31, 0x06	; 6
    9844:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9846:	8f ef       	ldi	r24, 0xFF	; 255
    9848:	e0 ec       	ldi	r30, 0xC0	; 192
    984a:	fa e0       	ldi	r31, 0x0A	; 10
    984c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    984e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9852:	87 ff       	sbrs	r24, 7
    9854:	fc cf       	rjmp	.-8      	; 0x984e <disk_read+0xa2>
	return SPIE.DATA;
    9856:	80 91 c3 0a 	lds	r24, 0x0AC3
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    985a:	20 e0       	ldi	r18, 0x00	; 0
    985c:	30 e0       	ldi	r19, 0x00	; 0
    985e:	00 23       	and	r16, r16
    9860:	29 f0       	breq	.+10     	; 0x986c <disk_read+0xc0>
    9862:	21 e0       	ldi	r18, 0x01	; 1
    9864:	30 e0       	ldi	r19, 0x00	; 0
    9866:	02 c0       	rjmp	.+4      	; 0x986c <disk_read+0xc0>
    9868:	24 e0       	ldi	r18, 0x04	; 4
    986a:	30 e0       	ldi	r19, 0x00	; 0
}
    986c:	c9 01       	movw	r24, r18
    986e:	df 91       	pop	r29
    9870:	cf 91       	pop	r28
    9872:	0f 91       	pop	r16
    9874:	08 95       	ret

00009876 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    9876:	a0 e1       	ldi	r26, 0x10	; 16
    9878:	b0 e0       	ldi	r27, 0x00	; 0
    987a:	e1 e4       	ldi	r30, 0x41	; 65
    987c:	fc e4       	ldi	r31, 0x4C	; 76
    987e:	0c 94 9b 51 	jmp	0xa336	; 0xa336 <__prologue_saves__+0x1a>
    9882:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
    9884:	88 23       	and	r24, r24
    9886:	09 f0       	breq	.+2      	; 0x988a <disk_ioctl+0x14>
    9888:	ab c1       	rjmp	.+854    	; 0x9be0 <disk_ioctl+0x36a>

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    988a:	65 30       	cpi	r22, 0x05	; 5
    988c:	81 f4       	brne	.+32     	; 0x98ae <disk_ioctl+0x38>
		switch (ptr[0]) {
    988e:	fa 01       	movw	r30, r20
    9890:	80 81       	ld	r24, Z
    9892:	88 23       	and	r24, r24
    9894:	21 f0       	breq	.+8      	; 0x989e <disk_ioctl+0x28>
    9896:	81 30       	cpi	r24, 0x01	; 1
    9898:	09 f0       	breq	.+2      	; 0x989c <disk_ioctl+0x26>
    989a:	a2 c1       	rjmp	.+836    	; 0x9be0 <disk_ioctl+0x36a>
    989c:	03 c0       	rjmp	.+6      	; 0x98a4 <disk_ioctl+0x2e>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    989e:	0e 94 df 49 	call	0x93be	; 0x93be <power_off>
    98a2:	02 c0       	rjmp	.+4      	; 0x98a8 <disk_ioctl+0x32>
			res = RES_OK;
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    98a4:	fa 01       	movw	r30, r20
    98a6:	81 83       	std	Z+1, r24	; 0x01
    98a8:	20 e0       	ldi	r18, 0x00	; 0
    98aa:	30 e0       	ldi	r19, 0x00	; 0
    98ac:	9b c1       	rjmp	.+822    	; 0x9be4 <disk_ioctl+0x36e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    98ae:	80 91 f3 23 	lds	r24, 0x23F3
    98b2:	80 ff       	sbrs	r24, 0
    98b4:	03 c0       	rjmp	.+6      	; 0x98bc <disk_ioctl+0x46>
    98b6:	23 e0       	ldi	r18, 0x03	; 3
    98b8:	30 e0       	ldi	r19, 0x00	; 0
    98ba:	94 c1       	rjmp	.+808    	; 0x9be4 <disk_ioctl+0x36e>

		switch (ctrl) {
    98bc:	e6 2f       	mov	r30, r22
    98be:	f0 e0       	ldi	r31, 0x00	; 0
    98c0:	ef 30       	cpi	r30, 0x0F	; 15
    98c2:	f1 05       	cpc	r31, r1
    98c4:	20 f4       	brcc	.+8      	; 0x98ce <disk_ioctl+0x58>
    98c6:	e5 5f       	subi	r30, 0xF5	; 245
    98c8:	fe 4f       	sbci	r31, 0xFE	; 254
    98ca:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    98ce:	24 e0       	ldi	r18, 0x04	; 4
    98d0:	30 e0       	ldi	r19, 0x00	; 0
    98d2:	77 c1       	rjmp	.+750    	; 0x9bc2 <disk_ioctl+0x34c>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    98d4:	0e 94 a9 49 	call	0x9352	; 0x9352 <select>
    98d8:	89 2b       	or	r24, r25
    98da:	09 f4       	brne	.+2      	; 0x98de <disk_ioctl+0x68>
    98dc:	70 c1       	rjmp	.+736    	; 0x9bbe <disk_ioctl+0x348>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    98de:	80 e1       	ldi	r24, 0x10	; 16
    98e0:	e0 e8       	ldi	r30, 0x80	; 128
    98e2:	f6 e0       	ldi	r31, 0x06	; 6
    98e4:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    98e6:	8f ef       	ldi	r24, 0xFF	; 255
    98e8:	e0 ec       	ldi	r30, 0xC0	; 192
    98ea:	fa e0       	ldi	r31, 0x0A	; 10
    98ec:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    98ee:	80 91 c2 0a 	lds	r24, 0x0AC2
    98f2:	87 ff       	sbrs	r24, 7
    98f4:	fc cf       	rjmp	.-8      	; 0x98ee <disk_ioctl+0x78>
	return SPIE.DATA;
    98f6:	80 91 c3 0a 	lds	r24, 0x0AC3
    98fa:	0e c1       	rjmp	.+540    	; 0x9b18 <disk_ioctl+0x2a2>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    98fc:	89 e0       	ldi	r24, 0x09	; 9
    98fe:	40 e0       	ldi	r20, 0x00	; 0
    9900:	50 e0       	ldi	r21, 0x00	; 0
    9902:	60 e0       	ldi	r22, 0x00	; 0
    9904:	70 e0       	ldi	r23, 0x00	; 0
    9906:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    990a:	88 23       	and	r24, r24
    990c:	09 f0       	breq	.+2      	; 0x9910 <disk_ioctl+0x9a>
    990e:	57 c1       	rjmp	.+686    	; 0x9bbe <disk_ioctl+0x348>
    9910:	ce 01       	movw	r24, r28
    9912:	01 96       	adiw	r24, 0x01	; 1
    9914:	60 e1       	ldi	r22, 0x10	; 16
    9916:	70 e0       	ldi	r23, 0x00	; 0
    9918:	0e 94 0a 4a 	call	0x9414	; 0x9414 <rcvr_datablock>
    991c:	89 2b       	or	r24, r25
    991e:	09 f4       	brne	.+2      	; 0x9922 <disk_ioctl+0xac>
    9920:	4e c1       	rjmp	.+668    	; 0x9bbe <disk_ioctl+0x348>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    9922:	89 81       	ldd	r24, Y+1	; 0x01
    9924:	82 95       	swap	r24
    9926:	86 95       	lsr	r24
    9928:	86 95       	lsr	r24
    992a:	83 70       	andi	r24, 0x03	; 3
    992c:	28 85       	ldd	r18, Y+8	; 0x08
    992e:	69 85       	ldd	r22, Y+9	; 0x09
    9930:	7a 85       	ldd	r23, Y+10	; 0x0a
    9932:	81 30       	cpi	r24, 0x01	; 1
    9934:	01 f5       	brne	.+64     	; 0x9976 <disk_ioctl+0x100>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
    9936:	30 e0       	ldi	r19, 0x00	; 0
    9938:	40 e0       	ldi	r20, 0x00	; 0
    993a:	50 e0       	ldi	r21, 0x00	; 0
    993c:	2f 73       	andi	r18, 0x3F	; 63
    993e:	30 70       	andi	r19, 0x00	; 0
    9940:	40 70       	andi	r20, 0x00	; 0
    9942:	50 70       	andi	r21, 0x00	; 0
    9944:	a9 01       	movw	r20, r18
    9946:	33 27       	eor	r19, r19
    9948:	22 27       	eor	r18, r18
    994a:	2f 5f       	subi	r18, 0xFF	; 255
    994c:	3f 4f       	sbci	r19, 0xFF	; 255
    994e:	4f 4f       	sbci	r20, 0xFF	; 255
    9950:	5f 4f       	sbci	r21, 0xFF	; 255
    9952:	96 2f       	mov	r25, r22
    9954:	80 e0       	ldi	r24, 0x00	; 0
    9956:	87 0f       	add	r24, r23
    9958:	91 1d       	adc	r25, r1
    995a:	a0 e0       	ldi	r26, 0x00	; 0
    995c:	b0 e0       	ldi	r27, 0x00	; 0
    995e:	28 0f       	add	r18, r24
    9960:	39 1f       	adc	r19, r25
    9962:	4a 1f       	adc	r20, r26
    9964:	5b 1f       	adc	r21, r27
    9966:	8a e0       	ldi	r24, 0x0A	; 10
    9968:	22 0f       	add	r18, r18
    996a:	33 1f       	adc	r19, r19
    996c:	44 1f       	adc	r20, r20
    996e:	55 1f       	adc	r21, r21
    9970:	8a 95       	dec	r24
    9972:	d1 f7       	brne	.-12     	; 0x9968 <disk_ioctl+0xf2>
    9974:	2d c0       	rjmp	.+90     	; 0x99d0 <disk_ioctl+0x15a>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
    9976:	62 95       	swap	r22
    9978:	66 95       	lsr	r22
    997a:	66 95       	lsr	r22
    997c:	63 70       	andi	r22, 0x03	; 3
    997e:	30 e0       	ldi	r19, 0x00	; 0
    9980:	22 0f       	add	r18, r18
    9982:	33 1f       	adc	r19, r19
    9984:	22 0f       	add	r18, r18
    9986:	33 1f       	adc	r19, r19
    9988:	26 0f       	add	r18, r22
    998a:	31 1d       	adc	r19, r1
    998c:	2f 5f       	subi	r18, 0xFF	; 255
    998e:	3f 4f       	sbci	r19, 0xFF	; 255
    9990:	8f 81       	ldd	r24, Y+7	; 0x07
    9992:	90 e0       	ldi	r25, 0x00	; 0
    9994:	83 70       	andi	r24, 0x03	; 3
    9996:	90 70       	andi	r25, 0x00	; 0
    9998:	98 2f       	mov	r25, r24
    999a:	88 27       	eor	r24, r24
    999c:	99 0f       	add	r25, r25
    999e:	99 0f       	add	r25, r25
    99a0:	28 0f       	add	r18, r24
    99a2:	39 1f       	adc	r19, r25
    99a4:	40 e0       	ldi	r20, 0x00	; 0
    99a6:	50 e0       	ldi	r21, 0x00	; 0
    99a8:	8e 81       	ldd	r24, Y+6	; 0x06
    99aa:	8f 70       	andi	r24, 0x0F	; 15
    99ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    99ae:	66 1f       	adc	r22, r22
    99b0:	66 27       	eor	r22, r22
    99b2:	66 1f       	adc	r22, r22
    99b4:	86 0f       	add	r24, r22
    99b6:	8e 5f       	subi	r24, 0xFE	; 254
    99b8:	73 70       	andi	r23, 0x03	; 3
    99ba:	77 0f       	add	r23, r23
    99bc:	87 0f       	add	r24, r23
    99be:	90 e0       	ldi	r25, 0x00	; 0
    99c0:	09 97       	sbiw	r24, 0x09	; 9
    99c2:	04 c0       	rjmp	.+8      	; 0x99cc <disk_ioctl+0x156>
    99c4:	22 0f       	add	r18, r18
    99c6:	33 1f       	adc	r19, r19
    99c8:	44 1f       	adc	r20, r20
    99ca:	55 1f       	adc	r21, r21
    99cc:	8a 95       	dec	r24
    99ce:	d2 f7       	brpl	.-12     	; 0x99c4 <disk_ioctl+0x14e>
    99d0:	f8 01       	movw	r30, r16
    99d2:	20 83       	st	Z, r18
    99d4:	31 83       	std	Z+1, r19	; 0x01
    99d6:	42 83       	std	Z+2, r20	; 0x02
    99d8:	53 83       	std	Z+3, r21	; 0x03
    99da:	9e c0       	rjmp	.+316    	; 0x9b18 <disk_ioctl+0x2a2>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    99dc:	80 e0       	ldi	r24, 0x00	; 0
    99de:	92 e0       	ldi	r25, 0x02	; 2
    99e0:	fa 01       	movw	r30, r20
    99e2:	80 83       	st	Z, r24
    99e4:	91 83       	std	Z+1, r25	; 0x01
    99e6:	98 c0       	rjmp	.+304    	; 0x9b18 <disk_ioctl+0x2a2>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    99e8:	80 91 93 24 	lds	r24, 0x2493
    99ec:	f8 2e       	mov	r15, r24
    99ee:	82 ff       	sbrs	r24, 2
    99f0:	39 c0       	rjmp	.+114    	; 0x9a64 <disk_ioctl+0x1ee>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    99f2:	8d e8       	ldi	r24, 0x8D	; 141
    99f4:	40 e0       	ldi	r20, 0x00	; 0
    99f6:	50 e0       	ldi	r21, 0x00	; 0
    99f8:	60 e0       	ldi	r22, 0x00	; 0
    99fa:	70 e0       	ldi	r23, 0x00	; 0
    99fc:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9a00:	88 23       	and	r24, r24
    9a02:	09 f0       	breq	.+2      	; 0x9a06 <disk_ioctl+0x190>
    9a04:	dc c0       	rjmp	.+440    	; 0x9bbe <disk_ioctl+0x348>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9a06:	8f ef       	ldi	r24, 0xFF	; 255
    9a08:	e0 ec       	ldi	r30, 0xC0	; 192
    9a0a:	fa e0       	ldi	r31, 0x0A	; 10
    9a0c:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9a0e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9a12:	87 ff       	sbrs	r24, 7
    9a14:	fc cf       	rjmp	.-8      	; 0x9a0e <disk_ioctl+0x198>
	return SPIE.DATA;
    9a16:	80 91 c3 0a 	lds	r24, 0x0AC3

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					xchg_spi(0xFF);
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    9a1a:	ce 01       	movw	r24, r28
    9a1c:	01 96       	adiw	r24, 0x01	; 1
    9a1e:	60 e1       	ldi	r22, 0x10	; 16
    9a20:	70 e0       	ldi	r23, 0x00	; 0
    9a22:	0e 94 0a 4a 	call	0x9414	; 0x9414 <rcvr_datablock>
    9a26:	89 2b       	or	r24, r25
    9a28:	09 f4       	brne	.+2      	; 0x9a2c <disk_ioctl+0x1b6>
    9a2a:	c9 c0       	rjmp	.+402    	; 0x9bbe <disk_ioctl+0x348>
    9a2c:	90 e3       	ldi	r25, 0x30	; 48
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9a2e:	e0 ec       	ldi	r30, 0xC0	; 192
    9a30:	fa e0       	ldi	r31, 0x0A	; 10
    9a32:	2f ef       	ldi	r18, 0xFF	; 255
    9a34:	23 83       	std	Z+3, r18	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9a36:	80 91 c2 0a 	lds	r24, 0x0AC2
    9a3a:	87 ff       	sbrs	r24, 7
    9a3c:	fc cf       	rjmp	.-8      	; 0x9a36 <disk_ioctl+0x1c0>
	return SPIE.DATA;
    9a3e:	80 91 c3 0a 	lds	r24, 0x0AC3
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					xchg_spi(0xFF);
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    9a42:	91 50       	subi	r25, 0x01	; 1
    9a44:	b9 f7       	brne	.-18     	; 0x9a34 <disk_ioctl+0x1be>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    9a46:	2b 85       	ldd	r18, Y+11	; 0x0b
    9a48:	22 95       	swap	r18
    9a4a:	2f 70       	andi	r18, 0x0F	; 15
    9a4c:	80 e1       	ldi	r24, 0x10	; 16
    9a4e:	90 e0       	ldi	r25, 0x00	; 0
    9a50:	a0 e0       	ldi	r26, 0x00	; 0
    9a52:	b0 e0       	ldi	r27, 0x00	; 0
    9a54:	04 c0       	rjmp	.+8      	; 0x9a5e <disk_ioctl+0x1e8>
    9a56:	88 0f       	add	r24, r24
    9a58:	99 1f       	adc	r25, r25
    9a5a:	aa 1f       	adc	r26, r26
    9a5c:	bb 1f       	adc	r27, r27
    9a5e:	2a 95       	dec	r18
    9a60:	d2 f7       	brpl	.-12     	; 0x9a56 <disk_ioctl+0x1e0>
    9a62:	55 c0       	rjmp	.+170    	; 0x9b0e <disk_ioctl+0x298>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    9a64:	89 e0       	ldi	r24, 0x09	; 9
    9a66:	40 e0       	ldi	r20, 0x00	; 0
    9a68:	50 e0       	ldi	r21, 0x00	; 0
    9a6a:	60 e0       	ldi	r22, 0x00	; 0
    9a6c:	70 e0       	ldi	r23, 0x00	; 0
    9a6e:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9a72:	88 23       	and	r24, r24
    9a74:	09 f0       	breq	.+2      	; 0x9a78 <disk_ioctl+0x202>
    9a76:	a3 c0       	rjmp	.+326    	; 0x9bbe <disk_ioctl+0x348>
    9a78:	ce 01       	movw	r24, r28
    9a7a:	01 96       	adiw	r24, 0x01	; 1
    9a7c:	60 e1       	ldi	r22, 0x10	; 16
    9a7e:	70 e0       	ldi	r23, 0x00	; 0
    9a80:	0e 94 0a 4a 	call	0x9414	; 0x9414 <rcvr_datablock>
    9a84:	89 2b       	or	r24, r25
    9a86:	09 f4       	brne	.+2      	; 0x9a8a <disk_ioctl+0x214>
    9a88:	9a c0       	rjmp	.+308    	; 0x9bbe <disk_ioctl+0x348>
    9a8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    9a8c:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDv1 */
    9a8e:	f1 fe       	sbrs	r15, 1
    9a90:	1b c0       	rjmp	.+54     	; 0x9ac8 <disk_ioctl+0x252>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    9a92:	88 1f       	adc	r24, r24
    9a94:	88 27       	eor	r24, r24
    9a96:	88 1f       	adc	r24, r24
    9a98:	90 e0       	ldi	r25, 0x00	; 0
    9a9a:	01 96       	adiw	r24, 0x01	; 1
    9a9c:	24 2f       	mov	r18, r20
    9a9e:	30 e0       	ldi	r19, 0x00	; 0
    9aa0:	2f 73       	andi	r18, 0x3F	; 63
    9aa2:	30 70       	andi	r19, 0x00	; 0
    9aa4:	22 0f       	add	r18, r18
    9aa6:	33 1f       	adc	r19, r19
    9aa8:	82 0f       	add	r24, r18
    9aaa:	93 1f       	adc	r25, r19
    9aac:	2e 85       	ldd	r18, Y+14	; 0x0e
    9aae:	22 95       	swap	r18
    9ab0:	26 95       	lsr	r18
    9ab2:	26 95       	lsr	r18
    9ab4:	23 70       	andi	r18, 0x03	; 3
    9ab6:	30 e0       	ldi	r19, 0x00	; 0
    9ab8:	21 50       	subi	r18, 0x01	; 1
    9aba:	30 40       	sbci	r19, 0x00	; 0
    9abc:	02 c0       	rjmp	.+4      	; 0x9ac2 <disk_ioctl+0x24c>
    9abe:	88 0f       	add	r24, r24
    9ac0:	99 1f       	adc	r25, r25
    9ac2:	2a 95       	dec	r18
    9ac4:	e2 f7       	brpl	.-8      	; 0x9abe <disk_ioctl+0x248>
    9ac6:	21 c0       	rjmp	.+66     	; 0x9b0a <disk_ioctl+0x294>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    9ac8:	28 2f       	mov	r18, r24
    9aca:	30 e0       	ldi	r19, 0x00	; 0
    9acc:	23 70       	andi	r18, 0x03	; 3
    9ace:	30 70       	andi	r19, 0x00	; 0
    9ad0:	e3 e0       	ldi	r30, 0x03	; 3
    9ad2:	22 0f       	add	r18, r18
    9ad4:	33 1f       	adc	r19, r19
    9ad6:	ea 95       	dec	r30
    9ad8:	e1 f7       	brne	.-8      	; 0x9ad2 <disk_ioctl+0x25c>
    9ada:	82 95       	swap	r24
    9adc:	86 95       	lsr	r24
    9ade:	87 70       	andi	r24, 0x07	; 7
    9ae0:	28 0f       	add	r18, r24
    9ae2:	31 1d       	adc	r19, r1
    9ae4:	2f 5f       	subi	r18, 0xFF	; 255
    9ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    9ae8:	84 2f       	mov	r24, r20
    9aea:	90 e0       	ldi	r25, 0x00	; 0
    9aec:	8c 77       	andi	r24, 0x7C	; 124
    9aee:	90 70       	andi	r25, 0x00	; 0
    9af0:	95 95       	asr	r25
    9af2:	87 95       	ror	r24
    9af4:	95 95       	asr	r25
    9af6:	87 95       	ror	r24
    9af8:	01 96       	adiw	r24, 0x01	; 1
    9afa:	ac 01       	movw	r20, r24
    9afc:	24 9f       	mul	r18, r20
    9afe:	c0 01       	movw	r24, r0
    9b00:	25 9f       	mul	r18, r21
    9b02:	90 0d       	add	r25, r0
    9b04:	34 9f       	mul	r19, r20
    9b06:	90 0d       	add	r25, r0
    9b08:	11 24       	eor	r1, r1
    9b0a:	a0 e0       	ldi	r26, 0x00	; 0
    9b0c:	b0 e0       	ldi	r27, 0x00	; 0
    9b0e:	f8 01       	movw	r30, r16
    9b10:	80 83       	st	Z, r24
    9b12:	91 83       	std	Z+1, r25	; 0x01
    9b14:	a2 83       	std	Z+2, r26	; 0x02
    9b16:	b3 83       	std	Z+3, r27	; 0x03
    9b18:	20 e0       	ldi	r18, 0x00	; 0
    9b1a:	30 e0       	ldi	r19, 0x00	; 0
    9b1c:	52 c0       	rjmp	.+164    	; 0x9bc2 <disk_ioctl+0x34c>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    9b1e:	80 91 93 24 	lds	r24, 0x2493
    9b22:	fa 01       	movw	r30, r20
    9b24:	80 83       	st	Z, r24
    9b26:	f8 cf       	rjmp	.-16     	; 0x9b18 <disk_ioctl+0x2a2>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    9b28:	89 e0       	ldi	r24, 0x09	; 9
    9b2a:	01 c0       	rjmp	.+2      	; 0x9b2e <disk_ioctl+0x2b8>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    9b2c:	8a e0       	ldi	r24, 0x0A	; 10
    9b2e:	40 e0       	ldi	r20, 0x00	; 0
    9b30:	50 e0       	ldi	r21, 0x00	; 0
    9b32:	60 e0       	ldi	r22, 0x00	; 0
    9b34:	70 e0       	ldi	r23, 0x00	; 0
    9b36:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9b3a:	88 23       	and	r24, r24
    9b3c:	09 f0       	breq	.+2      	; 0x9b40 <disk_ioctl+0x2ca>
    9b3e:	3f c0       	rjmp	.+126    	; 0x9bbe <disk_ioctl+0x348>
    9b40:	c8 01       	movw	r24, r16
    9b42:	60 e1       	ldi	r22, 0x10	; 16
    9b44:	70 e0       	ldi	r23, 0x00	; 0
    9b46:	35 c0       	rjmp	.+106    	; 0x9bb2 <disk_ioctl+0x33c>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    9b48:	8a e3       	ldi	r24, 0x3A	; 58
    9b4a:	40 e0       	ldi	r20, 0x00	; 0
    9b4c:	50 e0       	ldi	r21, 0x00	; 0
    9b4e:	60 e0       	ldi	r22, 0x00	; 0
    9b50:	70 e0       	ldi	r23, 0x00	; 0
    9b52:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9b56:	88 23       	and	r24, r24
    9b58:	91 f5       	brne	.+100    	; 0x9bbe <disk_ioctl+0x348>
    9b5a:	f8 01       	movw	r30, r16
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9b5c:	a0 ec       	ldi	r26, 0xC0	; 192
    9b5e:	ba e0       	ldi	r27, 0x0A	; 10
    9b60:	9f ef       	ldi	r25, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    9b62:	98 01       	movw	r18, r16
    9b64:	2d 5f       	subi	r18, 0xFD	; 253
    9b66:	3f 4f       	sbci	r19, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9b68:	13 96       	adiw	r26, 0x03	; 3
    9b6a:	9c 93       	st	X, r25
    9b6c:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9b6e:	80 91 c2 0a 	lds	r24, 0x0AC2
    9b72:	87 ff       	sbrs	r24, 7
    9b74:	fc cf       	rjmp	.-8      	; 0x9b6e <disk_ioctl+0x2f8>
	return SPIE.DATA;
    9b76:	80 91 c3 0a 	lds	r24, 0x0AC3
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    9b7a:	80 83       	st	Z, r24
    9b7c:	e2 17       	cp	r30, r18
    9b7e:	f3 07       	cpc	r31, r19
    9b80:	59 f2       	breq	.-106    	; 0x9b18 <disk_ioctl+0x2a2>
    9b82:	31 96       	adiw	r30, 0x01	; 1
    9b84:	f1 cf       	rjmp	.-30     	; 0x9b68 <disk_ioctl+0x2f2>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    9b86:	8d e8       	ldi	r24, 0x8D	; 141
    9b88:	40 e0       	ldi	r20, 0x00	; 0
    9b8a:	50 e0       	ldi	r21, 0x00	; 0
    9b8c:	60 e0       	ldi	r22, 0x00	; 0
    9b8e:	70 e0       	ldi	r23, 0x00	; 0
    9b90:	0e 94 5a 4a 	call	0x94b4	; 0x94b4 <send_cmd>
    9b94:	88 23       	and	r24, r24
    9b96:	99 f4       	brne	.+38     	; 0x9bbe <disk_ioctl+0x348>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9b98:	8f ef       	ldi	r24, 0xFF	; 255
    9b9a:	e0 ec       	ldi	r30, 0xC0	; 192
    9b9c:	fa e0       	ldi	r31, 0x0A	; 10
    9b9e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9ba0:	80 91 c2 0a 	lds	r24, 0x0AC2
    9ba4:	87 ff       	sbrs	r24, 7
    9ba6:	fc cf       	rjmp	.-8      	; 0x9ba0 <disk_ioctl+0x32a>
	return SPIE.DATA;
    9ba8:	80 91 c3 0a 	lds	r24, 0x0AC3
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
    9bac:	c8 01       	movw	r24, r16
    9bae:	60 e4       	ldi	r22, 0x40	; 64
    9bb0:	70 e0       	ldi	r23, 0x00	; 0
    9bb2:	0e 94 0a 4a 	call	0x9414	; 0x9414 <rcvr_datablock>
    9bb6:	20 e0       	ldi	r18, 0x00	; 0
    9bb8:	30 e0       	ldi	r19, 0x00	; 0
    9bba:	89 2b       	or	r24, r25
    9bbc:	11 f4       	brne	.+4      	; 0x9bc2 <disk_ioctl+0x34c>
    9bbe:	21 e0       	ldi	r18, 0x01	; 1
    9bc0:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    9bc2:	80 e1       	ldi	r24, 0x10	; 16
    9bc4:	e0 e8       	ldi	r30, 0x80	; 128
    9bc6:	f6 e0       	ldi	r31, 0x06	; 6
    9bc8:	85 83       	std	Z+5, r24	; 0x05
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    9bca:	8f ef       	ldi	r24, 0xFF	; 255
    9bcc:	e0 ec       	ldi	r30, 0xC0	; 192
    9bce:	fa e0       	ldi	r31, 0x0A	; 10
    9bd0:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    9bd2:	80 91 c2 0a 	lds	r24, 0x0AC2
    9bd6:	87 ff       	sbrs	r24, 7
    9bd8:	fc cf       	rjmp	.-8      	; 0x9bd2 <disk_ioctl+0x35c>
	return SPIE.DATA;
    9bda:	80 91 c3 0a 	lds	r24, 0x0AC3
    9bde:	02 c0       	rjmp	.+4      	; 0x9be4 <disk_ioctl+0x36e>
    9be0:	24 e0       	ldi	r18, 0x04	; 4
    9be2:	30 e0       	ldi	r19, 0x00	; 0

		deselect();
	}

	return res;
}
    9be4:	c9 01       	movw	r24, r18
    9be6:	60 96       	adiw	r28, 0x10	; 16
    9be8:	e5 e0       	ldi	r30, 0x05	; 5
    9bea:	0c 94 b7 51 	jmp	0xa36e	; 0xa36e <__epilogue_restores__+0x1a>

00009bee <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    9bee:	80 91 91 24 	lds	r24, 0x2491
	if (n) Timer1 = --n;
    9bf2:	88 23       	and	r24, r24
    9bf4:	19 f0       	breq	.+6      	; 0x9bfc <disk_timerproc+0xe>
    9bf6:	81 50       	subi	r24, 0x01	; 1
    9bf8:	80 93 91 24 	sts	0x2491, r24
	n = Timer2;
    9bfc:	80 91 92 24 	lds	r24, 0x2492
	if (n) Timer2 = --n;
    9c00:	88 23       	and	r24, r24
    9c02:	19 f0       	breq	.+6      	; 0x9c0a <disk_timerproc+0x1c>
    9c04:	81 50       	subi	r24, 0x01	; 1
    9c06:	80 93 92 24 	sts	0x2492, r24

	s = Stat;
    9c0a:	90 91 f3 23 	lds	r25, 0x23F3

	if (SOCKWP)				/* Write protected */
    9c0e:	80 91 e8 06 	lds	r24, 0x06E8
    9c12:	80 ff       	sbrs	r24, 0
    9c14:	02 c0       	rjmp	.+4      	; 0x9c1a <disk_timerproc+0x2c>
		s |= STA_PROTECT;
    9c16:	94 60       	ori	r25, 0x04	; 4
    9c18:	01 c0       	rjmp	.+2      	; 0x9c1c <disk_timerproc+0x2e>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    9c1a:	9b 7f       	andi	r25, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
    9c1c:	80 91 e8 06 	lds	r24, 0x06E8
    9c20:	81 ff       	sbrs	r24, 1
    9c22:	03 c0       	rjmp	.+6      	; 0x9c2a <disk_timerproc+0x3c>
      s |= (STA_NODISK | STA_NOINIT);
    9c24:	89 2f       	mov	r24, r25
    9c26:	83 60       	ori	r24, 0x03	; 3
    9c28:	02 c0       	rjmp	.+4      	; 0x9c2e <disk_timerproc+0x40>
	else					/* Socket empty */
      s &= ~STA_NODISK;
    9c2a:	89 2f       	mov	r24, r25
    9c2c:	8d 7f       	andi	r24, 0xFD	; 253

	Stat = s;				/* Update MMC status */
    9c2e:	80 93 f3 23 	sts	0x23F3, r24
}
    9c32:	08 95       	ret

00009c34 <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    9c34:	1f 92       	push	r1
    9c36:	0f 92       	push	r0
    9c38:	0f b6       	in	r0, 0x3f	; 63
    9c3a:	0f 92       	push	r0
    9c3c:	08 b6       	in	r0, 0x38	; 56
    9c3e:	0f 92       	push	r0
    9c40:	09 b6       	in	r0, 0x39	; 57
    9c42:	0f 92       	push	r0
    9c44:	0b b6       	in	r0, 0x3b	; 59
    9c46:	0f 92       	push	r0
    9c48:	11 24       	eor	r1, r1
    9c4a:	18 be       	out	0x38, r1	; 56
    9c4c:	19 be       	out	0x39, r1	; 57
    9c4e:	1b be       	out	0x3b, r1	; 59
    9c50:	2f 93       	push	r18
    9c52:	3f 93       	push	r19
    9c54:	4f 93       	push	r20
    9c56:	5f 93       	push	r21
    9c58:	6f 93       	push	r22
    9c5a:	7f 93       	push	r23
    9c5c:	8f 93       	push	r24
    9c5e:	9f 93       	push	r25
    9c60:	af 93       	push	r26
    9c62:	bf 93       	push	r27
    9c64:	ef 93       	push	r30
    9c66:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    9c68:	0e 94 f7 4d 	call	0x9bee	; 0x9bee <disk_timerproc>
}
    9c6c:	ff 91       	pop	r31
    9c6e:	ef 91       	pop	r30
    9c70:	bf 91       	pop	r27
    9c72:	af 91       	pop	r26
    9c74:	9f 91       	pop	r25
    9c76:	8f 91       	pop	r24
    9c78:	7f 91       	pop	r23
    9c7a:	6f 91       	pop	r22
    9c7c:	5f 91       	pop	r21
    9c7e:	4f 91       	pop	r20
    9c80:	3f 91       	pop	r19
    9c82:	2f 91       	pop	r18
    9c84:	0f 90       	pop	r0
    9c86:	0b be       	out	0x3b, r0	; 59
    9c88:	0f 90       	pop	r0
    9c8a:	09 be       	out	0x39, r0	; 57
    9c8c:	0f 90       	pop	r0
    9c8e:	08 be       	out	0x38, r0	; 56
    9c90:	0f 90       	pop	r0
    9c92:	0f be       	out	0x3f, r0	; 63
    9c94:	0f 90       	pop	r0
    9c96:	1f 90       	pop	r1
    9c98:	18 95       	reti

00009c9a <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    9c9a:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    9c9c:	8e e1       	ldi	r24, 0x1E	; 30
    9c9e:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    9ca0:	8b e3       	ldi	r24, 0x3B	; 59
    9ca2:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    9ca4:	8b e0       	ldi	r24, 0x0B	; 11
    9ca6:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    9ca8:	83 e0       	ldi	r24, 0x03	; 3
    9caa:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    9cac:	89 e0       	ldi	r24, 0x09	; 9
    9cae:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    9cb0:	89 ed       	ldi	r24, 0xD9	; 217
    9cb2:	97 e0       	ldi	r25, 0x07	; 7
    9cb4:	80 83       	st	Z, r24
    9cb6:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    9cb8:	81 e0       	ldi	r24, 0x01	; 1
    9cba:	90 e0       	ldi	r25, 0x00	; 0
    9cbc:	08 95       	ret

00009cbe <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    9cbe:	81 e0       	ldi	r24, 0x01	; 1
    9cc0:	90 e0       	ldi	r25, 0x00	; 0
    9cc2:	08 95       	ret

00009cc4 <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    9cc4:	81 e0       	ldi	r24, 0x01	; 1
    9cc6:	90 e0       	ldi	r25, 0x00	; 0
    9cc8:	08 95       	ret

00009cca <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    9cca:	6f e6       	ldi	r22, 0x6F	; 111
    9ccc:	7f e5       	ldi	r23, 0x5F	; 95
    9cce:	83 e2       	ldi	r24, 0x23	; 35
    9cd0:	9b e3       	ldi	r25, 0x3B	; 59
    9cd2:	08 95       	ret

00009cd4 <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    9cd4:	1f 92       	push	r1
    9cd6:	0f 92       	push	r0
    9cd8:	0f b6       	in	r0, 0x3f	; 63
    9cda:	0f 92       	push	r0
    9cdc:	08 b6       	in	r0, 0x38	; 56
    9cde:	0f 92       	push	r0
    9ce0:	09 b6       	in	r0, 0x39	; 57
    9ce2:	0f 92       	push	r0
    9ce4:	11 24       	eor	r1, r1
    9ce6:	18 be       	out	0x38, r1	; 56
    9ce8:	19 be       	out	0x39, r1	; 57
    9cea:	8f 93       	push	r24
    9cec:	9f 93       	push	r25
    9cee:	af 93       	push	r26
    9cf0:	bf 93       	push	r27
	ticks++;
    9cf2:	80 91 94 24 	lds	r24, 0x2494
    9cf6:	90 91 95 24 	lds	r25, 0x2495
    9cfa:	a0 91 96 24 	lds	r26, 0x2496
    9cfe:	b0 91 97 24 	lds	r27, 0x2497
    9d02:	01 96       	adiw	r24, 0x01	; 1
    9d04:	a1 1d       	adc	r26, r1
    9d06:	b1 1d       	adc	r27, r1
    9d08:	80 93 94 24 	sts	0x2494, r24
    9d0c:	90 93 95 24 	sts	0x2495, r25
    9d10:	a0 93 96 24 	sts	0x2496, r26
    9d14:	b0 93 97 24 	sts	0x2497, r27
}
    9d18:	bf 91       	pop	r27
    9d1a:	af 91       	pop	r26
    9d1c:	9f 91       	pop	r25
    9d1e:	8f 91       	pop	r24
    9d20:	0f 90       	pop	r0
    9d22:	09 be       	out	0x39, r0	; 57
    9d24:	0f 90       	pop	r0
    9d26:	08 be       	out	0x38, r0	; 56
    9d28:	0f 90       	pop	r0
    9d2a:	0f be       	out	0x3f, r0	; 63
    9d2c:	0f 90       	pop	r0
    9d2e:	1f 90       	pop	r1
    9d30:	18 95       	reti

00009d32 <timer_init>:


void timer_init(void)
{	
	ticks=0;
    9d32:	10 92 94 24 	sts	0x2494, r1
    9d36:	10 92 95 24 	sts	0x2495, r1
    9d3a:	10 92 96 24 	sts	0x2496, r1
    9d3e:	10 92 97 24 	sts	0x2497, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    9d42:	e0 e0       	ldi	r30, 0x00	; 0
    9d44:	fb e0       	ldi	r31, 0x0B	; 11
    9d46:	84 e0       	ldi	r24, 0x04	; 4
    9d48:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    9d4a:	8f e9       	ldi	r24, 0x9F	; 159
    9d4c:	9f e0       	ldi	r25, 0x0F	; 15
    9d4e:	86 a3       	std	Z+38, r24	; 0x26
    9d50:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    9d52:	82 e0       	ldi	r24, 0x02	; 2
    9d54:	86 83       	std	Z+6, r24	; 0x06
}
    9d56:	08 95       	ret

00009d58 <Wait>:

void Wait(uint16_t delay)
{
    9d58:	ef 92       	push	r14
    9d5a:	ff 92       	push	r15
    9d5c:	0f 93       	push	r16
    9d5e:	1f 93       	push	r17
	uint32_t temp=ticks;
    9d60:	e0 90 94 24 	lds	r14, 0x2494
    9d64:	f0 90 95 24 	lds	r15, 0x2495
    9d68:	00 91 96 24 	lds	r16, 0x2496
    9d6c:	10 91 97 24 	lds	r17, 0x2497

	while(ticks - temp < delay);
    9d70:	9c 01       	movw	r18, r24
    9d72:	40 e0       	ldi	r20, 0x00	; 0
    9d74:	50 e0       	ldi	r21, 0x00	; 0
    9d76:	80 91 94 24 	lds	r24, 0x2494
    9d7a:	90 91 95 24 	lds	r25, 0x2495
    9d7e:	a0 91 96 24 	lds	r26, 0x2496
    9d82:	b0 91 97 24 	lds	r27, 0x2497
    9d86:	8e 19       	sub	r24, r14
    9d88:	9f 09       	sbc	r25, r15
    9d8a:	a0 0b       	sbc	r26, r16
    9d8c:	b1 0b       	sbc	r27, r17
    9d8e:	82 17       	cp	r24, r18
    9d90:	93 07       	cpc	r25, r19
    9d92:	a4 07       	cpc	r26, r20
    9d94:	b5 07       	cpc	r27, r21
    9d96:	78 f3       	brcs	.-34     	; 0x9d76 <Wait+0x1e>
}
    9d98:	1f 91       	pop	r17
    9d9a:	0f 91       	pop	r16
    9d9c:	ff 90       	pop	r15
    9d9e:	ef 90       	pop	r14
    9da0:	08 95       	ret

00009da2 <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    9da2:	e0 e4       	ldi	r30, 0x40	; 64
    9da4:	fb e0       	ldi	r31, 0x0B	; 11
    9da6:	85 e0       	ldi	r24, 0x05	; 5
    9da8:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    9daa:	10 a2       	std	Z+32, r1	; 0x20
    9dac:	11 a2       	std	Z+33, r1	; 0x21
}
    9dae:	08 95       	ret

00009db0 <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    9db0:	e0 e4       	ldi	r30, 0x40	; 64
    9db2:	fb e0       	ldi	r31, 0x0B	; 11
    9db4:	20 a1       	ldd	r18, Z+32	; 0x20
    9db6:	31 a1       	ldd	r19, Z+33	; 0x21
    9db8:	22 0f       	add	r18, r18
    9dba:	33 1f       	adc	r19, r19
	return del_t;
}	
    9dbc:	c9 01       	movw	r24, r18
    9dbe:	08 95       	ret

00009dc0 <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    9dc0:	10 92 94 24 	sts	0x2494, r1
    9dc4:	10 92 95 24 	sts	0x2495, r1
    9dc8:	10 92 96 24 	sts	0x2496, r1
    9dcc:	10 92 97 24 	sts	0x2497, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    9dd0:	e0 e0       	ldi	r30, 0x00	; 0
    9dd2:	fb e0       	ldi	r31, 0x0B	; 11
    9dd4:	84 e0       	ldi	r24, 0x04	; 4
    9dd6:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    9dd8:	8f e9       	ldi	r24, 0x9F	; 159
    9dda:	9f e0       	ldi	r25, 0x0F	; 15
    9ddc:	86 a3       	std	Z+38, r24	; 0x26
    9dde:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    9de0:	82 e0       	ldi	r24, 0x02	; 2
    9de2:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    9de4:	10 a2       	std	Z+32, r1	; 0x20
    9de6:	11 a2       	std	Z+33, r1	; 0x21
}
    9de8:	08 95       	ret

00009dea <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    9dea:	20 91 94 24 	lds	r18, 0x2494
    9dee:	30 91 95 24 	lds	r19, 0x2495
    9df2:	40 91 96 24 	lds	r20, 0x2496
    9df6:	50 91 97 24 	lds	r21, 0x2497
	return del_t;
}	
    9dfa:	b9 01       	movw	r22, r18
    9dfc:	ca 01       	movw	r24, r20
    9dfe:	08 95       	ret

00009e00 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    9e00:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9e02:	e0 ec       	ldi	r30, 0xC0	; 192
    9e04:	f1 e0       	ldi	r31, 0x01	; 1
    9e06:	80 91 cf 01 	lds	r24, 0x01CF
    9e0a:	87 fd       	sbrc	r24, 7
    9e0c:	fa cf       	rjmp	.-12     	; 0x9e02 <EEPROM_ReadByte+0x2>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    9e0e:	26 2f       	mov	r18, r22
    9e10:	30 e0       	ldi	r19, 0x00	; 0
    9e12:	2f 71       	andi	r18, 0x1F	; 31
    9e14:	30 70       	andi	r19, 0x00	; 0
    9e16:	89 2f       	mov	r24, r25
    9e18:	90 e0       	ldi	r25, 0x00	; 0
    9e1a:	45 e0       	ldi	r20, 0x05	; 5
    9e1c:	88 0f       	add	r24, r24
    9e1e:	99 1f       	adc	r25, r25
    9e20:	4a 95       	dec	r20
    9e22:	e1 f7       	brne	.-8      	; 0x9e1c <EEPROM_ReadByte+0x1c>
    9e24:	28 2b       	or	r18, r24
    9e26:	39 2b       	or	r19, r25

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    9e28:	20 93 c0 01 	sts	0x01C0, r18
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9e2c:	83 2f       	mov	r24, r19
    9e2e:	8f 71       	andi	r24, 0x1F	; 31
    9e30:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9e32:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    9e34:	86 e0       	ldi	r24, 0x06	; 6
    9e36:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9e38:	eb ec       	ldi	r30, 0xCB	; 203
    9e3a:	f1 e0       	ldi	r31, 0x01	; 1
    9e3c:	21 e0       	ldi	r18, 0x01	; 1
    9e3e:	30 e0       	ldi	r19, 0x00	; 0
    9e40:	88 ed       	ldi	r24, 0xD8	; 216
    9e42:	90 e0       	ldi	r25, 0x00	; 0
    9e44:	84 bf       	out	0x34, r24	; 52
    9e46:	20 83       	st	Z, r18

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();

	return NVM.DATA0;
    9e48:	80 91 c4 01 	lds	r24, 0x01C4
}
    9e4c:	08 95       	ret

00009e4e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9e4e:	80 91 cf 01 	lds	r24, 0x01CF
    9e52:	87 fd       	sbrc	r24, 7
    9e54:	fc cf       	rjmp	.-8      	; 0x9e4e <EEPROM_WaitForNVM>
}
    9e56:	08 95       	ret

00009e58 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9e58:	80 91 cf 01 	lds	r24, 0x01CF
    9e5c:	87 fd       	sbrc	r24, 7
    9e5e:	fc cf       	rjmp	.-8      	; 0x9e58 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    9e60:	80 91 cf 01 	lds	r24, 0x01CF
    9e64:	81 ff       	sbrs	r24, 1
    9e66:	0c c0       	rjmp	.+24     	; 0x9e80 <EEPROM_FlushBuffer+0x28>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    9e68:	86 e3       	ldi	r24, 0x36	; 54
    9e6a:	e0 ec       	ldi	r30, 0xC0	; 192
    9e6c:	f1 e0       	ldi	r31, 0x01	; 1
    9e6e:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9e70:	eb ec       	ldi	r30, 0xCB	; 203
    9e72:	f1 e0       	ldi	r31, 0x01	; 1
    9e74:	21 e0       	ldi	r18, 0x01	; 1
    9e76:	30 e0       	ldi	r19, 0x00	; 0
    9e78:	88 ed       	ldi	r24, 0xD8	; 216
    9e7a:	90 e0       	ldi	r25, 0x00	; 0
    9e7c:	84 bf       	out	0x34, r24	; 52
    9e7e:	20 83       	st	Z, r18
    9e80:	08 95       	ret

00009e82 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    9e82:	df 92       	push	r13
    9e84:	ef 92       	push	r14
    9e86:	ff 92       	push	r15
    9e88:	0f 93       	push	r16
    9e8a:	1f 93       	push	r17
    9e8c:	e8 2e       	mov	r14, r24
    9e8e:	06 2f       	mov	r16, r22
    9e90:	d4 2e       	mov	r13, r20
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    9e92:	0e 94 2c 4f 	call	0x9e58	; 0x9e58 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    9e96:	e0 ec       	ldi	r30, 0xC0	; 192
    9e98:	f1 e0       	ldi	r31, 0x01	; 1
    9e9a:	83 e3       	ldi	r24, 0x33	; 51
    9e9c:	82 87       	std	Z+10, r24	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    9e9e:	10 e0       	ldi	r17, 0x00	; 0
    9ea0:	0f 71       	andi	r16, 0x1F	; 31
    9ea2:	10 70       	andi	r17, 0x00	; 0
    9ea4:	ff 24       	eor	r15, r15
    9ea6:	55 e0       	ldi	r21, 0x05	; 5
    9ea8:	ee 0c       	add	r14, r14
    9eaa:	ff 1c       	adc	r15, r15
    9eac:	5a 95       	dec	r21
    9eae:	e1 f7       	brne	.-8      	; 0x9ea8 <EEPROM_WriteByte+0x26>
    9eb0:	0e 29       	or	r16, r14
    9eb2:	1f 29       	or	r17, r15

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    9eb4:	00 83       	st	Z, r16
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9eb6:	81 2f       	mov	r24, r17
    9eb8:	8f 71       	andi	r24, 0x1F	; 31
    9eba:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9ebc:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    9ebe:	d4 82       	std	Z+4, r13	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    9ec0:	85 e3       	ldi	r24, 0x35	; 53
    9ec2:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9ec4:	eb ec       	ldi	r30, 0xCB	; 203
    9ec6:	f1 e0       	ldi	r31, 0x01	; 1
    9ec8:	21 e0       	ldi	r18, 0x01	; 1
    9eca:	30 e0       	ldi	r19, 0x00	; 0
    9ecc:	88 ed       	ldi	r24, 0xD8	; 216
    9ece:	90 e0       	ldi	r25, 0x00	; 0
    9ed0:	84 bf       	out	0x34, r24	; 52
    9ed2:	20 83       	st	Z, r18
	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    9ed4:	1f 91       	pop	r17
    9ed6:	0f 91       	pop	r16
    9ed8:	ff 90       	pop	r15
    9eda:	ef 90       	pop	r14
    9edc:	df 90       	pop	r13
    9ede:	08 95       	ret

00009ee0 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    9ee0:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9ee2:	e0 ec       	ldi	r30, 0xC0	; 192
    9ee4:	f1 e0       	ldi	r31, 0x01	; 1
    9ee6:	80 91 cf 01 	lds	r24, 0x01CF
    9eea:	87 fd       	sbrc	r24, 7
    9eec:	fa cf       	rjmp	.-12     	; 0x9ee2 <EEPROM_LoadByte+0x2>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    9eee:	83 e3       	ldi	r24, 0x33	; 51
    9ef0:	82 87       	std	Z+10, r24	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    9ef2:	90 93 c0 01 	sts	0x01C0, r25
	NVM.ADDR1 = 0x00;
    9ef6:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    9ef8:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    9efa:	64 83       	std	Z+4, r22	; 0x04
}
    9efc:	08 95       	ret

00009efe <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    9efe:	dc 01       	movw	r26, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9f00:	e0 ec       	ldi	r30, 0xC0	; 192
    9f02:	f1 e0       	ldi	r31, 0x01	; 1
    9f04:	80 91 cf 01 	lds	r24, 0x01CF
    9f08:	87 fd       	sbrc	r24, 7
    9f0a:	fa cf       	rjmp	.-12     	; 0x9f00 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    9f0c:	83 e3       	ldi	r24, 0x33	; 51
    9f0e:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    9f10:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    9f12:	12 82       	std	Z+2, r1	; 0x02
    9f14:	90 e0       	ldi	r25, 0x00	; 0

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		NVM.ADDR0 = i;
    9f16:	90 93 c0 01 	sts	0x01C0, r25
		NVM.DATA0 = *values;
    9f1a:	8d 91       	ld	r24, X+
    9f1c:	84 83       	std	Z+4, r24	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    9f1e:	9f 5f       	subi	r25, 0xFF	; 255
    9f20:	90 32       	cpi	r25, 0x20	; 32
    9f22:	c9 f7       	brne	.-14     	; 0x9f16 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    9f24:	08 95       	ret

00009f26 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    9f26:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9f28:	e0 ec       	ldi	r30, 0xC0	; 192
    9f2a:	f1 e0       	ldi	r31, 0x01	; 1
    9f2c:	80 91 cf 01 	lds	r24, 0x01CF
    9f30:	87 fd       	sbrc	r24, 7
    9f32:	fa cf       	rjmp	.-12     	; 0x9f28 <EEPROM_AtomicWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9f34:	89 2f       	mov	r24, r25
    9f36:	90 e0       	ldi	r25, 0x00	; 0
    9f38:	65 e0       	ldi	r22, 0x05	; 5
    9f3a:	88 0f       	add	r24, r24
    9f3c:	99 1f       	adc	r25, r25
    9f3e:	6a 95       	dec	r22
    9f40:	e1 f7       	brne	.-8      	; 0x9f3a <EEPROM_AtomicWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9f42:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9f46:	89 2f       	mov	r24, r25
    9f48:	8f 71       	andi	r24, 0x1F	; 31
    9f4a:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9f4c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    9f4e:	85 e3       	ldi	r24, 0x35	; 53
    9f50:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9f52:	eb ec       	ldi	r30, 0xCB	; 203
    9f54:	f1 e0       	ldi	r31, 0x01	; 1
    9f56:	21 e0       	ldi	r18, 0x01	; 1
    9f58:	30 e0       	ldi	r19, 0x00	; 0
    9f5a:	88 ed       	ldi	r24, 0xD8	; 216
    9f5c:	90 e0       	ldi	r25, 0x00	; 0
    9f5e:	84 bf       	out	0x34, r24	; 52
    9f60:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC();
}
    9f62:	08 95       	ret

00009f64 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    9f64:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9f66:	e0 ec       	ldi	r30, 0xC0	; 192
    9f68:	f1 e0       	ldi	r31, 0x01	; 1
    9f6a:	80 91 cf 01 	lds	r24, 0x01CF
    9f6e:	87 fd       	sbrc	r24, 7
    9f70:	fa cf       	rjmp	.-12     	; 0x9f66 <EEPROM_ErasePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9f72:	89 2f       	mov	r24, r25
    9f74:	90 e0       	ldi	r25, 0x00	; 0
    9f76:	75 e0       	ldi	r23, 0x05	; 5
    9f78:	88 0f       	add	r24, r24
    9f7a:	99 1f       	adc	r25, r25
    9f7c:	7a 95       	dec	r23
    9f7e:	e1 f7       	brne	.-8      	; 0x9f78 <EEPROM_ErasePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9f80:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9f84:	89 2f       	mov	r24, r25
    9f86:	8f 71       	andi	r24, 0x1F	; 31
    9f88:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9f8a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    9f8c:	82 e3       	ldi	r24, 0x32	; 50
    9f8e:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9f90:	eb ec       	ldi	r30, 0xCB	; 203
    9f92:	f1 e0       	ldi	r31, 0x01	; 1
    9f94:	21 e0       	ldi	r18, 0x01	; 1
    9f96:	30 e0       	ldi	r19, 0x00	; 0
    9f98:	88 ed       	ldi	r24, 0xD8	; 216
    9f9a:	90 e0       	ldi	r25, 0x00	; 0
    9f9c:	84 bf       	out	0x34, r24	; 52
    9f9e:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    9fa0:	08 95       	ret

00009fa2 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    9fa2:	98 2f       	mov	r25, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9fa4:	e0 ec       	ldi	r30, 0xC0	; 192
    9fa6:	f1 e0       	ldi	r31, 0x01	; 1
    9fa8:	80 91 cf 01 	lds	r24, 0x01CF
    9fac:	87 fd       	sbrc	r24, 7
    9fae:	fa cf       	rjmp	.-12     	; 0x9fa4 <EEPROM_SplitWritePage+0x2>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9fb0:	89 2f       	mov	r24, r25
    9fb2:	90 e0       	ldi	r25, 0x00	; 0
    9fb4:	a5 e0       	ldi	r26, 0x05	; 5
    9fb6:	88 0f       	add	r24, r24
    9fb8:	99 1f       	adc	r25, r25
    9fba:	aa 95       	dec	r26
    9fbc:	e1 f7       	brne	.-8      	; 0x9fb6 <EEPROM_SplitWritePage+0x14>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9fbe:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9fc2:	89 2f       	mov	r24, r25
    9fc4:	8f 71       	andi	r24, 0x1F	; 31
    9fc6:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9fc8:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    9fca:	84 e3       	ldi	r24, 0x34	; 52
    9fcc:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9fce:	eb ec       	ldi	r30, 0xCB	; 203
    9fd0:	f1 e0       	ldi	r31, 0x01	; 1
    9fd2:	21 e0       	ldi	r18, 0x01	; 1
    9fd4:	30 e0       	ldi	r19, 0x00	; 0
    9fd6:	88 ed       	ldi	r24, 0xD8	; 216
    9fd8:	90 e0       	ldi	r25, 0x00	; 0
    9fda:	84 bf       	out	0x34, r24	; 52
    9fdc:	20 83       	st	Z, r18
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
    9fde:	08 95       	ret

00009fe0 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    9fe0:	80 91 cf 01 	lds	r24, 0x01CF
    9fe4:	87 fd       	sbrc	r24, 7
    9fe6:	fc cf       	rjmp	.-8      	; 0x9fe0 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    9fe8:	80 e3       	ldi	r24, 0x30	; 48
    9fea:	e0 ec       	ldi	r30, 0xC0	; 192
    9fec:	f1 e0       	ldi	r31, 0x01	; 1
    9fee:	82 87       	std	Z+10, r24	; 0x0a

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    9ff0:	eb ec       	ldi	r30, 0xCB	; 203
    9ff2:	f1 e0       	ldi	r31, 0x01	; 1
    9ff4:	21 e0       	ldi	r18, 0x01	; 1
    9ff6:	30 e0       	ldi	r19, 0x00	; 0
    9ff8:	88 ed       	ldi	r24, 0xD8	; 216
    9ffa:	90 e0       	ldi	r25, 0x00	; 0
    9ffc:	84 bf       	out	0x34, r24	; 52
    9ffe:	20 83       	st	Z, r18
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
        NVM_EXEC_WRAPPER();
}
    a000:	08 95       	ret

0000a002 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    a002:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    a004:	19 f4       	brne	.+6      	; 0xa00c <xputc+0xa>
	ldi	r24, 13		;
    a006:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    a008:	01 d0       	rcall	.+2      	; 0xa00c <xputc+0xa>
	ldi	r24, 10		;/
    a00a:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    a00c:	ff 93       	push	r31
	push	ZL
    a00e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    a010:	e0 91 98 24 	lds	r30, 0x2498
	lds	ZH, xfunc_out+1	;/
    a014:	f0 91 99 24 	lds	r31, 0x2499
	icall
    a018:	09 95       	icall
	pop	ZL
    a01a:	ef 91       	pop	r30
	pop	ZH
    a01c:	ff 91       	pop	r31
	ret
    a01e:	08 95       	ret

0000a020 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    a020:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    a022:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    a024:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    a026:	11 f0       	breq	.+4      	; 0xa02c <xputs+0xc>
	rcall	xputc
    a028:	ec df       	rcall	.-40     	; 0xa002 <xputc>
	rjmp	1b
    a02a:	fb cf       	rjmp	.-10     	; 0xa022 <xputs+0x2>
2:	ret
    a02c:	08 95       	ret

0000a02e <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    a02e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    a030:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    a032:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    a034:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    a036:	0c c0       	rjmp	.+24     	; 0xa050 <xitoa+0x22>
	neg	r20		;
    a038:	41 95       	neg	r20
	sbrs	r25, 7		;
    a03a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    a03c:	09 c0       	rjmp	.+18     	; 0xa050 <xitoa+0x22>
	ldi	r30, '-'	;
    a03e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    a040:	60 95       	com	r22
	com	r23		;
    a042:	70 95       	com	r23
	com	r24		;
    a044:	80 95       	com	r24
	com	r25		;
    a046:	90 95       	com	r25
	adc	r22, r1		;
    a048:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    a04a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    a04c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    a04e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    a050:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    a052:	02 c0       	rjmp	.+4      	; 0xa058 <xitoa+0x2a>
	neg	r18		;
    a054:	21 95       	neg	r18
	ldi	r19, '0'	;/
    a056:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    a058:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    a05a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    a05c:	66 0f       	add	r22, r22
	rol	r23		;
    a05e:	77 1f       	adc	r23, r23
	rol	r24		;
    a060:	88 1f       	adc	r24, r24
	rol	r25		;
    a062:	99 1f       	adc	r25, r25
	rol	r26		;
    a064:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    a066:	a4 17       	cp	r26, r20
	brcs	3f		;
    a068:	10 f0       	brcs	.+4      	; 0xa06e <xitoa+0x40>
	sub	r26, r20	;
    a06a:	a4 1b       	sub	r26, r20
	inc	r22		;
    a06c:	63 95       	inc	r22
3:	dec	r21		;
    a06e:	5a 95       	dec	r21
	brne	2b		;/
    a070:	a9 f7       	brne	.-22     	; 0xa05c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    a072:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    a074:	08 f0       	brcs	.+2      	; 0xa078 <xitoa+0x4a>
	subi	r26, -7		;
    a076:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    a078:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    a07a:	af 93       	push	r26
	inc	r31		;/
    a07c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    a07e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    a080:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    a082:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    a084:	91 05       	cpc	r25, r1
	brne	1b		;/
    a086:	41 f7       	brne	.-48     	; 0xa058 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    a088:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    a08a:	11 f4       	brne	.+4      	; 0xa090 <xitoa+0x62>
	push	r30		;
    a08c:	ef 93       	push	r30
	inc	r31		;/
    a08e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    a090:	f2 17       	cp	r31, r18
	brcc	6f		;
    a092:	18 f4       	brcc	.+6      	; 0xa09a <xitoa+0x6c>
	push	r19		;
    a094:	3f 93       	push	r19
	inc	r31		;
    a096:	f3 95       	inc	r31
	rjmp	5b		;/
    a098:	fb cf       	rjmp	.-10     	; 0xa090 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    a09a:	8f 91       	pop	r24
	rcall	xputc		;
    a09c:	b2 df       	rcall	.-156    	; 0xa002 <xputc>
	dec	r31		;
    a09e:	fa 95       	dec	r31
	brne	6b		;/
    a0a0:	e1 f7       	brne	.-8      	; 0xa09a <xitoa+0x6c>

	ret
    a0a2:	08 95       	ret

0000a0a4 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    a0a4:	df 93       	push	r29
	push	YL
    a0a6:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    a0a8:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    a0aa:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    a0ac:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    a0ae:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    a0b0:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    a0b2:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    a0b4:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    a0b6:	21 f0       	breq	.+8      	; 0xa0c0 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    a0b8:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    a0ba:	29 f0       	breq	.+10     	; 0xa0c6 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    a0bc:	a2 df       	rcall	.-188    	; 0xa002 <xputc>
	rjmp	0b		;/
    a0be:	f9 cf       	rjmp	.-14     	; 0xa0b2 <xprintf+0xe>
90:	pop	YL
    a0c0:	cf 91       	pop	r28
	pop	YH
    a0c2:	df 91       	pop	r29
	ret
    a0c4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    a0c6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    a0c8:	e8 94       	clt
	_LPMI	r21		;Get flags
    a0ca:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    a0cc:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    a0ce:	b1 f3       	breq	.-20     	; 0xa0bc <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    a0d0:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    a0d2:	11 f4       	brne	.+4      	; 0xa0d8 <xprintf+0x34>
	set			;/
    a0d4:	68 94       	set
22:	_LPMI	r21		;Get width
    a0d6:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    a0d8:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    a0da:	48 f4       	brcc	.+18     	; 0xa0ee <xprintf+0x4a>
	subi	r21, '0'	;
    a0dc:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    a0de:	80 f3       	brcs	.-32     	; 0xa0c0 <xprintf+0x1c>
	lsl	r18		;
    a0e0:	22 0f       	add	r18, r18
	mov	r0, r18		;
    a0e2:	02 2e       	mov	r0, r18
	lsl	r18		;
    a0e4:	22 0f       	add	r18, r18
	lsl	r18		;
    a0e6:	22 0f       	add	r18, r18
	add	r18, r0		;
    a0e8:	20 0d       	add	r18, r0
	add	r18, r21	;
    a0ea:	25 0f       	add	r18, r21
	rjmp	22b		;/
    a0ec:	f4 cf       	rjmp	.-24     	; 0xa0d6 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    a0ee:	0e f4       	brtc	.+2      	; 0xa0f2 <xprintf+0x4e>
	neg	r18		;
    a0f0:	21 95       	neg	r18
25:	ld	r24, Y+		;
    a0f2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    a0f4:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    a0f6:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    a0f8:	09 f3       	breq	.-62     	; 0xa0bc <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    a0fa:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    a0fc:	29 f1       	breq	.+74     	; 0xa148 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    a0fe:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    a100:	59 f1       	breq	.+86     	; 0xa158 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    a102:	bc 01       	movw	r22, r24
	clr	r24		;
    a104:	88 27       	eor	r24, r24
	clr	r25		;
    a106:	99 27       	eor	r25, r25
	clt			;/
    a108:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    a10a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    a10c:	21 f4       	brne	.+8      	; 0xa116 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    a10e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    a110:	99 91       	ld	r25, Y+
	set			;
    a112:	68 94       	set
	_LPMI	r21		;/
    a114:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    a116:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    a118:	39 f4       	brne	.+14     	; 0xa128 <xprintf+0x84>
	ldi	r20, -10	;
    a11a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    a11c:	7e f0       	brts	.+30     	; 0xa13c <xprintf+0x98>
	sbrs	r23, 7		;
    a11e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    a120:	0d c0       	rjmp	.+26     	; 0xa13c <xprintf+0x98>
	ldi	r24, -1		;
    a122:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    a124:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    a126:	0a c0       	rjmp	.+20     	; 0xa13c <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    a128:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    a12a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    a12c:	39 f0       	breq	.+14     	; 0xa13c <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    a12e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    a130:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    a132:	21 f0       	breq	.+8      	; 0xa13c <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    a134:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    a136:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    a138:	09 f0       	breq	.+2      	; 0xa13c <xprintf+0x98>
	rjmp	90b		;abort
    a13a:	c2 cf       	rjmp	.-124    	; 0xa0c0 <xprintf+0x1c>
40:	push	ZH		;Output the value
    a13c:	ff 93       	push	r31
	push	ZL		;
    a13e:	ef 93       	push	r30
	rcall	xitoa		;
    a140:	76 df       	rcall	.-276    	; 0xa02e <xitoa>
42:	pop	ZL		;
    a142:	ef 91       	pop	r30
	pop	ZH		;
    a144:	ff 91       	pop	r31
	rjmp	0b		;/
    a146:	b5 cf       	rjmp	.-150    	; 0xa0b2 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    a148:	ff 93       	push	r31
	push	ZL
    a14a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    a14c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    a14e:	81 91       	ld	r24, Z+
	cpi	r24, 0
    a150:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    a152:	b9 f3       	breq	.-18     	; 0xa142 <xprintf+0x9e>
	rcall	xputc
    a154:	56 df       	rcall	.-340    	; 0xa002 <xputc>
	rjmp	51b
    a156:	fb cf       	rjmp	.-10     	; 0xa14e <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    a158:	ff 93       	push	r31
	push	ZL
    a15a:	ef 93       	push	r30
	rcall	xputs
    a15c:	61 df       	rcall	.-318    	; 0xa020 <xputs>
	rjmp	42b
    a15e:	f1 cf       	rjmp	.-30     	; 0xa142 <xprintf+0x9e>

0000a160 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    a160:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    a162:	dc 01       	movw	r26, r24
	ld	ZL, X+
    a164:	ed 91       	ld	r30, X+
	ld	ZH, X+
    a166:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    a168:	22 27       	eor	r18, r18
	clr	r19		;
    a16a:	33 27       	eor	r19, r19
	clr	r20		;
    a16c:	44 27       	eor	r20, r20
	clr	r21		;/
    a16e:	55 27       	eor	r21, r21
	clt			;T = 0;
    a170:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    a172:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    a174:	01 c0       	rjmp	.+2      	; 0xa178 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    a176:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    a178:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    a17a:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    a17c:	e1 f3       	breq	.-8      	; 0xa176 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    a17e:	a8 f1       	brcs	.+106    	; 0xa1ea <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    a180:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    a182:	11 f4       	brne	.+4      	; 0xa188 <xatoi+0x28>
	set			; continue;
    a184:	68 94       	set
	rjmp	40b		;}
    a186:	f7 cf       	rjmp	.-18     	; 0xa176 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    a188:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    a18a:	78 f5       	brcc	.+94     	; 0xa1ea <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    a18c:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    a18e:	68 f1       	brcs	.+90     	; 0xa1ea <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    a190:	71 f4       	brne	.+28     	; 0xa1ae <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    a192:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    a194:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    a196:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    a198:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    a19a:	48 f1       	brcs	.+82     	; 0xa1ee <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    a19c:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    a19e:	11 f4       	brne	.+4      	; 0xa1a4 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    a1a0:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    a1a2:	03 c0       	rjmp	.+6      	; 0xa1aa <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    a1a4:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    a1a6:	19 f4       	brne	.+6      	; 0xa1ae <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    a1a8:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    a1aa:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    a1ac:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    a1ae:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    a1b0:	f0 f0       	brcs	.+60     	; 0xa1ee <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    a1b2:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    a1b4:	08 f0       	brcs	.+2      	; 0xa1b8 <xatoi+0x58>
	subi	r22, 0x20	;/
    a1b6:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    a1b8:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    a1ba:	b8 f0       	brcs	.+46     	; 0xa1ea <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    a1bc:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    a1be:	18 f0       	brcs	.+6      	; 0xa1c6 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    a1c0:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    a1c2:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    a1c4:	90 f0       	brcs	.+36     	; 0xa1ea <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    a1c6:	69 17       	cp	r22, r25
	brcc	70f		;/
    a1c8:	80 f4       	brcc	.+32     	; 0xa1ea <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    a1ca:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    a1cc:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    a1ce:	08 f4       	brcc	.+2      	; 0xa1d2 <xatoi+0x72>
	add	r23, r25	;
    a1d0:	79 0f       	add	r23, r25
62:	lsr	r23		;
    a1d2:	76 95       	lsr	r23
	ror	r21		;
    a1d4:	57 95       	ror	r21
	ror	r20		;
    a1d6:	47 95       	ror	r20
	ror	r19		;
    a1d8:	37 95       	ror	r19
	ror	r18		;
    a1da:	27 95       	ror	r18
	dec	r24		;
    a1dc:	8a 95       	dec	r24
	brne	61b		;/
    a1de:	b9 f7       	brne	.-18     	; 0xa1ce <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    a1e0:	26 0f       	add	r18, r22
	adc	r19, r24	;
    a1e2:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    a1e4:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    a1e6:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    a1e8:	e0 cf       	rjmp	.-64     	; 0xa1aa <xatoi+0x4a>

70:	ldi	r24, 0
    a1ea:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    a1ec:	01 c0       	rjmp	.+2      	; 0xa1f0 <xatoi+0x90>
80:	ldi	r24, 1
    a1ee:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    a1f0:	4e f4       	brtc	.+18     	; 0xa204 <xatoi+0xa4>
	clr	r22
    a1f2:	66 27       	eor	r22, r22
	com	r18
    a1f4:	20 95       	com	r18
	com	r19
    a1f6:	30 95       	com	r19
	com	r20
    a1f8:	40 95       	com	r20
	com	r21
    a1fa:	50 95       	com	r21
	adc	r18, r22
    a1fc:	26 1f       	adc	r18, r22
	adc	r19, r22
    a1fe:	36 1f       	adc	r19, r22
	adc	r20, r22
    a200:	46 1f       	adc	r20, r22
	adc	r21, r22
    a202:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    a204:	fe 93       	st	-X, r31
	st	-X, ZL
    a206:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    a208:	d0 01       	movw	r26, r0
	st	X+, r18
    a20a:	2d 93       	st	X+, r18
	st	X+, r19
    a20c:	3d 93       	st	X+, r19
	st	X+, r20
    a20e:	4d 93       	st	X+, r20
	st	X+, r21
    a210:	5d 93       	st	X+, r21
	clr	r1
    a212:	11 24       	eor	r1, r1
	ret
    a214:	08 95       	ret

0000a216 <__mulsi3>:
    a216:	62 9f       	mul	r22, r18
    a218:	d0 01       	movw	r26, r0
    a21a:	73 9f       	mul	r23, r19
    a21c:	f0 01       	movw	r30, r0
    a21e:	82 9f       	mul	r24, r18
    a220:	e0 0d       	add	r30, r0
    a222:	f1 1d       	adc	r31, r1
    a224:	64 9f       	mul	r22, r20
    a226:	e0 0d       	add	r30, r0
    a228:	f1 1d       	adc	r31, r1
    a22a:	92 9f       	mul	r25, r18
    a22c:	f0 0d       	add	r31, r0
    a22e:	83 9f       	mul	r24, r19
    a230:	f0 0d       	add	r31, r0
    a232:	74 9f       	mul	r23, r20
    a234:	f0 0d       	add	r31, r0
    a236:	65 9f       	mul	r22, r21
    a238:	f0 0d       	add	r31, r0
    a23a:	99 27       	eor	r25, r25
    a23c:	72 9f       	mul	r23, r18
    a23e:	b0 0d       	add	r27, r0
    a240:	e1 1d       	adc	r30, r1
    a242:	f9 1f       	adc	r31, r25
    a244:	63 9f       	mul	r22, r19
    a246:	b0 0d       	add	r27, r0
    a248:	e1 1d       	adc	r30, r1
    a24a:	f9 1f       	adc	r31, r25
    a24c:	bd 01       	movw	r22, r26
    a24e:	cf 01       	movw	r24, r30
    a250:	11 24       	eor	r1, r1
    a252:	08 95       	ret

0000a254 <__udivmodhi4>:
    a254:	aa 1b       	sub	r26, r26
    a256:	bb 1b       	sub	r27, r27
    a258:	51 e1       	ldi	r21, 0x11	; 17
    a25a:	07 c0       	rjmp	.+14     	; 0xa26a <__udivmodhi4_ep>

0000a25c <__udivmodhi4_loop>:
    a25c:	aa 1f       	adc	r26, r26
    a25e:	bb 1f       	adc	r27, r27
    a260:	a6 17       	cp	r26, r22
    a262:	b7 07       	cpc	r27, r23
    a264:	10 f0       	brcs	.+4      	; 0xa26a <__udivmodhi4_ep>
    a266:	a6 1b       	sub	r26, r22
    a268:	b7 0b       	sbc	r27, r23

0000a26a <__udivmodhi4_ep>:
    a26a:	88 1f       	adc	r24, r24
    a26c:	99 1f       	adc	r25, r25
    a26e:	5a 95       	dec	r21
    a270:	a9 f7       	brne	.-22     	; 0xa25c <__udivmodhi4_loop>
    a272:	80 95       	com	r24
    a274:	90 95       	com	r25
    a276:	bc 01       	movw	r22, r24
    a278:	cd 01       	movw	r24, r26
    a27a:	08 95       	ret

0000a27c <__divmodhi4>:
    a27c:	97 fb       	bst	r25, 7
    a27e:	09 2e       	mov	r0, r25
    a280:	07 26       	eor	r0, r23
    a282:	0a d0       	rcall	.+20     	; 0xa298 <__divmodhi4_neg1>
    a284:	77 fd       	sbrc	r23, 7
    a286:	04 d0       	rcall	.+8      	; 0xa290 <__divmodhi4_neg2>
    a288:	e5 df       	rcall	.-54     	; 0xa254 <__udivmodhi4>
    a28a:	06 d0       	rcall	.+12     	; 0xa298 <__divmodhi4_neg1>
    a28c:	00 20       	and	r0, r0
    a28e:	1a f4       	brpl	.+6      	; 0xa296 <__divmodhi4_exit>

0000a290 <__divmodhi4_neg2>:
    a290:	70 95       	com	r23
    a292:	61 95       	neg	r22
    a294:	7f 4f       	sbci	r23, 0xFF	; 255

0000a296 <__divmodhi4_exit>:
    a296:	08 95       	ret

0000a298 <__divmodhi4_neg1>:
    a298:	f6 f7       	brtc	.-4      	; 0xa296 <__divmodhi4_exit>
    a29a:	90 95       	com	r25
    a29c:	81 95       	neg	r24
    a29e:	9f 4f       	sbci	r25, 0xFF	; 255
    a2a0:	08 95       	ret

0000a2a2 <__udivmodsi4>:
    a2a2:	a1 e2       	ldi	r26, 0x21	; 33
    a2a4:	1a 2e       	mov	r1, r26
    a2a6:	aa 1b       	sub	r26, r26
    a2a8:	bb 1b       	sub	r27, r27
    a2aa:	fd 01       	movw	r30, r26
    a2ac:	0d c0       	rjmp	.+26     	; 0xa2c8 <__udivmodsi4_ep>

0000a2ae <__udivmodsi4_loop>:
    a2ae:	aa 1f       	adc	r26, r26
    a2b0:	bb 1f       	adc	r27, r27
    a2b2:	ee 1f       	adc	r30, r30
    a2b4:	ff 1f       	adc	r31, r31
    a2b6:	a2 17       	cp	r26, r18
    a2b8:	b3 07       	cpc	r27, r19
    a2ba:	e4 07       	cpc	r30, r20
    a2bc:	f5 07       	cpc	r31, r21
    a2be:	20 f0       	brcs	.+8      	; 0xa2c8 <__udivmodsi4_ep>
    a2c0:	a2 1b       	sub	r26, r18
    a2c2:	b3 0b       	sbc	r27, r19
    a2c4:	e4 0b       	sbc	r30, r20
    a2c6:	f5 0b       	sbc	r31, r21

0000a2c8 <__udivmodsi4_ep>:
    a2c8:	66 1f       	adc	r22, r22
    a2ca:	77 1f       	adc	r23, r23
    a2cc:	88 1f       	adc	r24, r24
    a2ce:	99 1f       	adc	r25, r25
    a2d0:	1a 94       	dec	r1
    a2d2:	69 f7       	brne	.-38     	; 0xa2ae <__udivmodsi4_loop>
    a2d4:	60 95       	com	r22
    a2d6:	70 95       	com	r23
    a2d8:	80 95       	com	r24
    a2da:	90 95       	com	r25
    a2dc:	9b 01       	movw	r18, r22
    a2de:	ac 01       	movw	r20, r24
    a2e0:	bd 01       	movw	r22, r26
    a2e2:	cf 01       	movw	r24, r30
    a2e4:	08 95       	ret

0000a2e6 <__divmodsi4>:
    a2e6:	97 fb       	bst	r25, 7
    a2e8:	09 2e       	mov	r0, r25
    a2ea:	05 26       	eor	r0, r21
    a2ec:	0e d0       	rcall	.+28     	; 0xa30a <__divmodsi4_neg1>
    a2ee:	57 fd       	sbrc	r21, 7
    a2f0:	04 d0       	rcall	.+8      	; 0xa2fa <__divmodsi4_neg2>
    a2f2:	d7 df       	rcall	.-82     	; 0xa2a2 <__udivmodsi4>
    a2f4:	0a d0       	rcall	.+20     	; 0xa30a <__divmodsi4_neg1>
    a2f6:	00 1c       	adc	r0, r0
    a2f8:	38 f4       	brcc	.+14     	; 0xa308 <__divmodsi4_exit>

0000a2fa <__divmodsi4_neg2>:
    a2fa:	50 95       	com	r21
    a2fc:	40 95       	com	r20
    a2fe:	30 95       	com	r19
    a300:	21 95       	neg	r18
    a302:	3f 4f       	sbci	r19, 0xFF	; 255
    a304:	4f 4f       	sbci	r20, 0xFF	; 255
    a306:	5f 4f       	sbci	r21, 0xFF	; 255

0000a308 <__divmodsi4_exit>:
    a308:	08 95       	ret

0000a30a <__divmodsi4_neg1>:
    a30a:	f6 f7       	brtc	.-4      	; 0xa308 <__divmodsi4_exit>
    a30c:	90 95       	com	r25
    a30e:	80 95       	com	r24
    a310:	70 95       	com	r23
    a312:	61 95       	neg	r22
    a314:	7f 4f       	sbci	r23, 0xFF	; 255
    a316:	8f 4f       	sbci	r24, 0xFF	; 255
    a318:	9f 4f       	sbci	r25, 0xFF	; 255
    a31a:	08 95       	ret

0000a31c <__prologue_saves__>:
    a31c:	2f 92       	push	r2
    a31e:	3f 92       	push	r3
    a320:	4f 92       	push	r4
    a322:	5f 92       	push	r5
    a324:	6f 92       	push	r6
    a326:	7f 92       	push	r7
    a328:	8f 92       	push	r8
    a32a:	9f 92       	push	r9
    a32c:	af 92       	push	r10
    a32e:	bf 92       	push	r11
    a330:	cf 92       	push	r12
    a332:	df 92       	push	r13
    a334:	ef 92       	push	r14
    a336:	ff 92       	push	r15
    a338:	0f 93       	push	r16
    a33a:	1f 93       	push	r17
    a33c:	cf 93       	push	r28
    a33e:	df 93       	push	r29
    a340:	cd b7       	in	r28, 0x3d	; 61
    a342:	de b7       	in	r29, 0x3e	; 62
    a344:	ca 1b       	sub	r28, r26
    a346:	db 0b       	sbc	r29, r27
    a348:	0f b6       	in	r0, 0x3f	; 63
    a34a:	f8 94       	cli
    a34c:	de bf       	out	0x3e, r29	; 62
    a34e:	0f be       	out	0x3f, r0	; 63
    a350:	cd bf       	out	0x3d, r28	; 61
    a352:	19 94       	eijmp

0000a354 <__epilogue_restores__>:
    a354:	2a 88       	ldd	r2, Y+18	; 0x12
    a356:	39 88       	ldd	r3, Y+17	; 0x11
    a358:	48 88       	ldd	r4, Y+16	; 0x10
    a35a:	5f 84       	ldd	r5, Y+15	; 0x0f
    a35c:	6e 84       	ldd	r6, Y+14	; 0x0e
    a35e:	7d 84       	ldd	r7, Y+13	; 0x0d
    a360:	8c 84       	ldd	r8, Y+12	; 0x0c
    a362:	9b 84       	ldd	r9, Y+11	; 0x0b
    a364:	aa 84       	ldd	r10, Y+10	; 0x0a
    a366:	b9 84       	ldd	r11, Y+9	; 0x09
    a368:	c8 84       	ldd	r12, Y+8	; 0x08
    a36a:	df 80       	ldd	r13, Y+7	; 0x07
    a36c:	ee 80       	ldd	r14, Y+6	; 0x06
    a36e:	fd 80       	ldd	r15, Y+5	; 0x05
    a370:	0c 81       	ldd	r16, Y+4	; 0x04
    a372:	1b 81       	ldd	r17, Y+3	; 0x03
    a374:	aa 81       	ldd	r26, Y+2	; 0x02
    a376:	b9 81       	ldd	r27, Y+1	; 0x01
    a378:	ce 0f       	add	r28, r30
    a37a:	d1 1d       	adc	r29, r1
    a37c:	0f b6       	in	r0, 0x3f	; 63
    a37e:	f8 94       	cli
    a380:	de bf       	out	0x3e, r29	; 62
    a382:	0f be       	out	0x3f, r0	; 63
    a384:	cd bf       	out	0x3d, r28	; 61
    a386:	ed 01       	movw	r28, r26
    a388:	08 95       	ret

0000a38a <__tablejump2__>:
    a38a:	ee 0f       	add	r30, r30
    a38c:	ff 1f       	adc	r31, r31

0000a38e <__tablejump__>:
    a38e:	05 90       	lpm	r0, Z+
    a390:	f4 91       	lpm	r31, Z+
    a392:	e0 2d       	mov	r30, r0
    a394:	19 94       	eijmp

0000a396 <malloc>:
    a396:	cf 93       	push	r28
    a398:	df 93       	push	r29
    a39a:	bc 01       	movw	r22, r24
    a39c:	82 30       	cpi	r24, 0x02	; 2
    a39e:	91 05       	cpc	r25, r1
    a3a0:	10 f4       	brcc	.+4      	; 0xa3a6 <malloc+0x10>
    a3a2:	62 e0       	ldi	r22, 0x02	; 2
    a3a4:	70 e0       	ldi	r23, 0x00	; 0
    a3a6:	a0 91 05 2b 	lds	r26, 0x2B05
    a3aa:	b0 91 06 2b 	lds	r27, 0x2B06
    a3ae:	ed 01       	movw	r28, r26
    a3b0:	e0 e0       	ldi	r30, 0x00	; 0
    a3b2:	f0 e0       	ldi	r31, 0x00	; 0
    a3b4:	40 e0       	ldi	r20, 0x00	; 0
    a3b6:	50 e0       	ldi	r21, 0x00	; 0
    a3b8:	21 c0       	rjmp	.+66     	; 0xa3fc <malloc+0x66>
    a3ba:	88 81       	ld	r24, Y
    a3bc:	99 81       	ldd	r25, Y+1	; 0x01
    a3be:	86 17       	cp	r24, r22
    a3c0:	97 07       	cpc	r25, r23
    a3c2:	69 f4       	brne	.+26     	; 0xa3de <malloc+0x48>
    a3c4:	8a 81       	ldd	r24, Y+2	; 0x02
    a3c6:	9b 81       	ldd	r25, Y+3	; 0x03
    a3c8:	30 97       	sbiw	r30, 0x00	; 0
    a3ca:	19 f0       	breq	.+6      	; 0xa3d2 <malloc+0x3c>
    a3cc:	82 83       	std	Z+2, r24	; 0x02
    a3ce:	93 83       	std	Z+3, r25	; 0x03
    a3d0:	04 c0       	rjmp	.+8      	; 0xa3da <malloc+0x44>
    a3d2:	80 93 05 2b 	sts	0x2B05, r24
    a3d6:	90 93 06 2b 	sts	0x2B06, r25
    a3da:	fe 01       	movw	r30, r28
    a3dc:	34 c0       	rjmp	.+104    	; 0xa446 <malloc+0xb0>
    a3de:	68 17       	cp	r22, r24
    a3e0:	79 07       	cpc	r23, r25
    a3e2:	38 f4       	brcc	.+14     	; 0xa3f2 <malloc+0x5c>
    a3e4:	41 15       	cp	r20, r1
    a3e6:	51 05       	cpc	r21, r1
    a3e8:	19 f0       	breq	.+6      	; 0xa3f0 <malloc+0x5a>
    a3ea:	84 17       	cp	r24, r20
    a3ec:	95 07       	cpc	r25, r21
    a3ee:	08 f4       	brcc	.+2      	; 0xa3f2 <malloc+0x5c>
    a3f0:	ac 01       	movw	r20, r24
    a3f2:	fe 01       	movw	r30, r28
    a3f4:	8a 81       	ldd	r24, Y+2	; 0x02
    a3f6:	9b 81       	ldd	r25, Y+3	; 0x03
    a3f8:	9c 01       	movw	r18, r24
    a3fa:	e9 01       	movw	r28, r18
    a3fc:	20 97       	sbiw	r28, 0x00	; 0
    a3fe:	e9 f6       	brne	.-70     	; 0xa3ba <malloc+0x24>
    a400:	41 15       	cp	r20, r1
    a402:	51 05       	cpc	r21, r1
    a404:	a9 f1       	breq	.+106    	; 0xa470 <malloc+0xda>
    a406:	ca 01       	movw	r24, r20
    a408:	86 1b       	sub	r24, r22
    a40a:	97 0b       	sbc	r25, r23
    a40c:	04 97       	sbiw	r24, 0x04	; 4
    a40e:	08 f4       	brcc	.+2      	; 0xa412 <malloc+0x7c>
    a410:	ba 01       	movw	r22, r20
    a412:	e0 e0       	ldi	r30, 0x00	; 0
    a414:	f0 e0       	ldi	r31, 0x00	; 0
    a416:	2a c0       	rjmp	.+84     	; 0xa46c <malloc+0xd6>
    a418:	8d 91       	ld	r24, X+
    a41a:	9c 91       	ld	r25, X
    a41c:	11 97       	sbiw	r26, 0x01	; 1
    a41e:	84 17       	cp	r24, r20
    a420:	95 07       	cpc	r25, r21
    a422:	f9 f4       	brne	.+62     	; 0xa462 <malloc+0xcc>
    a424:	64 17       	cp	r22, r20
    a426:	75 07       	cpc	r23, r21
    a428:	81 f4       	brne	.+32     	; 0xa44a <malloc+0xb4>
    a42a:	12 96       	adiw	r26, 0x02	; 2
    a42c:	8d 91       	ld	r24, X+
    a42e:	9c 91       	ld	r25, X
    a430:	13 97       	sbiw	r26, 0x03	; 3
    a432:	30 97       	sbiw	r30, 0x00	; 0
    a434:	19 f0       	breq	.+6      	; 0xa43c <malloc+0xa6>
    a436:	82 83       	std	Z+2, r24	; 0x02
    a438:	93 83       	std	Z+3, r25	; 0x03
    a43a:	04 c0       	rjmp	.+8      	; 0xa444 <malloc+0xae>
    a43c:	80 93 05 2b 	sts	0x2B05, r24
    a440:	90 93 06 2b 	sts	0x2B06, r25
    a444:	fd 01       	movw	r30, r26
    a446:	32 96       	adiw	r30, 0x02	; 2
    a448:	4f c0       	rjmp	.+158    	; 0xa4e8 <malloc+0x152>
    a44a:	ca 01       	movw	r24, r20
    a44c:	86 1b       	sub	r24, r22
    a44e:	97 0b       	sbc	r25, r23
    a450:	fd 01       	movw	r30, r26
    a452:	e8 0f       	add	r30, r24
    a454:	f9 1f       	adc	r31, r25
    a456:	61 93       	st	Z+, r22
    a458:	71 93       	st	Z+, r23
    a45a:	02 97       	sbiw	r24, 0x02	; 2
    a45c:	8d 93       	st	X+, r24
    a45e:	9c 93       	st	X, r25
    a460:	43 c0       	rjmp	.+134    	; 0xa4e8 <malloc+0x152>
    a462:	fd 01       	movw	r30, r26
    a464:	82 81       	ldd	r24, Z+2	; 0x02
    a466:	93 81       	ldd	r25, Z+3	; 0x03
    a468:	9c 01       	movw	r18, r24
    a46a:	d9 01       	movw	r26, r18
    a46c:	10 97       	sbiw	r26, 0x00	; 0
    a46e:	a1 f6       	brne	.-88     	; 0xa418 <malloc+0x82>
    a470:	80 91 03 2b 	lds	r24, 0x2B03
    a474:	90 91 04 2b 	lds	r25, 0x2B04
    a478:	89 2b       	or	r24, r25
    a47a:	41 f4       	brne	.+16     	; 0xa48c <malloc+0xf6>
    a47c:	80 91 f6 23 	lds	r24, 0x23F6
    a480:	90 91 f7 23 	lds	r25, 0x23F7
    a484:	80 93 03 2b 	sts	0x2B03, r24
    a488:	90 93 04 2b 	sts	0x2B04, r25
    a48c:	40 91 f8 23 	lds	r20, 0x23F8
    a490:	50 91 f9 23 	lds	r21, 0x23F9
    a494:	41 15       	cp	r20, r1
    a496:	51 05       	cpc	r21, r1
    a498:	41 f4       	brne	.+16     	; 0xa4aa <malloc+0x114>
    a49a:	4d b7       	in	r20, 0x3d	; 61
    a49c:	5e b7       	in	r21, 0x3e	; 62
    a49e:	80 91 f4 23 	lds	r24, 0x23F4
    a4a2:	90 91 f5 23 	lds	r25, 0x23F5
    a4a6:	48 1b       	sub	r20, r24
    a4a8:	59 0b       	sbc	r21, r25
    a4aa:	20 91 03 2b 	lds	r18, 0x2B03
    a4ae:	30 91 04 2b 	lds	r19, 0x2B04
    a4b2:	24 17       	cp	r18, r20
    a4b4:	35 07       	cpc	r19, r21
    a4b6:	b0 f4       	brcc	.+44     	; 0xa4e4 <malloc+0x14e>
    a4b8:	ca 01       	movw	r24, r20
    a4ba:	82 1b       	sub	r24, r18
    a4bc:	93 0b       	sbc	r25, r19
    a4be:	86 17       	cp	r24, r22
    a4c0:	97 07       	cpc	r25, r23
    a4c2:	80 f0       	brcs	.+32     	; 0xa4e4 <malloc+0x14e>
    a4c4:	ab 01       	movw	r20, r22
    a4c6:	4e 5f       	subi	r20, 0xFE	; 254
    a4c8:	5f 4f       	sbci	r21, 0xFF	; 255
    a4ca:	84 17       	cp	r24, r20
    a4cc:	95 07       	cpc	r25, r21
    a4ce:	50 f0       	brcs	.+20     	; 0xa4e4 <malloc+0x14e>
    a4d0:	42 0f       	add	r20, r18
    a4d2:	53 1f       	adc	r21, r19
    a4d4:	40 93 03 2b 	sts	0x2B03, r20
    a4d8:	50 93 04 2b 	sts	0x2B04, r21
    a4dc:	f9 01       	movw	r30, r18
    a4de:	61 93       	st	Z+, r22
    a4e0:	71 93       	st	Z+, r23
    a4e2:	02 c0       	rjmp	.+4      	; 0xa4e8 <malloc+0x152>
    a4e4:	e0 e0       	ldi	r30, 0x00	; 0
    a4e6:	f0 e0       	ldi	r31, 0x00	; 0
    a4e8:	cf 01       	movw	r24, r30
    a4ea:	df 91       	pop	r29
    a4ec:	cf 91       	pop	r28
    a4ee:	08 95       	ret

0000a4f0 <free>:
    a4f0:	cf 93       	push	r28
    a4f2:	df 93       	push	r29
    a4f4:	00 97       	sbiw	r24, 0x00	; 0
    a4f6:	09 f4       	brne	.+2      	; 0xa4fa <free+0xa>
    a4f8:	50 c0       	rjmp	.+160    	; 0xa59a <free+0xaa>
    a4fa:	ec 01       	movw	r28, r24
    a4fc:	22 97       	sbiw	r28, 0x02	; 2
    a4fe:	1a 82       	std	Y+2, r1	; 0x02
    a500:	1b 82       	std	Y+3, r1	; 0x03
    a502:	a0 91 05 2b 	lds	r26, 0x2B05
    a506:	b0 91 06 2b 	lds	r27, 0x2B06
    a50a:	10 97       	sbiw	r26, 0x00	; 0
    a50c:	09 f1       	breq	.+66     	; 0xa550 <free+0x60>
    a50e:	40 e0       	ldi	r20, 0x00	; 0
    a510:	50 e0       	ldi	r21, 0x00	; 0
    a512:	ac 17       	cp	r26, r28
    a514:	bd 07       	cpc	r27, r29
    a516:	08 f1       	brcs	.+66     	; 0xa55a <free+0x6a>
    a518:	aa 83       	std	Y+2, r26	; 0x02
    a51a:	bb 83       	std	Y+3, r27	; 0x03
    a51c:	fe 01       	movw	r30, r28
    a51e:	21 91       	ld	r18, Z+
    a520:	31 91       	ld	r19, Z+
    a522:	e2 0f       	add	r30, r18
    a524:	f3 1f       	adc	r31, r19
    a526:	ae 17       	cp	r26, r30
    a528:	bf 07       	cpc	r27, r31
    a52a:	79 f4       	brne	.+30     	; 0xa54a <free+0x5a>
    a52c:	8d 91       	ld	r24, X+
    a52e:	9c 91       	ld	r25, X
    a530:	11 97       	sbiw	r26, 0x01	; 1
    a532:	28 0f       	add	r18, r24
    a534:	39 1f       	adc	r19, r25
    a536:	2e 5f       	subi	r18, 0xFE	; 254
    a538:	3f 4f       	sbci	r19, 0xFF	; 255
    a53a:	28 83       	st	Y, r18
    a53c:	39 83       	std	Y+1, r19	; 0x01
    a53e:	12 96       	adiw	r26, 0x02	; 2
    a540:	8d 91       	ld	r24, X+
    a542:	9c 91       	ld	r25, X
    a544:	13 97       	sbiw	r26, 0x03	; 3
    a546:	8a 83       	std	Y+2, r24	; 0x02
    a548:	9b 83       	std	Y+3, r25	; 0x03
    a54a:	41 15       	cp	r20, r1
    a54c:	51 05       	cpc	r21, r1
    a54e:	71 f4       	brne	.+28     	; 0xa56c <free+0x7c>
    a550:	c0 93 05 2b 	sts	0x2B05, r28
    a554:	d0 93 06 2b 	sts	0x2B06, r29
    a558:	20 c0       	rjmp	.+64     	; 0xa59a <free+0xaa>
    a55a:	12 96       	adiw	r26, 0x02	; 2
    a55c:	8d 91       	ld	r24, X+
    a55e:	9c 91       	ld	r25, X
    a560:	13 97       	sbiw	r26, 0x03	; 3
    a562:	ad 01       	movw	r20, r26
    a564:	00 97       	sbiw	r24, 0x00	; 0
    a566:	11 f0       	breq	.+4      	; 0xa56c <free+0x7c>
    a568:	dc 01       	movw	r26, r24
    a56a:	d3 cf       	rjmp	.-90     	; 0xa512 <free+0x22>
    a56c:	fa 01       	movw	r30, r20
    a56e:	c2 83       	std	Z+2, r28	; 0x02
    a570:	d3 83       	std	Z+3, r29	; 0x03
    a572:	21 91       	ld	r18, Z+
    a574:	31 91       	ld	r19, Z+
    a576:	e2 0f       	add	r30, r18
    a578:	f3 1f       	adc	r31, r19
    a57a:	ce 17       	cp	r28, r30
    a57c:	df 07       	cpc	r29, r31
    a57e:	69 f4       	brne	.+26     	; 0xa59a <free+0xaa>
    a580:	88 81       	ld	r24, Y
    a582:	99 81       	ldd	r25, Y+1	; 0x01
    a584:	28 0f       	add	r18, r24
    a586:	39 1f       	adc	r19, r25
    a588:	2e 5f       	subi	r18, 0xFE	; 254
    a58a:	3f 4f       	sbci	r19, 0xFF	; 255
    a58c:	fa 01       	movw	r30, r20
    a58e:	20 83       	st	Z, r18
    a590:	31 83       	std	Z+1, r19	; 0x01
    a592:	8a 81       	ldd	r24, Y+2	; 0x02
    a594:	9b 81       	ldd	r25, Y+3	; 0x03
    a596:	82 83       	std	Z+2, r24	; 0x02
    a598:	93 83       	std	Z+3, r25	; 0x03
    a59a:	df 91       	pop	r29
    a59c:	cf 91       	pop	r28
    a59e:	08 95       	ret

0000a5a0 <strtoul>:
    a5a0:	3f 92       	push	r3
    a5a2:	4f 92       	push	r4
    a5a4:	5f 92       	push	r5
    a5a6:	6f 92       	push	r6
    a5a8:	7f 92       	push	r7
    a5aa:	8f 92       	push	r8
    a5ac:	9f 92       	push	r9
    a5ae:	af 92       	push	r10
    a5b0:	bf 92       	push	r11
    a5b2:	cf 92       	push	r12
    a5b4:	df 92       	push	r13
    a5b6:	ef 92       	push	r14
    a5b8:	ff 92       	push	r15
    a5ba:	0f 93       	push	r16
    a5bc:	1f 93       	push	r17
    a5be:	cf 93       	push	r28
    a5c0:	df 93       	push	r29
    a5c2:	ec 01       	movw	r28, r24
    a5c4:	2b 01       	movw	r4, r22
    a5c6:	6a 01       	movw	r12, r20
    a5c8:	61 15       	cp	r22, r1
    a5ca:	71 05       	cpc	r23, r1
    a5cc:	19 f0       	breq	.+6      	; 0xa5d4 <strtoul+0x34>
    a5ce:	fb 01       	movw	r30, r22
    a5d0:	80 83       	st	Z, r24
    a5d2:	91 83       	std	Z+1, r25	; 0x01
    a5d4:	c1 14       	cp	r12, r1
    a5d6:	d1 04       	cpc	r13, r1
    a5d8:	49 f0       	breq	.+18     	; 0xa5ec <strtoul+0x4c>
    a5da:	c6 01       	movw	r24, r12
    a5dc:	02 97       	sbiw	r24, 0x02	; 2
    a5de:	83 97       	sbiw	r24, 0x23	; 35
    a5e0:	28 f0       	brcs	.+10     	; 0xa5ec <strtoul+0x4c>
    a5e2:	20 e0       	ldi	r18, 0x00	; 0
    a5e4:	30 e0       	ldi	r19, 0x00	; 0
    a5e6:	40 e0       	ldi	r20, 0x00	; 0
    a5e8:	50 e0       	ldi	r21, 0x00	; 0
    a5ea:	dc c0       	rjmp	.+440    	; 0xa7a4 <strtoul+0x204>
    a5ec:	a9 90       	ld	r10, Y+
    a5ee:	8a 2d       	mov	r24, r10
    a5f0:	90 e0       	ldi	r25, 0x00	; 0
    a5f2:	0e 94 e6 53 	call	0xa7cc	; 0xa7cc <isspace>
    a5f6:	89 2b       	or	r24, r25
    a5f8:	c9 f7       	brne	.-14     	; 0xa5ec <strtoul+0x4c>
    a5fa:	fd e2       	ldi	r31, 0x2D	; 45
    a5fc:	af 16       	cp	r10, r31
    a5fe:	21 f4       	brne	.+8      	; 0xa608 <strtoul+0x68>
    a600:	a9 90       	ld	r10, Y+
    a602:	33 24       	eor	r3, r3
    a604:	33 94       	inc	r3
    a606:	05 c0       	rjmp	.+10     	; 0xa612 <strtoul+0x72>
    a608:	8b e2       	ldi	r24, 0x2B	; 43
    a60a:	a8 16       	cp	r10, r24
    a60c:	09 f4       	brne	.+2      	; 0xa610 <strtoul+0x70>
    a60e:	a9 90       	ld	r10, Y+
    a610:	33 24       	eor	r3, r3
    a612:	c1 14       	cp	r12, r1
    a614:	d1 04       	cpc	r13, r1
    a616:	21 f0       	breq	.+8      	; 0xa620 <strtoul+0x80>
    a618:	e0 e1       	ldi	r30, 0x10	; 16
    a61a:	ce 16       	cp	r12, r30
    a61c:	d1 04       	cpc	r13, r1
    a61e:	11 f5       	brne	.+68     	; 0xa664 <strtoul+0xc4>
    a620:	f0 e3       	ldi	r31, 0x30	; 48
    a622:	af 16       	cp	r10, r31
    a624:	69 f4       	brne	.+26     	; 0xa640 <strtoul+0xa0>
    a626:	88 81       	ld	r24, Y
    a628:	88 37       	cpi	r24, 0x78	; 120
    a62a:	11 f0       	breq	.+4      	; 0xa630 <strtoul+0x90>
    a62c:	88 35       	cpi	r24, 0x58	; 88
    a62e:	41 f4       	brne	.+16     	; 0xa640 <strtoul+0xa0>
    a630:	a9 80       	ldd	r10, Y+1	; 0x01
    a632:	22 96       	adiw	r28, 0x02	; 2
    a634:	82 e0       	ldi	r24, 0x02	; 2
    a636:	38 2a       	or	r3, r24
    a638:	20 e1       	ldi	r18, 0x10	; 16
    a63a:	c2 2e       	mov	r12, r18
    a63c:	d1 2c       	mov	r13, r1
    a63e:	12 c0       	rjmp	.+36     	; 0xa664 <strtoul+0xc4>
    a640:	c1 14       	cp	r12, r1
    a642:	d1 04       	cpc	r13, r1
    a644:	79 f4       	brne	.+30     	; 0xa664 <strtoul+0xc4>
    a646:	e0 e3       	ldi	r30, 0x30	; 48
    a648:	ae 16       	cp	r10, r30
    a64a:	59 f1       	breq	.+86     	; 0xa6a2 <strtoul+0x102>
    a64c:	99 e9       	ldi	r25, 0x99	; 153
    a64e:	e9 2e       	mov	r14, r25
    a650:	99 e9       	ldi	r25, 0x99	; 153
    a652:	f9 2e       	mov	r15, r25
    a654:	99 e9       	ldi	r25, 0x99	; 153
    a656:	09 2f       	mov	r16, r25
    a658:	99 e1       	ldi	r25, 0x19	; 25
    a65a:	19 2f       	mov	r17, r25
    a65c:	8a e0       	ldi	r24, 0x0A	; 10
    a65e:	c8 2e       	mov	r12, r24
    a660:	d1 2c       	mov	r13, r1
    a662:	3a c0       	rjmp	.+116    	; 0xa6d8 <strtoul+0x138>
    a664:	fa e0       	ldi	r31, 0x0A	; 10
    a666:	cf 16       	cp	r12, r31
    a668:	d1 04       	cpc	r13, r1
    a66a:	91 f0       	breq	.+36     	; 0xa690 <strtoul+0xf0>
    a66c:	80 e1       	ldi	r24, 0x10	; 16
    a66e:	c8 16       	cp	r12, r24
    a670:	d1 04       	cpc	r13, r1
    a672:	29 f0       	breq	.+10     	; 0xa67e <strtoul+0xde>
    a674:	e8 e0       	ldi	r30, 0x08	; 8
    a676:	ce 16       	cp	r12, r30
    a678:	d1 04       	cpc	r13, r1
    a67a:	f9 f4       	brne	.+62     	; 0xa6ba <strtoul+0x11a>
    a67c:	15 c0       	rjmp	.+42     	; 0xa6a8 <strtoul+0x108>
    a67e:	bf ef       	ldi	r27, 0xFF	; 255
    a680:	eb 2e       	mov	r14, r27
    a682:	bf ef       	ldi	r27, 0xFF	; 255
    a684:	fb 2e       	mov	r15, r27
    a686:	bf ef       	ldi	r27, 0xFF	; 255
    a688:	0b 2f       	mov	r16, r27
    a68a:	bf e0       	ldi	r27, 0x0F	; 15
    a68c:	1b 2f       	mov	r17, r27
    a68e:	24 c0       	rjmp	.+72     	; 0xa6d8 <strtoul+0x138>
    a690:	a9 e9       	ldi	r26, 0x99	; 153
    a692:	ea 2e       	mov	r14, r26
    a694:	a9 e9       	ldi	r26, 0x99	; 153
    a696:	fa 2e       	mov	r15, r26
    a698:	a9 e9       	ldi	r26, 0x99	; 153
    a69a:	0a 2f       	mov	r16, r26
    a69c:	a9 e1       	ldi	r26, 0x19	; 25
    a69e:	1a 2f       	mov	r17, r26
    a6a0:	1b c0       	rjmp	.+54     	; 0xa6d8 <strtoul+0x138>
    a6a2:	f8 e0       	ldi	r31, 0x08	; 8
    a6a4:	cf 2e       	mov	r12, r31
    a6a6:	d1 2c       	mov	r13, r1
    a6a8:	ef ef       	ldi	r30, 0xFF	; 255
    a6aa:	ee 2e       	mov	r14, r30
    a6ac:	ef ef       	ldi	r30, 0xFF	; 255
    a6ae:	fe 2e       	mov	r15, r30
    a6b0:	ef ef       	ldi	r30, 0xFF	; 255
    a6b2:	0e 2f       	mov	r16, r30
    a6b4:	ef e1       	ldi	r30, 0x1F	; 31
    a6b6:	1e 2f       	mov	r17, r30
    a6b8:	0f c0       	rjmp	.+30     	; 0xa6d8 <strtoul+0x138>
    a6ba:	96 01       	movw	r18, r12
    a6bc:	44 27       	eor	r20, r20
    a6be:	37 fd       	sbrc	r19, 7
    a6c0:	40 95       	com	r20
    a6c2:	54 2f       	mov	r21, r20
    a6c4:	6f ef       	ldi	r22, 0xFF	; 255
    a6c6:	7f ef       	ldi	r23, 0xFF	; 255
    a6c8:	8f ef       	ldi	r24, 0xFF	; 255
    a6ca:	9f ef       	ldi	r25, 0xFF	; 255
    a6cc:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__udivmodsi4>
    a6d0:	c9 01       	movw	r24, r18
    a6d2:	da 01       	movw	r26, r20
    a6d4:	7c 01       	movw	r14, r24
    a6d6:	8d 01       	movw	r16, r26
    a6d8:	20 e0       	ldi	r18, 0x00	; 0
    a6da:	30 e0       	ldi	r19, 0x00	; 0
    a6dc:	40 e0       	ldi	r20, 0x00	; 0
    a6de:	50 e0       	ldi	r21, 0x00	; 0
    a6e0:	60 e0       	ldi	r22, 0x00	; 0
    a6e2:	36 01       	movw	r6, r12
    a6e4:	88 24       	eor	r8, r8
    a6e6:	77 fc       	sbrc	r7, 7
    a6e8:	80 94       	com	r8
    a6ea:	98 2c       	mov	r9, r8
    a6ec:	70 ed       	ldi	r23, 0xD0	; 208
    a6ee:	b7 2e       	mov	r11, r23
    a6f0:	ba 0c       	add	r11, r10
    a6f2:	f9 e0       	ldi	r31, 0x09	; 9
    a6f4:	fb 15       	cp	r31, r11
    a6f6:	70 f4       	brcc	.+28     	; 0xa714 <strtoul+0x174>
    a6f8:	8a 2d       	mov	r24, r10
    a6fa:	81 54       	subi	r24, 0x41	; 65
    a6fc:	8a 31       	cpi	r24, 0x1A	; 26
    a6fe:	18 f4       	brcc	.+6      	; 0xa706 <strtoul+0x166>
    a700:	99 ec       	ldi	r25, 0xC9	; 201
    a702:	b9 2e       	mov	r11, r25
    a704:	06 c0       	rjmp	.+12     	; 0xa712 <strtoul+0x172>
    a706:	8a 2d       	mov	r24, r10
    a708:	81 56       	subi	r24, 0x61	; 97
    a70a:	8a 31       	cpi	r24, 0x1A	; 26
    a70c:	48 f5       	brcc	.+82     	; 0xa760 <strtoul+0x1c0>
    a70e:	89 ea       	ldi	r24, 0xA9	; 169
    a710:	b8 2e       	mov	r11, r24
    a712:	ba 0c       	add	r11, r10
    a714:	8b 2d       	mov	r24, r11
    a716:	90 e0       	ldi	r25, 0x00	; 0
    a718:	8c 15       	cp	r24, r12
    a71a:	9d 05       	cpc	r25, r13
    a71c:	0c f5       	brge	.+66     	; 0xa760 <strtoul+0x1c0>
    a71e:	6f 3f       	cpi	r22, 0xFF	; 255
    a720:	e9 f0       	breq	.+58     	; 0xa75c <strtoul+0x1bc>
    a722:	e2 16       	cp	r14, r18
    a724:	f3 06       	cpc	r15, r19
    a726:	04 07       	cpc	r16, r20
    a728:	15 07       	cpc	r17, r21
    a72a:	b8 f0       	brcs	.+46     	; 0xa75a <strtoul+0x1ba>
    a72c:	ca 01       	movw	r24, r20
    a72e:	b9 01       	movw	r22, r18
    a730:	a4 01       	movw	r20, r8
    a732:	93 01       	movw	r18, r6
    a734:	0e 94 0b 51 	call	0xa216	; 0xa216 <__mulsi3>
    a738:	9b 01       	movw	r18, r22
    a73a:	ac 01       	movw	r20, r24
    a73c:	8b 2d       	mov	r24, r11
    a73e:	90 e0       	ldi	r25, 0x00	; 0
    a740:	a0 e0       	ldi	r26, 0x00	; 0
    a742:	b0 e0       	ldi	r27, 0x00	; 0
    a744:	28 0f       	add	r18, r24
    a746:	39 1f       	adc	r19, r25
    a748:	4a 1f       	adc	r20, r26
    a74a:	5b 1f       	adc	r21, r27
    a74c:	28 17       	cp	r18, r24
    a74e:	39 07       	cpc	r19, r25
    a750:	4a 07       	cpc	r20, r26
    a752:	5b 07       	cpc	r21, r27
    a754:	10 f0       	brcs	.+4      	; 0xa75a <strtoul+0x1ba>
    a756:	61 e0       	ldi	r22, 0x01	; 1
    a758:	01 c0       	rjmp	.+2      	; 0xa75c <strtoul+0x1bc>
    a75a:	6f ef       	ldi	r22, 0xFF	; 255
    a75c:	a9 90       	ld	r10, Y+
    a75e:	c6 cf       	rjmp	.-116    	; 0xa6ec <strtoul+0x14c>
    a760:	41 14       	cp	r4, r1
    a762:	51 04       	cpc	r5, r1
    a764:	51 f0       	breq	.+20     	; 0xa77a <strtoul+0x1da>
    a766:	66 23       	and	r22, r22
    a768:	11 f0       	breq	.+4      	; 0xa76e <strtoul+0x1ce>
    a76a:	21 97       	sbiw	r28, 0x01	; 1
    a76c:	03 c0       	rjmp	.+6      	; 0xa774 <strtoul+0x1d4>
    a76e:	31 fe       	sbrs	r3, 1
    a770:	04 c0       	rjmp	.+8      	; 0xa77a <strtoul+0x1da>
    a772:	22 97       	sbiw	r28, 0x02	; 2
    a774:	f2 01       	movw	r30, r4
    a776:	c0 83       	st	Z, r28
    a778:	d1 83       	std	Z+1, r29	; 0x01
    a77a:	30 fe       	sbrs	r3, 0
    a77c:	07 c0       	rjmp	.+14     	; 0xa78c <strtoul+0x1ec>
    a77e:	50 95       	com	r21
    a780:	40 95       	com	r20
    a782:	30 95       	com	r19
    a784:	21 95       	neg	r18
    a786:	3f 4f       	sbci	r19, 0xFF	; 255
    a788:	4f 4f       	sbci	r20, 0xFF	; 255
    a78a:	5f 4f       	sbci	r21, 0xFF	; 255
    a78c:	67 ff       	sbrs	r22, 7
    a78e:	0a c0       	rjmp	.+20     	; 0xa7a4 <strtoul+0x204>
    a790:	82 e2       	ldi	r24, 0x22	; 34
    a792:	90 e0       	ldi	r25, 0x00	; 0
    a794:	80 93 07 2b 	sts	0x2B07, r24
    a798:	90 93 08 2b 	sts	0x2B08, r25
    a79c:	2f ef       	ldi	r18, 0xFF	; 255
    a79e:	3f ef       	ldi	r19, 0xFF	; 255
    a7a0:	4f ef       	ldi	r20, 0xFF	; 255
    a7a2:	5f ef       	ldi	r21, 0xFF	; 255
    a7a4:	b9 01       	movw	r22, r18
    a7a6:	ca 01       	movw	r24, r20
    a7a8:	df 91       	pop	r29
    a7aa:	cf 91       	pop	r28
    a7ac:	1f 91       	pop	r17
    a7ae:	0f 91       	pop	r16
    a7b0:	ff 90       	pop	r15
    a7b2:	ef 90       	pop	r14
    a7b4:	df 90       	pop	r13
    a7b6:	cf 90       	pop	r12
    a7b8:	bf 90       	pop	r11
    a7ba:	af 90       	pop	r10
    a7bc:	9f 90       	pop	r9
    a7be:	8f 90       	pop	r8
    a7c0:	7f 90       	pop	r7
    a7c2:	6f 90       	pop	r6
    a7c4:	5f 90       	pop	r5
    a7c6:	4f 90       	pop	r4
    a7c8:	3f 90       	pop	r3
    a7ca:	08 95       	ret

0000a7cc <isspace>:
    a7cc:	91 11       	cpse	r25, r1
    a7ce:	64 c2       	rjmp	.+1224   	; 0xac98 <__ctype_isfalse>
    a7d0:	80 32       	cpi	r24, 0x20	; 32
    a7d2:	19 f0       	breq	.+6      	; 0xa7da <isspace+0xe>
    a7d4:	89 50       	subi	r24, 0x09	; 9
    a7d6:	85 50       	subi	r24, 0x05	; 5
    a7d8:	d0 f7       	brcc	.-12     	; 0xa7ce <isspace+0x2>
    a7da:	08 95       	ret

0000a7dc <sprintf>:
    a7dc:	0f 93       	push	r16
    a7de:	1f 93       	push	r17
    a7e0:	df 93       	push	r29
    a7e2:	cf 93       	push	r28
    a7e4:	cd b7       	in	r28, 0x3d	; 61
    a7e6:	de b7       	in	r29, 0x3e	; 62
    a7e8:	2e 97       	sbiw	r28, 0x0e	; 14
    a7ea:	cd bf       	out	0x3d, r28	; 61
    a7ec:	de bf       	out	0x3e, r29	; 62
    a7ee:	0e 89       	ldd	r16, Y+22	; 0x16
    a7f0:	1f 89       	ldd	r17, Y+23	; 0x17
    a7f2:	86 e0       	ldi	r24, 0x06	; 6
    a7f4:	8c 83       	std	Y+4, r24	; 0x04
    a7f6:	09 83       	std	Y+1, r16	; 0x01
    a7f8:	1a 83       	std	Y+2, r17	; 0x02
    a7fa:	8f ef       	ldi	r24, 0xFF	; 255
    a7fc:	9f e7       	ldi	r25, 0x7F	; 127
    a7fe:	8d 83       	std	Y+5, r24	; 0x05
    a800:	9e 83       	std	Y+6, r25	; 0x06
    a802:	9e 01       	movw	r18, r28
    a804:	26 5e       	subi	r18, 0xE6	; 230
    a806:	3f 4f       	sbci	r19, 0xFF	; 255
    a808:	ce 01       	movw	r24, r28
    a80a:	01 96       	adiw	r24, 0x01	; 1
    a80c:	68 8d       	ldd	r22, Y+24	; 0x18
    a80e:	79 8d       	ldd	r23, Y+25	; 0x19
    a810:	a9 01       	movw	r20, r18
    a812:	0e 94 19 54 	call	0xa832	; 0xa832 <vfprintf>
    a816:	2f 81       	ldd	r18, Y+7	; 0x07
    a818:	38 85       	ldd	r19, Y+8	; 0x08
    a81a:	02 0f       	add	r16, r18
    a81c:	13 1f       	adc	r17, r19
    a81e:	f8 01       	movw	r30, r16
    a820:	10 82       	st	Z, r1
    a822:	2e 96       	adiw	r28, 0x0e	; 14
    a824:	cd bf       	out	0x3d, r28	; 61
    a826:	de bf       	out	0x3e, r29	; 62
    a828:	cf 91       	pop	r28
    a82a:	df 91       	pop	r29
    a82c:	1f 91       	pop	r17
    a82e:	0f 91       	pop	r16
    a830:	08 95       	ret

0000a832 <vfprintf>:
    a832:	2f 92       	push	r2
    a834:	3f 92       	push	r3
    a836:	4f 92       	push	r4
    a838:	5f 92       	push	r5
    a83a:	6f 92       	push	r6
    a83c:	7f 92       	push	r7
    a83e:	8f 92       	push	r8
    a840:	9f 92       	push	r9
    a842:	af 92       	push	r10
    a844:	bf 92       	push	r11
    a846:	cf 92       	push	r12
    a848:	df 92       	push	r13
    a84a:	ef 92       	push	r14
    a84c:	ff 92       	push	r15
    a84e:	0f 93       	push	r16
    a850:	1f 93       	push	r17
    a852:	df 93       	push	r29
    a854:	cf 93       	push	r28
    a856:	cd b7       	in	r28, 0x3d	; 61
    a858:	de b7       	in	r29, 0x3e	; 62
    a85a:	2b 97       	sbiw	r28, 0x0b	; 11
    a85c:	cd bf       	out	0x3d, r28	; 61
    a85e:	de bf       	out	0x3e, r29	; 62
    a860:	3c 01       	movw	r6, r24
    a862:	2b 01       	movw	r4, r22
    a864:	5a 01       	movw	r10, r20
    a866:	fc 01       	movw	r30, r24
    a868:	16 82       	std	Z+6, r1	; 0x06
    a86a:	17 82       	std	Z+7, r1	; 0x07
    a86c:	83 81       	ldd	r24, Z+3	; 0x03
    a86e:	81 fd       	sbrc	r24, 1
    a870:	03 c0       	rjmp	.+6      	; 0xa878 <vfprintf+0x46>
    a872:	6f ef       	ldi	r22, 0xFF	; 255
    a874:	7f ef       	ldi	r23, 0xFF	; 255
    a876:	c6 c1       	rjmp	.+908    	; 0xac04 <vfprintf+0x3d2>
    a878:	9a e0       	ldi	r25, 0x0A	; 10
    a87a:	89 2e       	mov	r8, r25
    a87c:	1e 01       	movw	r2, r28
    a87e:	08 94       	sec
    a880:	21 1c       	adc	r2, r1
    a882:	31 1c       	adc	r3, r1
    a884:	f3 01       	movw	r30, r6
    a886:	23 81       	ldd	r18, Z+3	; 0x03
    a888:	f2 01       	movw	r30, r4
    a88a:	23 fd       	sbrc	r18, 3
    a88c:	85 91       	lpm	r24, Z+
    a88e:	23 ff       	sbrs	r18, 3
    a890:	81 91       	ld	r24, Z+
    a892:	2f 01       	movw	r4, r30
    a894:	88 23       	and	r24, r24
    a896:	09 f4       	brne	.+2      	; 0xa89a <vfprintf+0x68>
    a898:	b2 c1       	rjmp	.+868    	; 0xabfe <vfprintf+0x3cc>
    a89a:	85 32       	cpi	r24, 0x25	; 37
    a89c:	39 f4       	brne	.+14     	; 0xa8ac <vfprintf+0x7a>
    a89e:	23 fd       	sbrc	r18, 3
    a8a0:	85 91       	lpm	r24, Z+
    a8a2:	23 ff       	sbrs	r18, 3
    a8a4:	81 91       	ld	r24, Z+
    a8a6:	2f 01       	movw	r4, r30
    a8a8:	85 32       	cpi	r24, 0x25	; 37
    a8aa:	29 f4       	brne	.+10     	; 0xa8b6 <vfprintf+0x84>
    a8ac:	90 e0       	ldi	r25, 0x00	; 0
    a8ae:	b3 01       	movw	r22, r6
    a8b0:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    a8b4:	e7 cf       	rjmp	.-50     	; 0xa884 <vfprintf+0x52>
    a8b6:	98 2f       	mov	r25, r24
    a8b8:	ff 24       	eor	r15, r15
    a8ba:	ee 24       	eor	r14, r14
    a8bc:	99 24       	eor	r9, r9
    a8be:	ff e1       	ldi	r31, 0x1F	; 31
    a8c0:	ff 15       	cp	r31, r15
    a8c2:	d0 f0       	brcs	.+52     	; 0xa8f8 <vfprintf+0xc6>
    a8c4:	9b 32       	cpi	r25, 0x2B	; 43
    a8c6:	69 f0       	breq	.+26     	; 0xa8e2 <vfprintf+0xb0>
    a8c8:	9c 32       	cpi	r25, 0x2C	; 44
    a8ca:	28 f4       	brcc	.+10     	; 0xa8d6 <vfprintf+0xa4>
    a8cc:	90 32       	cpi	r25, 0x20	; 32
    a8ce:	59 f0       	breq	.+22     	; 0xa8e6 <vfprintf+0xb4>
    a8d0:	93 32       	cpi	r25, 0x23	; 35
    a8d2:	91 f4       	brne	.+36     	; 0xa8f8 <vfprintf+0xc6>
    a8d4:	0e c0       	rjmp	.+28     	; 0xa8f2 <vfprintf+0xc0>
    a8d6:	9d 32       	cpi	r25, 0x2D	; 45
    a8d8:	49 f0       	breq	.+18     	; 0xa8ec <vfprintf+0xba>
    a8da:	90 33       	cpi	r25, 0x30	; 48
    a8dc:	69 f4       	brne	.+26     	; 0xa8f8 <vfprintf+0xc6>
    a8de:	41 e0       	ldi	r20, 0x01	; 1
    a8e0:	24 c0       	rjmp	.+72     	; 0xa92a <vfprintf+0xf8>
    a8e2:	52 e0       	ldi	r21, 0x02	; 2
    a8e4:	f5 2a       	or	r15, r21
    a8e6:	84 e0       	ldi	r24, 0x04	; 4
    a8e8:	f8 2a       	or	r15, r24
    a8ea:	28 c0       	rjmp	.+80     	; 0xa93c <vfprintf+0x10a>
    a8ec:	98 e0       	ldi	r25, 0x08	; 8
    a8ee:	f9 2a       	or	r15, r25
    a8f0:	25 c0       	rjmp	.+74     	; 0xa93c <vfprintf+0x10a>
    a8f2:	e0 e1       	ldi	r30, 0x10	; 16
    a8f4:	fe 2a       	or	r15, r30
    a8f6:	22 c0       	rjmp	.+68     	; 0xa93c <vfprintf+0x10a>
    a8f8:	f7 fc       	sbrc	r15, 7
    a8fa:	29 c0       	rjmp	.+82     	; 0xa94e <vfprintf+0x11c>
    a8fc:	89 2f       	mov	r24, r25
    a8fe:	80 53       	subi	r24, 0x30	; 48
    a900:	8a 30       	cpi	r24, 0x0A	; 10
    a902:	70 f4       	brcc	.+28     	; 0xa920 <vfprintf+0xee>
    a904:	f6 fe       	sbrs	r15, 6
    a906:	05 c0       	rjmp	.+10     	; 0xa912 <vfprintf+0xe0>
    a908:	98 9c       	mul	r9, r8
    a90a:	90 2c       	mov	r9, r0
    a90c:	11 24       	eor	r1, r1
    a90e:	98 0e       	add	r9, r24
    a910:	15 c0       	rjmp	.+42     	; 0xa93c <vfprintf+0x10a>
    a912:	e8 9c       	mul	r14, r8
    a914:	e0 2c       	mov	r14, r0
    a916:	11 24       	eor	r1, r1
    a918:	e8 0e       	add	r14, r24
    a91a:	f0 e2       	ldi	r31, 0x20	; 32
    a91c:	ff 2a       	or	r15, r31
    a91e:	0e c0       	rjmp	.+28     	; 0xa93c <vfprintf+0x10a>
    a920:	9e 32       	cpi	r25, 0x2E	; 46
    a922:	29 f4       	brne	.+10     	; 0xa92e <vfprintf+0xfc>
    a924:	f6 fc       	sbrc	r15, 6
    a926:	6b c1       	rjmp	.+726    	; 0xabfe <vfprintf+0x3cc>
    a928:	40 e4       	ldi	r20, 0x40	; 64
    a92a:	f4 2a       	or	r15, r20
    a92c:	07 c0       	rjmp	.+14     	; 0xa93c <vfprintf+0x10a>
    a92e:	9c 36       	cpi	r25, 0x6C	; 108
    a930:	19 f4       	brne	.+6      	; 0xa938 <vfprintf+0x106>
    a932:	50 e8       	ldi	r21, 0x80	; 128
    a934:	f5 2a       	or	r15, r21
    a936:	02 c0       	rjmp	.+4      	; 0xa93c <vfprintf+0x10a>
    a938:	98 36       	cpi	r25, 0x68	; 104
    a93a:	49 f4       	brne	.+18     	; 0xa94e <vfprintf+0x11c>
    a93c:	f2 01       	movw	r30, r4
    a93e:	23 fd       	sbrc	r18, 3
    a940:	95 91       	lpm	r25, Z+
    a942:	23 ff       	sbrs	r18, 3
    a944:	91 91       	ld	r25, Z+
    a946:	2f 01       	movw	r4, r30
    a948:	99 23       	and	r25, r25
    a94a:	09 f0       	breq	.+2      	; 0xa94e <vfprintf+0x11c>
    a94c:	b8 cf       	rjmp	.-144    	; 0xa8be <vfprintf+0x8c>
    a94e:	89 2f       	mov	r24, r25
    a950:	85 54       	subi	r24, 0x45	; 69
    a952:	83 30       	cpi	r24, 0x03	; 3
    a954:	18 f0       	brcs	.+6      	; 0xa95c <vfprintf+0x12a>
    a956:	80 52       	subi	r24, 0x20	; 32
    a958:	83 30       	cpi	r24, 0x03	; 3
    a95a:	38 f4       	brcc	.+14     	; 0xa96a <vfprintf+0x138>
    a95c:	44 e0       	ldi	r20, 0x04	; 4
    a95e:	50 e0       	ldi	r21, 0x00	; 0
    a960:	a4 0e       	add	r10, r20
    a962:	b5 1e       	adc	r11, r21
    a964:	5f e3       	ldi	r21, 0x3F	; 63
    a966:	59 83       	std	Y+1, r21	; 0x01
    a968:	0f c0       	rjmp	.+30     	; 0xa988 <vfprintf+0x156>
    a96a:	93 36       	cpi	r25, 0x63	; 99
    a96c:	31 f0       	breq	.+12     	; 0xa97a <vfprintf+0x148>
    a96e:	93 37       	cpi	r25, 0x73	; 115
    a970:	79 f0       	breq	.+30     	; 0xa990 <vfprintf+0x15e>
    a972:	93 35       	cpi	r25, 0x53	; 83
    a974:	09 f0       	breq	.+2      	; 0xa978 <vfprintf+0x146>
    a976:	56 c0       	rjmp	.+172    	; 0xaa24 <vfprintf+0x1f2>
    a978:	20 c0       	rjmp	.+64     	; 0xa9ba <vfprintf+0x188>
    a97a:	f5 01       	movw	r30, r10
    a97c:	80 81       	ld	r24, Z
    a97e:	89 83       	std	Y+1, r24	; 0x01
    a980:	42 e0       	ldi	r20, 0x02	; 2
    a982:	50 e0       	ldi	r21, 0x00	; 0
    a984:	a4 0e       	add	r10, r20
    a986:	b5 1e       	adc	r11, r21
    a988:	61 01       	movw	r12, r2
    a98a:	01 e0       	ldi	r16, 0x01	; 1
    a98c:	10 e0       	ldi	r17, 0x00	; 0
    a98e:	12 c0       	rjmp	.+36     	; 0xa9b4 <vfprintf+0x182>
    a990:	f5 01       	movw	r30, r10
    a992:	c0 80       	ld	r12, Z
    a994:	d1 80       	ldd	r13, Z+1	; 0x01
    a996:	f6 fc       	sbrc	r15, 6
    a998:	03 c0       	rjmp	.+6      	; 0xa9a0 <vfprintf+0x16e>
    a99a:	6f ef       	ldi	r22, 0xFF	; 255
    a99c:	7f ef       	ldi	r23, 0xFF	; 255
    a99e:	02 c0       	rjmp	.+4      	; 0xa9a4 <vfprintf+0x172>
    a9a0:	69 2d       	mov	r22, r9
    a9a2:	70 e0       	ldi	r23, 0x00	; 0
    a9a4:	42 e0       	ldi	r20, 0x02	; 2
    a9a6:	50 e0       	ldi	r21, 0x00	; 0
    a9a8:	a4 0e       	add	r10, r20
    a9aa:	b5 1e       	adc	r11, r21
    a9ac:	c6 01       	movw	r24, r12
    a9ae:	0e 94 5a 56 	call	0xacb4	; 0xacb4 <strnlen>
    a9b2:	8c 01       	movw	r16, r24
    a9b4:	5f e7       	ldi	r21, 0x7F	; 127
    a9b6:	f5 22       	and	r15, r21
    a9b8:	14 c0       	rjmp	.+40     	; 0xa9e2 <vfprintf+0x1b0>
    a9ba:	f5 01       	movw	r30, r10
    a9bc:	c0 80       	ld	r12, Z
    a9be:	d1 80       	ldd	r13, Z+1	; 0x01
    a9c0:	f6 fc       	sbrc	r15, 6
    a9c2:	03 c0       	rjmp	.+6      	; 0xa9ca <vfprintf+0x198>
    a9c4:	6f ef       	ldi	r22, 0xFF	; 255
    a9c6:	7f ef       	ldi	r23, 0xFF	; 255
    a9c8:	02 c0       	rjmp	.+4      	; 0xa9ce <vfprintf+0x19c>
    a9ca:	69 2d       	mov	r22, r9
    a9cc:	70 e0       	ldi	r23, 0x00	; 0
    a9ce:	42 e0       	ldi	r20, 0x02	; 2
    a9d0:	50 e0       	ldi	r21, 0x00	; 0
    a9d2:	a4 0e       	add	r10, r20
    a9d4:	b5 1e       	adc	r11, r21
    a9d6:	c6 01       	movw	r24, r12
    a9d8:	0e 94 4f 56 	call	0xac9e	; 0xac9e <strnlen_P>
    a9dc:	8c 01       	movw	r16, r24
    a9de:	50 e8       	ldi	r21, 0x80	; 128
    a9e0:	f5 2a       	or	r15, r21
    a9e2:	f3 fe       	sbrs	r15, 3
    a9e4:	07 c0       	rjmp	.+14     	; 0xa9f4 <vfprintf+0x1c2>
    a9e6:	1a c0       	rjmp	.+52     	; 0xaa1c <vfprintf+0x1ea>
    a9e8:	80 e2       	ldi	r24, 0x20	; 32
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	b3 01       	movw	r22, r6
    a9ee:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    a9f2:	ea 94       	dec	r14
    a9f4:	8e 2d       	mov	r24, r14
    a9f6:	90 e0       	ldi	r25, 0x00	; 0
    a9f8:	08 17       	cp	r16, r24
    a9fa:	19 07       	cpc	r17, r25
    a9fc:	a8 f3       	brcs	.-22     	; 0xa9e8 <vfprintf+0x1b6>
    a9fe:	0e c0       	rjmp	.+28     	; 0xaa1c <vfprintf+0x1ea>
    aa00:	f6 01       	movw	r30, r12
    aa02:	f7 fc       	sbrc	r15, 7
    aa04:	85 91       	lpm	r24, Z+
    aa06:	f7 fe       	sbrs	r15, 7
    aa08:	81 91       	ld	r24, Z+
    aa0a:	6f 01       	movw	r12, r30
    aa0c:	90 e0       	ldi	r25, 0x00	; 0
    aa0e:	b3 01       	movw	r22, r6
    aa10:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    aa14:	e1 10       	cpse	r14, r1
    aa16:	ea 94       	dec	r14
    aa18:	01 50       	subi	r16, 0x01	; 1
    aa1a:	10 40       	sbci	r17, 0x00	; 0
    aa1c:	01 15       	cp	r16, r1
    aa1e:	11 05       	cpc	r17, r1
    aa20:	79 f7       	brne	.-34     	; 0xaa00 <vfprintf+0x1ce>
    aa22:	ea c0       	rjmp	.+468    	; 0xabf8 <vfprintf+0x3c6>
    aa24:	94 36       	cpi	r25, 0x64	; 100
    aa26:	11 f0       	breq	.+4      	; 0xaa2c <vfprintf+0x1fa>
    aa28:	99 36       	cpi	r25, 0x69	; 105
    aa2a:	69 f5       	brne	.+90     	; 0xaa86 <vfprintf+0x254>
    aa2c:	f7 fe       	sbrs	r15, 7
    aa2e:	08 c0       	rjmp	.+16     	; 0xaa40 <vfprintf+0x20e>
    aa30:	f5 01       	movw	r30, r10
    aa32:	20 81       	ld	r18, Z
    aa34:	31 81       	ldd	r19, Z+1	; 0x01
    aa36:	42 81       	ldd	r20, Z+2	; 0x02
    aa38:	53 81       	ldd	r21, Z+3	; 0x03
    aa3a:	84 e0       	ldi	r24, 0x04	; 4
    aa3c:	90 e0       	ldi	r25, 0x00	; 0
    aa3e:	0a c0       	rjmp	.+20     	; 0xaa54 <vfprintf+0x222>
    aa40:	f5 01       	movw	r30, r10
    aa42:	80 81       	ld	r24, Z
    aa44:	91 81       	ldd	r25, Z+1	; 0x01
    aa46:	9c 01       	movw	r18, r24
    aa48:	44 27       	eor	r20, r20
    aa4a:	37 fd       	sbrc	r19, 7
    aa4c:	40 95       	com	r20
    aa4e:	54 2f       	mov	r21, r20
    aa50:	82 e0       	ldi	r24, 0x02	; 2
    aa52:	90 e0       	ldi	r25, 0x00	; 0
    aa54:	a8 0e       	add	r10, r24
    aa56:	b9 1e       	adc	r11, r25
    aa58:	9f e6       	ldi	r25, 0x6F	; 111
    aa5a:	f9 22       	and	r15, r25
    aa5c:	57 ff       	sbrs	r21, 7
    aa5e:	09 c0       	rjmp	.+18     	; 0xaa72 <vfprintf+0x240>
    aa60:	50 95       	com	r21
    aa62:	40 95       	com	r20
    aa64:	30 95       	com	r19
    aa66:	21 95       	neg	r18
    aa68:	3f 4f       	sbci	r19, 0xFF	; 255
    aa6a:	4f 4f       	sbci	r20, 0xFF	; 255
    aa6c:	5f 4f       	sbci	r21, 0xFF	; 255
    aa6e:	e0 e8       	ldi	r30, 0x80	; 128
    aa70:	fe 2a       	or	r15, r30
    aa72:	ca 01       	movw	r24, r20
    aa74:	b9 01       	movw	r22, r18
    aa76:	a1 01       	movw	r20, r2
    aa78:	2a e0       	ldi	r18, 0x0A	; 10
    aa7a:	30 e0       	ldi	r19, 0x00	; 0
    aa7c:	0e 94 91 56 	call	0xad22	; 0xad22 <__ultoa_invert>
    aa80:	d8 2e       	mov	r13, r24
    aa82:	d2 18       	sub	r13, r2
    aa84:	40 c0       	rjmp	.+128    	; 0xab06 <vfprintf+0x2d4>
    aa86:	95 37       	cpi	r25, 0x75	; 117
    aa88:	29 f4       	brne	.+10     	; 0xaa94 <vfprintf+0x262>
    aa8a:	1f 2d       	mov	r17, r15
    aa8c:	1f 7e       	andi	r17, 0xEF	; 239
    aa8e:	2a e0       	ldi	r18, 0x0A	; 10
    aa90:	30 e0       	ldi	r19, 0x00	; 0
    aa92:	1d c0       	rjmp	.+58     	; 0xaace <vfprintf+0x29c>
    aa94:	1f 2d       	mov	r17, r15
    aa96:	19 7f       	andi	r17, 0xF9	; 249
    aa98:	9f 36       	cpi	r25, 0x6F	; 111
    aa9a:	61 f0       	breq	.+24     	; 0xaab4 <vfprintf+0x282>
    aa9c:	90 37       	cpi	r25, 0x70	; 112
    aa9e:	20 f4       	brcc	.+8      	; 0xaaa8 <vfprintf+0x276>
    aaa0:	98 35       	cpi	r25, 0x58	; 88
    aaa2:	09 f0       	breq	.+2      	; 0xaaa6 <vfprintf+0x274>
    aaa4:	ac c0       	rjmp	.+344    	; 0xabfe <vfprintf+0x3cc>
    aaa6:	0f c0       	rjmp	.+30     	; 0xaac6 <vfprintf+0x294>
    aaa8:	90 37       	cpi	r25, 0x70	; 112
    aaaa:	39 f0       	breq	.+14     	; 0xaaba <vfprintf+0x288>
    aaac:	98 37       	cpi	r25, 0x78	; 120
    aaae:	09 f0       	breq	.+2      	; 0xaab2 <vfprintf+0x280>
    aab0:	a6 c0       	rjmp	.+332    	; 0xabfe <vfprintf+0x3cc>
    aab2:	04 c0       	rjmp	.+8      	; 0xaabc <vfprintf+0x28a>
    aab4:	28 e0       	ldi	r18, 0x08	; 8
    aab6:	30 e0       	ldi	r19, 0x00	; 0
    aab8:	0a c0       	rjmp	.+20     	; 0xaace <vfprintf+0x29c>
    aaba:	10 61       	ori	r17, 0x10	; 16
    aabc:	14 fd       	sbrc	r17, 4
    aabe:	14 60       	ori	r17, 0x04	; 4
    aac0:	20 e1       	ldi	r18, 0x10	; 16
    aac2:	30 e0       	ldi	r19, 0x00	; 0
    aac4:	04 c0       	rjmp	.+8      	; 0xaace <vfprintf+0x29c>
    aac6:	14 fd       	sbrc	r17, 4
    aac8:	16 60       	ori	r17, 0x06	; 6
    aaca:	20 e1       	ldi	r18, 0x10	; 16
    aacc:	32 e0       	ldi	r19, 0x02	; 2
    aace:	17 ff       	sbrs	r17, 7
    aad0:	08 c0       	rjmp	.+16     	; 0xaae2 <vfprintf+0x2b0>
    aad2:	f5 01       	movw	r30, r10
    aad4:	60 81       	ld	r22, Z
    aad6:	71 81       	ldd	r23, Z+1	; 0x01
    aad8:	82 81       	ldd	r24, Z+2	; 0x02
    aada:	93 81       	ldd	r25, Z+3	; 0x03
    aadc:	44 e0       	ldi	r20, 0x04	; 4
    aade:	50 e0       	ldi	r21, 0x00	; 0
    aae0:	08 c0       	rjmp	.+16     	; 0xaaf2 <vfprintf+0x2c0>
    aae2:	f5 01       	movw	r30, r10
    aae4:	80 81       	ld	r24, Z
    aae6:	91 81       	ldd	r25, Z+1	; 0x01
    aae8:	bc 01       	movw	r22, r24
    aaea:	80 e0       	ldi	r24, 0x00	; 0
    aaec:	90 e0       	ldi	r25, 0x00	; 0
    aaee:	42 e0       	ldi	r20, 0x02	; 2
    aaf0:	50 e0       	ldi	r21, 0x00	; 0
    aaf2:	a4 0e       	add	r10, r20
    aaf4:	b5 1e       	adc	r11, r21
    aaf6:	a1 01       	movw	r20, r2
    aaf8:	0e 94 91 56 	call	0xad22	; 0xad22 <__ultoa_invert>
    aafc:	d8 2e       	mov	r13, r24
    aafe:	d2 18       	sub	r13, r2
    ab00:	8f e7       	ldi	r24, 0x7F	; 127
    ab02:	f8 2e       	mov	r15, r24
    ab04:	f1 22       	and	r15, r17
    ab06:	f6 fe       	sbrs	r15, 6
    ab08:	0b c0       	rjmp	.+22     	; 0xab20 <vfprintf+0x2ee>
    ab0a:	5e ef       	ldi	r21, 0xFE	; 254
    ab0c:	f5 22       	and	r15, r21
    ab0e:	d9 14       	cp	r13, r9
    ab10:	38 f4       	brcc	.+14     	; 0xab20 <vfprintf+0x2ee>
    ab12:	f4 fe       	sbrs	r15, 4
    ab14:	07 c0       	rjmp	.+14     	; 0xab24 <vfprintf+0x2f2>
    ab16:	f2 fc       	sbrc	r15, 2
    ab18:	05 c0       	rjmp	.+10     	; 0xab24 <vfprintf+0x2f2>
    ab1a:	8f ee       	ldi	r24, 0xEF	; 239
    ab1c:	f8 22       	and	r15, r24
    ab1e:	02 c0       	rjmp	.+4      	; 0xab24 <vfprintf+0x2f2>
    ab20:	1d 2d       	mov	r17, r13
    ab22:	01 c0       	rjmp	.+2      	; 0xab26 <vfprintf+0x2f4>
    ab24:	19 2d       	mov	r17, r9
    ab26:	f4 fe       	sbrs	r15, 4
    ab28:	0d c0       	rjmp	.+26     	; 0xab44 <vfprintf+0x312>
    ab2a:	fe 01       	movw	r30, r28
    ab2c:	ed 0d       	add	r30, r13
    ab2e:	f1 1d       	adc	r31, r1
    ab30:	80 81       	ld	r24, Z
    ab32:	80 33       	cpi	r24, 0x30	; 48
    ab34:	19 f4       	brne	.+6      	; 0xab3c <vfprintf+0x30a>
    ab36:	99 ee       	ldi	r25, 0xE9	; 233
    ab38:	f9 22       	and	r15, r25
    ab3a:	08 c0       	rjmp	.+16     	; 0xab4c <vfprintf+0x31a>
    ab3c:	1f 5f       	subi	r17, 0xFF	; 255
    ab3e:	f2 fe       	sbrs	r15, 2
    ab40:	05 c0       	rjmp	.+10     	; 0xab4c <vfprintf+0x31a>
    ab42:	03 c0       	rjmp	.+6      	; 0xab4a <vfprintf+0x318>
    ab44:	8f 2d       	mov	r24, r15
    ab46:	86 78       	andi	r24, 0x86	; 134
    ab48:	09 f0       	breq	.+2      	; 0xab4c <vfprintf+0x31a>
    ab4a:	1f 5f       	subi	r17, 0xFF	; 255
    ab4c:	0f 2d       	mov	r16, r15
    ab4e:	f3 fc       	sbrc	r15, 3
    ab50:	14 c0       	rjmp	.+40     	; 0xab7a <vfprintf+0x348>
    ab52:	f0 fe       	sbrs	r15, 0
    ab54:	0f c0       	rjmp	.+30     	; 0xab74 <vfprintf+0x342>
    ab56:	1e 15       	cp	r17, r14
    ab58:	10 f0       	brcs	.+4      	; 0xab5e <vfprintf+0x32c>
    ab5a:	9d 2c       	mov	r9, r13
    ab5c:	0b c0       	rjmp	.+22     	; 0xab74 <vfprintf+0x342>
    ab5e:	9d 2c       	mov	r9, r13
    ab60:	9e 0c       	add	r9, r14
    ab62:	91 1a       	sub	r9, r17
    ab64:	1e 2d       	mov	r17, r14
    ab66:	06 c0       	rjmp	.+12     	; 0xab74 <vfprintf+0x342>
    ab68:	80 e2       	ldi	r24, 0x20	; 32
    ab6a:	90 e0       	ldi	r25, 0x00	; 0
    ab6c:	b3 01       	movw	r22, r6
    ab6e:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    ab72:	1f 5f       	subi	r17, 0xFF	; 255
    ab74:	1e 15       	cp	r17, r14
    ab76:	c0 f3       	brcs	.-16     	; 0xab68 <vfprintf+0x336>
    ab78:	04 c0       	rjmp	.+8      	; 0xab82 <vfprintf+0x350>
    ab7a:	1e 15       	cp	r17, r14
    ab7c:	10 f4       	brcc	.+4      	; 0xab82 <vfprintf+0x350>
    ab7e:	e1 1a       	sub	r14, r17
    ab80:	01 c0       	rjmp	.+2      	; 0xab84 <vfprintf+0x352>
    ab82:	ee 24       	eor	r14, r14
    ab84:	04 ff       	sbrs	r16, 4
    ab86:	0f c0       	rjmp	.+30     	; 0xaba6 <vfprintf+0x374>
    ab88:	80 e3       	ldi	r24, 0x30	; 48
    ab8a:	90 e0       	ldi	r25, 0x00	; 0
    ab8c:	b3 01       	movw	r22, r6
    ab8e:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    ab92:	02 ff       	sbrs	r16, 2
    ab94:	1d c0       	rjmp	.+58     	; 0xabd0 <vfprintf+0x39e>
    ab96:	01 fd       	sbrc	r16, 1
    ab98:	03 c0       	rjmp	.+6      	; 0xaba0 <vfprintf+0x36e>
    ab9a:	88 e7       	ldi	r24, 0x78	; 120
    ab9c:	90 e0       	ldi	r25, 0x00	; 0
    ab9e:	0e c0       	rjmp	.+28     	; 0xabbc <vfprintf+0x38a>
    aba0:	88 e5       	ldi	r24, 0x58	; 88
    aba2:	90 e0       	ldi	r25, 0x00	; 0
    aba4:	0b c0       	rjmp	.+22     	; 0xabbc <vfprintf+0x38a>
    aba6:	80 2f       	mov	r24, r16
    aba8:	86 78       	andi	r24, 0x86	; 134
    abaa:	91 f0       	breq	.+36     	; 0xabd0 <vfprintf+0x39e>
    abac:	01 ff       	sbrs	r16, 1
    abae:	02 c0       	rjmp	.+4      	; 0xabb4 <vfprintf+0x382>
    abb0:	8b e2       	ldi	r24, 0x2B	; 43
    abb2:	01 c0       	rjmp	.+2      	; 0xabb6 <vfprintf+0x384>
    abb4:	80 e2       	ldi	r24, 0x20	; 32
    abb6:	f7 fc       	sbrc	r15, 7
    abb8:	8d e2       	ldi	r24, 0x2D	; 45
    abba:	90 e0       	ldi	r25, 0x00	; 0
    abbc:	b3 01       	movw	r22, r6
    abbe:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    abc2:	06 c0       	rjmp	.+12     	; 0xabd0 <vfprintf+0x39e>
    abc4:	80 e3       	ldi	r24, 0x30	; 48
    abc6:	90 e0       	ldi	r25, 0x00	; 0
    abc8:	b3 01       	movw	r22, r6
    abca:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    abce:	9a 94       	dec	r9
    abd0:	d9 14       	cp	r13, r9
    abd2:	c0 f3       	brcs	.-16     	; 0xabc4 <vfprintf+0x392>
    abd4:	da 94       	dec	r13
    abd6:	f1 01       	movw	r30, r2
    abd8:	ed 0d       	add	r30, r13
    abda:	f1 1d       	adc	r31, r1
    abdc:	80 81       	ld	r24, Z
    abde:	90 e0       	ldi	r25, 0x00	; 0
    abe0:	b3 01       	movw	r22, r6
    abe2:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    abe6:	dd 20       	and	r13, r13
    abe8:	a9 f7       	brne	.-22     	; 0xabd4 <vfprintf+0x3a2>
    abea:	06 c0       	rjmp	.+12     	; 0xabf8 <vfprintf+0x3c6>
    abec:	80 e2       	ldi	r24, 0x20	; 32
    abee:	90 e0       	ldi	r25, 0x00	; 0
    abf0:	b3 01       	movw	r22, r6
    abf2:	0e 94 65 56 	call	0xacca	; 0xacca <fputc>
    abf6:	ea 94       	dec	r14
    abf8:	ee 20       	and	r14, r14
    abfa:	c1 f7       	brne	.-16     	; 0xabec <vfprintf+0x3ba>
    abfc:	43 ce       	rjmp	.-890    	; 0xa884 <vfprintf+0x52>
    abfe:	f3 01       	movw	r30, r6
    ac00:	66 81       	ldd	r22, Z+6	; 0x06
    ac02:	77 81       	ldd	r23, Z+7	; 0x07
    ac04:	cb 01       	movw	r24, r22
    ac06:	2b 96       	adiw	r28, 0x0b	; 11
    ac08:	cd bf       	out	0x3d, r28	; 61
    ac0a:	de bf       	out	0x3e, r29	; 62
    ac0c:	cf 91       	pop	r28
    ac0e:	df 91       	pop	r29
    ac10:	1f 91       	pop	r17
    ac12:	0f 91       	pop	r16
    ac14:	ff 90       	pop	r15
    ac16:	ef 90       	pop	r14
    ac18:	df 90       	pop	r13
    ac1a:	cf 90       	pop	r12
    ac1c:	bf 90       	pop	r11
    ac1e:	af 90       	pop	r10
    ac20:	9f 90       	pop	r9
    ac22:	8f 90       	pop	r8
    ac24:	7f 90       	pop	r7
    ac26:	6f 90       	pop	r6
    ac28:	5f 90       	pop	r5
    ac2a:	4f 90       	pop	r4
    ac2c:	3f 90       	pop	r3
    ac2e:	2f 90       	pop	r2
    ac30:	08 95       	ret

0000ac32 <__eerd_byte_x128a1>:
    ac32:	03 d0       	rcall	.+6      	; 0xac3a <eeprom_mapen>
    ac34:	80 81       	ld	r24, Z
    ac36:	99 27       	eor	r25, r25
    ac38:	08 95       	ret

0000ac3a <eeprom_mapen>:
    ac3a:	e0 ec       	ldi	r30, 0xC0	; 192
    ac3c:	f1 e0       	ldi	r31, 0x01	; 1
    ac3e:	37 85       	ldd	r19, Z+15	; 0x0f
    ac40:	37 fd       	sbrc	r19, 7
    ac42:	fd cf       	rjmp	.-6      	; 0xac3e <eeprom_mapen+0x4>
    ac44:	34 85       	ldd	r19, Z+12	; 0x0c
    ac46:	38 60       	ori	r19, 0x08	; 8
    ac48:	34 87       	std	Z+12, r19	; 0x0c
    ac4a:	fc 01       	movw	r30, r24
    ac4c:	e0 50       	subi	r30, 0x00	; 0
    ac4e:	f0 4f       	sbci	r31, 0xF0	; 240
    ac50:	08 95       	ret

0000ac52 <__eewr_byte_x128a1>:
    ac52:	26 2f       	mov	r18, r22

0000ac54 <__eewr_r18_x128a1>:
    ac54:	e0 ec       	ldi	r30, 0xC0	; 192
    ac56:	f1 e0       	ldi	r31, 0x01	; 1
    ac58:	37 85       	ldd	r19, Z+15	; 0x0f
    ac5a:	37 fd       	sbrc	r19, 7
    ac5c:	fd cf       	rjmp	.-6      	; 0xac58 <__eewr_r18_x128a1+0x4>
    ac5e:	34 85       	ldd	r19, Z+12	; 0x0c
    ac60:	37 7f       	andi	r19, 0xF7	; 247
    ac62:	34 87       	std	Z+12, r19	; 0x0c
    ac64:	37 85       	ldd	r19, Z+15	; 0x0f
    ac66:	31 ff       	sbrs	r19, 1
    ac68:	09 c0       	rjmp	.+18     	; 0xac7c <__eewr_r18_x128a1+0x28>
    ac6a:	36 e3       	ldi	r19, 0x36	; 54
    ac6c:	32 87       	std	Z+10, r19	; 0x0a
    ac6e:	38 ed       	ldi	r19, 0xD8	; 216
    ac70:	34 bf       	out	0x34, r19	; 52
    ac72:	31 e0       	ldi	r19, 0x01	; 1
    ac74:	33 87       	std	Z+11, r19	; 0x0b
    ac76:	37 85       	ldd	r19, Z+15	; 0x0f
    ac78:	37 fd       	sbrc	r19, 7
    ac7a:	fd cf       	rjmp	.-6      	; 0xac76 <__eewr_r18_x128a1+0x22>
    ac7c:	33 e3       	ldi	r19, 0x33	; 51
    ac7e:	32 87       	std	Z+10, r19	; 0x0a
    ac80:	80 83       	st	Z, r24
    ac82:	91 83       	std	Z+1, r25	; 0x01
    ac84:	12 82       	std	Z+2, r1	; 0x02
    ac86:	24 83       	std	Z+4, r18	; 0x04
    ac88:	25 e3       	ldi	r18, 0x35	; 53
    ac8a:	22 87       	std	Z+10, r18	; 0x0a
    ac8c:	28 ed       	ldi	r18, 0xD8	; 216
    ac8e:	31 e0       	ldi	r19, 0x01	; 1
    ac90:	24 bf       	out	0x34, r18	; 52
    ac92:	33 87       	std	Z+11, r19	; 0x0b
    ac94:	01 96       	adiw	r24, 0x01	; 1
    ac96:	08 95       	ret

0000ac98 <__ctype_isfalse>:
    ac98:	99 27       	eor	r25, r25
    ac9a:	88 27       	eor	r24, r24

0000ac9c <__ctype_istrue>:
    ac9c:	08 95       	ret

0000ac9e <strnlen_P>:
    ac9e:	fc 01       	movw	r30, r24
    aca0:	05 90       	lpm	r0, Z+
    aca2:	61 50       	subi	r22, 0x01	; 1
    aca4:	70 40       	sbci	r23, 0x00	; 0
    aca6:	01 10       	cpse	r0, r1
    aca8:	d8 f7       	brcc	.-10     	; 0xaca0 <strnlen_P+0x2>
    acaa:	80 95       	com	r24
    acac:	90 95       	com	r25
    acae:	8e 0f       	add	r24, r30
    acb0:	9f 1f       	adc	r25, r31
    acb2:	08 95       	ret

0000acb4 <strnlen>:
    acb4:	fc 01       	movw	r30, r24
    acb6:	61 50       	subi	r22, 0x01	; 1
    acb8:	70 40       	sbci	r23, 0x00	; 0
    acba:	01 90       	ld	r0, Z+
    acbc:	01 10       	cpse	r0, r1
    acbe:	d8 f7       	brcc	.-10     	; 0xacb6 <strnlen+0x2>
    acc0:	80 95       	com	r24
    acc2:	90 95       	com	r25
    acc4:	8e 0f       	add	r24, r30
    acc6:	9f 1f       	adc	r25, r31
    acc8:	08 95       	ret

0000acca <fputc>:
    acca:	0f 93       	push	r16
    accc:	1f 93       	push	r17
    acce:	cf 93       	push	r28
    acd0:	df 93       	push	r29
    acd2:	8c 01       	movw	r16, r24
    acd4:	eb 01       	movw	r28, r22
    acd6:	8b 81       	ldd	r24, Y+3	; 0x03
    acd8:	81 ff       	sbrs	r24, 1
    acda:	1b c0       	rjmp	.+54     	; 0xad12 <fputc+0x48>
    acdc:	82 ff       	sbrs	r24, 2
    acde:	0d c0       	rjmp	.+26     	; 0xacfa <fputc+0x30>
    ace0:	2e 81       	ldd	r18, Y+6	; 0x06
    ace2:	3f 81       	ldd	r19, Y+7	; 0x07
    ace4:	8c 81       	ldd	r24, Y+4	; 0x04
    ace6:	9d 81       	ldd	r25, Y+5	; 0x05
    ace8:	28 17       	cp	r18, r24
    acea:	39 07       	cpc	r19, r25
    acec:	64 f4       	brge	.+24     	; 0xad06 <fputc+0x3c>
    acee:	e8 81       	ld	r30, Y
    acf0:	f9 81       	ldd	r31, Y+1	; 0x01
    acf2:	01 93       	st	Z+, r16
    acf4:	e8 83       	st	Y, r30
    acf6:	f9 83       	std	Y+1, r31	; 0x01
    acf8:	06 c0       	rjmp	.+12     	; 0xad06 <fputc+0x3c>
    acfa:	e8 85       	ldd	r30, Y+8	; 0x08
    acfc:	f9 85       	ldd	r31, Y+9	; 0x09
    acfe:	80 2f       	mov	r24, r16
    ad00:	19 95       	eicall
    ad02:	89 2b       	or	r24, r25
    ad04:	31 f4       	brne	.+12     	; 0xad12 <fputc+0x48>
    ad06:	8e 81       	ldd	r24, Y+6	; 0x06
    ad08:	9f 81       	ldd	r25, Y+7	; 0x07
    ad0a:	01 96       	adiw	r24, 0x01	; 1
    ad0c:	8e 83       	std	Y+6, r24	; 0x06
    ad0e:	9f 83       	std	Y+7, r25	; 0x07
    ad10:	02 c0       	rjmp	.+4      	; 0xad16 <fputc+0x4c>
    ad12:	0f ef       	ldi	r16, 0xFF	; 255
    ad14:	1f ef       	ldi	r17, 0xFF	; 255
    ad16:	c8 01       	movw	r24, r16
    ad18:	df 91       	pop	r29
    ad1a:	cf 91       	pop	r28
    ad1c:	1f 91       	pop	r17
    ad1e:	0f 91       	pop	r16
    ad20:	08 95       	ret

0000ad22 <__ultoa_invert>:
    ad22:	fa 01       	movw	r30, r20
    ad24:	aa 27       	eor	r26, r26
    ad26:	28 30       	cpi	r18, 0x08	; 8
    ad28:	51 f1       	breq	.+84     	; 0xad7e <__ultoa_invert+0x5c>
    ad2a:	20 31       	cpi	r18, 0x10	; 16
    ad2c:	81 f1       	breq	.+96     	; 0xad8e <__ultoa_invert+0x6c>
    ad2e:	e8 94       	clt
    ad30:	6f 93       	push	r22
    ad32:	6e 7f       	andi	r22, 0xFE	; 254
    ad34:	6e 5f       	subi	r22, 0xFE	; 254
    ad36:	7f 4f       	sbci	r23, 0xFF	; 255
    ad38:	8f 4f       	sbci	r24, 0xFF	; 255
    ad3a:	9f 4f       	sbci	r25, 0xFF	; 255
    ad3c:	af 4f       	sbci	r26, 0xFF	; 255
    ad3e:	b1 e0       	ldi	r27, 0x01	; 1
    ad40:	3e d0       	rcall	.+124    	; 0xadbe <__ultoa_invert+0x9c>
    ad42:	b4 e0       	ldi	r27, 0x04	; 4
    ad44:	3c d0       	rcall	.+120    	; 0xadbe <__ultoa_invert+0x9c>
    ad46:	67 0f       	add	r22, r23
    ad48:	78 1f       	adc	r23, r24
    ad4a:	89 1f       	adc	r24, r25
    ad4c:	9a 1f       	adc	r25, r26
    ad4e:	a1 1d       	adc	r26, r1
    ad50:	68 0f       	add	r22, r24
    ad52:	79 1f       	adc	r23, r25
    ad54:	8a 1f       	adc	r24, r26
    ad56:	91 1d       	adc	r25, r1
    ad58:	a1 1d       	adc	r26, r1
    ad5a:	6a 0f       	add	r22, r26
    ad5c:	71 1d       	adc	r23, r1
    ad5e:	81 1d       	adc	r24, r1
    ad60:	91 1d       	adc	r25, r1
    ad62:	a1 1d       	adc	r26, r1
    ad64:	20 d0       	rcall	.+64     	; 0xada6 <__ultoa_invert+0x84>
    ad66:	09 f4       	brne	.+2      	; 0xad6a <__ultoa_invert+0x48>
    ad68:	68 94       	set
    ad6a:	3f 91       	pop	r19
    ad6c:	2a e0       	ldi	r18, 0x0A	; 10
    ad6e:	26 9f       	mul	r18, r22
    ad70:	11 24       	eor	r1, r1
    ad72:	30 19       	sub	r19, r0
    ad74:	30 5d       	subi	r19, 0xD0	; 208
    ad76:	31 93       	st	Z+, r19
    ad78:	de f6       	brtc	.-74     	; 0xad30 <__ultoa_invert+0xe>
    ad7a:	cf 01       	movw	r24, r30
    ad7c:	08 95       	ret
    ad7e:	46 2f       	mov	r20, r22
    ad80:	47 70       	andi	r20, 0x07	; 7
    ad82:	40 5d       	subi	r20, 0xD0	; 208
    ad84:	41 93       	st	Z+, r20
    ad86:	b3 e0       	ldi	r27, 0x03	; 3
    ad88:	0f d0       	rcall	.+30     	; 0xada8 <__ultoa_invert+0x86>
    ad8a:	c9 f7       	brne	.-14     	; 0xad7e <__ultoa_invert+0x5c>
    ad8c:	f6 cf       	rjmp	.-20     	; 0xad7a <__ultoa_invert+0x58>
    ad8e:	46 2f       	mov	r20, r22
    ad90:	4f 70       	andi	r20, 0x0F	; 15
    ad92:	40 5d       	subi	r20, 0xD0	; 208
    ad94:	4a 33       	cpi	r20, 0x3A	; 58
    ad96:	18 f0       	brcs	.+6      	; 0xad9e <__ultoa_invert+0x7c>
    ad98:	49 5d       	subi	r20, 0xD9	; 217
    ad9a:	31 fd       	sbrc	r19, 1
    ad9c:	40 52       	subi	r20, 0x20	; 32
    ad9e:	41 93       	st	Z+, r20
    ada0:	02 d0       	rcall	.+4      	; 0xada6 <__ultoa_invert+0x84>
    ada2:	a9 f7       	brne	.-22     	; 0xad8e <__ultoa_invert+0x6c>
    ada4:	ea cf       	rjmp	.-44     	; 0xad7a <__ultoa_invert+0x58>
    ada6:	b4 e0       	ldi	r27, 0x04	; 4
    ada8:	a6 95       	lsr	r26
    adaa:	97 95       	ror	r25
    adac:	87 95       	ror	r24
    adae:	77 95       	ror	r23
    adb0:	67 95       	ror	r22
    adb2:	ba 95       	dec	r27
    adb4:	c9 f7       	brne	.-14     	; 0xada8 <__ultoa_invert+0x86>
    adb6:	00 97       	sbiw	r24, 0x00	; 0
    adb8:	61 05       	cpc	r22, r1
    adba:	71 05       	cpc	r23, r1
    adbc:	08 95       	ret
    adbe:	9b 01       	movw	r18, r22
    adc0:	ac 01       	movw	r20, r24
    adc2:	0a 2e       	mov	r0, r26
    adc4:	06 94       	lsr	r0
    adc6:	57 95       	ror	r21
    adc8:	47 95       	ror	r20
    adca:	37 95       	ror	r19
    adcc:	27 95       	ror	r18
    adce:	ba 95       	dec	r27
    add0:	c9 f7       	brne	.-14     	; 0xadc4 <__ultoa_invert+0xa2>
    add2:	62 0f       	add	r22, r18
    add4:	73 1f       	adc	r23, r19
    add6:	84 1f       	adc	r24, r20
    add8:	95 1f       	adc	r25, r21
    adda:	a0 1d       	adc	r26, r0
    addc:	08 95       	ret

0000adde <_exit>:
    adde:	f8 94       	cli

0000ade0 <__stop_program>:
    ade0:	ff cf       	rjmp	.-2      	; 0xade0 <__stop_program>
